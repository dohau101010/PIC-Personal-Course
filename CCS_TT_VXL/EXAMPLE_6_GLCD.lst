CCS PCH C Compiler, Version 5.015, 5967               22-Jun-23 15:16

               Filename:   E:\CCS VXL\THUC TAP VXL_SP\VXL_VIP_PRO\CCS_TT_VXL\EXAMPLE_6_GLCD.lst

               ROM used:   9286 bytes (28%)
                           Largest free fragment is 23482
               RAM used:   1072 (52%) at main() level
                           1159 (57%) worst case
               Stack used: 6 locations
               Stack size: 31

*
0000:  GOTO   227A
.................... /************************************ Yeu cau ******************************************************************* 
.................... 1. HT LOGO SPKT tai toa do x = 0 
.................... 2. HT hinh tron (circle) mau trang(1) ban kinh R=6 tai tao do xy=(70,7) 
.................... 3. HT hinh chu nhat (rect) mau trang(1) tao boi 2 diem x1x1 = (85,1), x2y2= (97,13) 
.................... 4. HT hinh tam giac (triangle) mau trang(1) tao boi 3 diem x1x1 = (103,13), x2y2= (110,1) , x3x3 = (117,13) 
.................... 5. HT doan thang (line) mau trang(1) di qua 2 diem x1x1 = (64,15), x2y2= (118,15) 
.................... 6. HT thanh (bar) mau trang(1) co do day =3 va di qua 2 diem x1x1 = (64,53), x2y2= (118,53) 
.................... 7. HT chuoi (text) noi dung la "SPKT" mau trang(1) tai toa do xy=(80,57), font 5x7 
.................... 8. HT gia tri bien "dem" tu 00-99 mau trang (1) tai toa do xy=(70,20), font 20x28 
....................  
.................... **************************** Cac kien thuc lien quan ********************************************************* 
.................... 1. De ve LOGO SPKT ta dung ham:      glcd_spkt_logo_raw(int x) ;                
.................... 2. De ve hinh tron ta dung ham:      glcd_circle(x, y, radius,  fill, color);   
.................... 3. De ve hinh chu nhat ta dung ham:  glcd_rect(x1,y1, x2, y2,  fill, color); 
.................... 4. De ve hinh tam gia ta dung ham:   glcd_triangle(x1,y1, x2,  y2, x3, y3, fill,color); 
.................... 5. De ve doan thang ta dung ham:     glcd_line(x1, y1, x2,  y2,  color); 
.................... 6. De ve thanh ta dung ham:          glcd_bar(x1, y1, x2, y2, width, color); 
.................... 7. De ghi chuoi ky tu ta dung ham:   glcd_text_setup( x, y,size, color, overlay) ; 
....................                                      glcd_text( "chuoi can hien thi"); 
.................... 8. De ghi gia tri cua bien ta dung:  glcd_text_setup( x, y,size, color, overlay) ; 
....................                                      printf(glcd_text,"%??",bien);  // xem lai ham printf trong EXAMPLE_LCD.c                                      
.................... Trong do:                                    
....................          . x,y, x1,y1, x2, y2, x3,y3  : la cac toa do 
....................          . radius                     : la ban kinh hinh tron 
....................          . width                      : la do day cua thanh 
....................          . fill                       : la co to kin ben trong hinh can ve khong? (1=co , 0=khong) 
....................          . color                      : la mau can ve ( 1: trang , 0 : xanh) 
....................          . size                       : la kich thuoc chu, vi du size = 3 co kich thuoc la (3*5) x (3*7) = 15x21 
....................          . overlay                    : co ghi de len cac noi dung truoc do khong ? (1=co , 0=khong) 
.................... 9. De hien thi cac noi dung da ve ra man hinh ta dung ham :  glcd_update(); 
.................... Chu y:   . Thieu ham nay GLCD se khong hien thi 
....................          . Neu cac net ve khong nam de len nhau thi sau khi ve noi net ra goi ham "glcd_update();" ngay sau do 
....................          . Neu cac net ve nam de len nhau thi ta ve xong het cac net do roi moi goi ham "glcd_update();" 
....................           
.................... *********************************** Chuong trinh ***************************************************************/ 
.................... #define   BOARD     D501   
.................... #include<tv_boards.c>   
.................... #ifndef    __TV_BOARDS_C__ 
.................... #define    __TV_BOARDS_C__ 
.................... #define    D401          1 
.................... #define    D501          2 
.................... #define    D503          3 
.................... #define    MOPHONG       4 
.................... #ifndef    BOARD 
.................... #define    BOARD         MOPHONG 
.................... #endif 
.................... #if  BOARD ==  D401 
.................... #include <TV_D401_TH.C> 
....................  
.................... #elif  BOARD ==  D501 
.................... #include <TV_D501_TH.C> 
.................... #ifndef    __TV_D501_TH_C__ 
.................... #define    __TV_D501_TH_C__ 
.................... #include<TV_D501_TH.h> 
.................... #ifndef    __TV_D501_TH_H__ 
.................... #define    __TV_D501_TH_H__ 
.................... #include     <18f4550.h> 
.................... //////////// Standard Header file for the PIC18F4550 device //////////////// 
.................... /////////////////////////////////////////////////////////////////////////// 
.................... ////        (C) Copyright 1996, 2013 Custom Computer Services          //// 
.................... //// This source code may only be used by licensed users of the CCS C  //// 
.................... //// compiler.  This source code may only be distributed to other      //// 
.................... //// licensed users of the CCS C compiler.  No other use, reproduction //// 
.................... //// or distribution is permitted without written permission.          //// 
.................... //// Derivative programs created using this software in object code    //// 
.................... //// form are not restricted in any way.                               //// 
.................... /////////////////////////////////////////////////////////////////////////// 
.................... #device PIC18F4550 
0004:  CLRF   FF7
0006:  ADDLW  14
0008:  MOVWF  FF6
000A:  MOVLW  00
000C:  ADDWFC FF7,F
000E:  TBLRD*+
0010:  MOVF   FF5,W
0012:  RETURN 0
0014:  DATA 00,00
0016:  DATA 00,00
0018:  DATA 00,00
001A:  DATA 00,5F
001C:  DATA 00,00
001E:  DATA 00,03
0020:  DATA 00,03
0022:  DATA 00,14
0024:  DATA 3E,14
0026:  DATA 3E,14
0028:  DATA 24,2A
002A:  DATA 7F,2A
002C:  DATA 12,43
002E:  DATA 33,08
0030:  DATA 66,61
0032:  DATA 36,49
0034:  DATA 55,22
0036:  DATA 50,00
0038:  DATA 05,03
003A:  DATA 00,00
003C:  DATA 00,1C
003E:  DATA 22,41
0040:  DATA 00,00
0042:  DATA 41,22
0044:  DATA 1C,00
0046:  DATA 14,08
0048:  DATA 3E,08
004A:  DATA 14,08
004C:  DATA 08,3E
004E:  DATA 08,08
0050:  DATA 00,50
0052:  DATA 30,00
0054:  DATA 00,08
0056:  DATA 08,08
0058:  DATA 08,08
005A:  DATA 00,60
005C:  DATA 60,00
005E:  DATA 00,20
0060:  DATA 10,08
0062:  DATA 04,02
0064:  DATA 3E,51
0066:  DATA 49,45
0068:  DATA 3E,00
006A:  DATA 04,02
006C:  DATA 7F,00
006E:  DATA 42,61
0070:  DATA 51,49
0072:  DATA 46,22
0074:  DATA 41,49
0076:  DATA 49,36
0078:  DATA 18,14
007A:  DATA 12,7F
007C:  DATA 10,27
007E:  DATA 45,45
0080:  DATA 45,39
0082:  DATA 3E,49
0084:  DATA 49,49
0086:  DATA 32,01
0088:  DATA 01,71
008A:  DATA 09,07
008C:  DATA 36,49
008E:  DATA 49,49
0090:  DATA 36,26
0092:  DATA 49,49
0094:  DATA 49,3E
0096:  DATA 00,36
0098:  DATA 36,00
009A:  DATA 00,00
009C:  DATA 56,36
009E:  DATA 00,00
00A0:  DATA 08,14
00A2:  DATA 22,41
00A4:  DATA 00,14
00A6:  DATA 14,14
00A8:  DATA 14,14
00AA:  DATA 00,41
00AC:  DATA 22,14
00AE:  DATA 08,02
00B0:  DATA 01,51
00B2:  DATA 09,06
00B4:  DATA 3E,41
00B6:  DATA 59,55
00B8:  DATA 5E,7E
00BA:  DATA 09,09
00BC:  DATA 09,7E
00BE:  DATA 7F,49
00C0:  DATA 49,49
00C2:  DATA 36,3E
00C4:  DATA 41,41
00C6:  DATA 41,22
00C8:  DATA 7F,41
00CA:  DATA 41,41
00CC:  DATA 3E,7F
00CE:  DATA 49,49
00D0:  DATA 49,41
00D2:  DATA 7F,09
00D4:  DATA 09,09
00D6:  DATA 01,3E
00D8:  DATA 41,41
00DA:  DATA 49,3A
00DC:  DATA 7F,08
00DE:  DATA 08,08
00E0:  DATA 7F,00
00E2:  DATA 41,7F
00E4:  DATA 41,00
00E6:  DATA 30,40
00E8:  DATA 40,40
00EA:  DATA 3F,7F
00EC:  DATA 08,14
00EE:  DATA 22,41
00F0:  DATA 7F,40
00F2:  DATA 40,40
00F4:  DATA 40,7F
00F6:  DATA 02,0C
00F8:  DATA 02,7F
00FA:  DATA 7F,02
00FC:  DATA 04,08
00FE:  DATA 7F,3E
0100:  DATA 41,41
0102:  DATA 41,3E
0104:  DATA 7F,09
0106:  DATA 09,09
0108:  DATA 06,1E
010A:  DATA 21,21
010C:  DATA 21,5E
010E:  DATA 7F,09
0110:  DATA 09,09
0112:  DATA 76,00
0114:  CLRF   FF7
0116:  ADDLW  24
0118:  MOVWF  FF6
011A:  MOVLW  01
011C:  ADDWFC FF7,F
011E:  TBLRD*+
0120:  MOVF   FF5,W
0122:  RETURN 0
0124:  DATA 26,49
0126:  DATA 49,49
0128:  DATA 32,01
012A:  DATA 01,7F
012C:  DATA 01,01
012E:  DATA 3F,40
0130:  DATA 40,40
0132:  DATA 3F,1F
0134:  DATA 20,40
0136:  DATA 20,1F
0138:  DATA 7F,20
013A:  DATA 10,20
013C:  DATA 7F,41
013E:  DATA 22,1C
0140:  DATA 22,41
0142:  DATA 07,08
0144:  DATA 70,08
0146:  DATA 07,61
0148:  DATA 51,49
014A:  DATA 45,43
014C:  DATA 00,7F
014E:  DATA 41,00
0150:  DATA 00,02
0152:  DATA 04,08
0154:  DATA 10,20
0156:  DATA 00,00
0158:  DATA 41,7F
015A:  DATA 00,04
015C:  DATA 02,01
015E:  DATA 02,04
0160:  DATA 40,40
0162:  DATA 40,40
0164:  DATA 40,00
0166:  DATA 01,02
0168:  DATA 04,00
016A:  DATA 20,54
016C:  DATA 54,54
016E:  DATA 78,7F
0170:  DATA 44,44
0172:  DATA 44,38
0174:  DATA 38,44
0176:  DATA 44,44
0178:  DATA 44,38
017A:  DATA 44,44
017C:  DATA 44,7F
017E:  DATA 38,54
0180:  DATA 54,54
0182:  DATA 18,04
0184:  DATA 04,7E
0186:  DATA 05,05
0188:  DATA 08,54
018A:  DATA 54,54
018C:  DATA 3C,7F
018E:  DATA 08,04
0190:  DATA 04,78
0192:  DATA 00,44
0194:  DATA 7D,40
0196:  DATA 00,20
0198:  DATA 40,44
019A:  DATA 3D,00
019C:  DATA 7F,10
019E:  DATA 28,44
01A0:  DATA 00,00
01A2:  DATA 41,7F
01A4:  DATA 40,00
01A6:  DATA 7C,04
01A8:  DATA 78,04
01AA:  DATA 78,7C
01AC:  DATA 08,04
01AE:  DATA 04,78
01B0:  DATA 38,44
01B2:  DATA 44,44
01B4:  DATA 38,7C
01B6:  DATA 14,14
01B8:  DATA 14,08
01BA:  DATA 08,14
01BC:  DATA 14,14
01BE:  DATA 7C,00
01C0:  DATA 7C,08
01C2:  DATA 04,04
01C4:  DATA 48,54
01C6:  DATA 54,54
01C8:  DATA 20,04
01CA:  DATA 04,3F
01CC:  DATA 44,44
01CE:  DATA 3C,40
01D0:  DATA 40,20
01D2:  DATA 7C,1C
01D4:  DATA 20,40
01D6:  DATA 20,1C
01D8:  DATA 3C,40
01DA:  DATA 30,40
01DC:  DATA 3C,44
01DE:  DATA 28,10
01E0:  DATA 28,44
01E2:  DATA 0C,50
01E4:  DATA 50,50
01E6:  DATA 3C,44
01E8:  DATA 64,54
01EA:  DATA 4C,44
01EC:  DATA 00,08
01EE:  DATA 36,41
01F0:  DATA 41,00
01F2:  DATA 00,7F
01F4:  DATA 00,00
01F6:  DATA 41,41
01F8:  DATA 36,08
01FA:  DATA 00,02
01FC:  DATA 01,02
01FE:  DATA 04,02
0200:  ADDLW  0E
0202:  MOVWF  FF6
0204:  MOVLW  02
0206:  ADDWFC FF7,F
0208:  TBLRD*+
020A:  MOVF   FF5,W
020C:  RETURN 0
020E:  DATA 00,00
0210:  DATA 00,00
0212:  DATA 00,00
0214:  DATA 00,00
0216:  DATA 00,00
0218:  DATA 00,00
021A:  DATA 00,00
021C:  DATA 00,00
021E:  DATA 00,00
0220:  DATA 00,00
0222:  DATA 00,00
0224:  DATA 00,00
0226:  DATA 00,00
0228:  DATA 00,01
022A:  DATA 80,00
022C:  DATA 00,00
022E:  DATA 00,00
0230:  DATA 00,01
0232:  DATA 80,00
0234:  DATA 00,00
0236:  DATA 00,00
0238:  DATA 00,01
023A:  DATA 80,00
023C:  DATA 00,00
023E:  DATA 00,00
0240:  DATA 00,07
0242:  DATA E0,00
0244:  DATA 00,00
0246:  DATA 00,00
0248:  DATA 00,07
024A:  DATA A0,00
024C:  DATA 00,00
024E:  DATA 00,00
0250:  DATA 00,03
0252:  DATA 20,00
0254:  DATA 00,00
0256:  DATA 00,00
0258:  DATA 00,03
025A:  DATA 20,00
025C:  DATA 00,00
025E:  DATA 00,00
0260:  DATA 00,02
0262:  DATA 20,00
0264:  DATA 00,00
0266:  DATA 00,00
0268:  DATA 00,02
026A:  DATA 30,00
026C:  DATA 00,00
026E:  DATA 00,00
0270:  DATA 00,02
0272:  DATA 30,00
0274:  DATA 00,00
0276:  DATA 00,7F
0278:  DATA 00,00
027A:  DATA 30,00
027C:  DATA 7E,00
027E:  DATA 00,FE
0280:  DATA 00,07
0282:  DATA E0,00
0284:  DATA 3F,00
0286:  DATA 01,F8
0288:  DATA 00,03
028A:  DATA E0,00
028C:  DATA 1F,80
028E:  DATA 03,F0
0290:  DATA 00,01
0292:  DATA C0,00
0294:  DATA 0F,C0
0296:  DATA 03,E0
0298:  DATA 00,01
029A:  DATA C0,00
029C:  DATA 07,E0
029E:  DATA 07,C0
02A0:  DATA 00,03
02A2:  DATA C0,00
02A4:  DATA 03,F0
02A6:  DATA 0F,C0
02A8:  DATA 00,17
02AA:  DATA F4,00
02AC:  DATA 01,F0
02AE:  DATA 0F,80
02B0:  DATA 00,1D
02B2:  DATA 98,00
02B4:  DATA 00,F8
02B6:  DATA 1F,00
02B8:  DATA 00,11
02BA:  DATA 8C,00
02BC:  DATA 00,F8
02BE:  DATA 1F,01
02C0:  DATA 00,31
02C2:  DATA 84,00
02C4:  DATA 80,7C
02C6:  DATA 3E,06
02C8:  DATA 00,31
02CA:  DATA 86,00
02CC:  DATA 20,7C
02CE:  DATA 3E,18
02D0:  DATA 00,71
02D2:  DATA 86,00
02D4:  DATA 1C,3E
02D6:  DATA 3C,43
02D8:  DATA 00,31
02DA:  DATA 84,00
02DC:  DATA C3,3E
02DE:  DATA 7C,0C
02E0:  DATA 00,11
02E2:  DATA 8C,00
02E4:  DATA 38,1E
02E6:  DATA 7C,31
02E8:  DATA 00,1D
02EA:  DATA 98,00
02EC:  DATA 86,1F
02EE:  DATA 78,C6
02F0:  DATA 00,1F
02F2:  DATA FC,00
02F4:  DATA 63,1F
02F6:  DATA 78,18
02F8:  DATA 00,03
02FA:  DATA C0,00
02FC:  DATA 0C,1F
02FE:  DATA F8,63
0300:  DATA 80,01
0302:  DATA 80,00
0304:  DATA C7,0F
0306:  DATA F9,8E
0308:  DATA 00,00
030A:  DATA 00,00
030C:  DATA 38,8F
030E:  DATA F8,38
0310:  DATA 80,00
0312:  DATA 00,01
0314:  DATA 0C,0F
0316:  DATA F8,C3
0318:  DATA 80,00
031A:  DATA 00,00
031C:  DATA E3,8F
031E:  DATA F9,8E
0320:  DATA 00,00
0322:  DATA 00,00
0324:  DATA 30,CF
0326:  DATA F8,38
0328:  DATA F8,00
032A:  DATA 00,1F
032C:  DATA 9E,0F
032E:  DATA F8,E3
0330:  DATA FE,00
0332:  DATA 00,7F
0334:  DATA E3,8F
0336:  DATA F9,9F
0338:  DATA FF,C0
033A:  DATA 03,FF
033C:  DATA F9,CF
033E:  DATA 78,FF
0340:  DATA FF,E0
0342:  DATA 07,FF
0344:  DATA FF,0F
0346:  DATA 78,1F
0348:  DATA FF,E0
034A:  DATA 07,FF
034C:  DATA FC,1F
034E:  DATA 7C,07
0350:  DATA FF,E0
0352:  DATA 07,FF
0354:  DATA E0,1F
0356:  DATA 7C,00
0358:  DATA FF,E0
035A:  DATA 07,FF
035C:  DATA 80,1E
035E:  DATA 7C,00
0360:  DATA 1F,E0
0362:  DATA 07,FC
0364:  DATA 00,3E
0366:  DATA 3E,01
0368:  DATA CF,E0
036A:  DATA 07,F3
036C:  DATA 80,3E
036E:  DATA 3E,01
0370:  DATA FF,E0
0372:  DATA 03,FF
0374:  DATA 80,7C
0376:  DATA 1F,01
0378:  DATA FF,E0
037A:  DATA 03,FF
037C:  DATA C0,7C
037E:  DATA 1F,01
0380:  DATA FF,C0
0382:  DATA 03,FF
0384:  DATA C0,F8
0386:  DATA 0F,83
0388:  DATA FF,C0
038A:  DATA 01,FF
038C:  DATA C0,F8
038E:  DATA 0F,83
0390:  DATA FF,C0
0392:  DATA 01,FF
0394:  DATA C1,F0
0396:  DATA 07,C3
0398:  DATA FF,80
039A:  DATA 01,FF
039C:  DATA E3,F0
039E:  DATA 03,E3
03A0:  DATA FF,80
03A2:  DATA 01,FF
03A4:  DATA E7,E0
03A6:  DATA 03,F7
03A8:  DATA FF,80
03AA:  DATA 00,FF
03AC:  DATA EF,C0
03AE:  DATA 01,FF
03B0:  DATA FF,80
03B2:  DATA 00,FF
03B4:  DATA FF,80
03B6:  DATA 00,FF
03B8:  DATA FF,00
03BA:  DATA 00,FF
03BC:  DATA FF,80
03BE:  DATA 00,7F
03C0:  DATA FF,00
03C2:  DATA 00,FF
03C4:  DATA FF,00
03C6:  DATA 00,3F
03C8:  DATA FF,00
03CA:  DATA 00,FF
03CC:  DATA FE,00
03CE:  DATA 00,1F
03D0:  DATA FF,00
03D2:  DATA 00,7F
03D4:  DATA F8,00
03D6:  DATA 00,0F
03D8:  DATA FE,00
03DA:  DATA 00,7F
03DC:  DATA F0,00
03DE:  DATA 00,03
03E0:  DATA FF,00
03E2:  DATA 00,7F
03E4:  DATA E0,00
03E6:  DATA 00,00
03E8:  DATA FF,FC
03EA:  DATA 1F,FF
03EC:  DATA 80,00
03EE:  DATA 00,00
03F0:  DATA 7F,FF
03F2:  DATA FF,FE
03F4:  DATA 00,00
03F6:  DATA 00,00
03F8:  DATA 0F,FF
03FA:  DATA FF,F8
03FC:  DATA 00,00
03FE:  DATA 00,00
0400:  DATA 01,FF
0402:  DATA FF,C0
0404:  DATA 00,00
0406:  DATA 00,00
0408:  DATA 00,0F
040A:  DATA F0,00
040C:  DATA 00,00
040E:  DATA 53,50
0410:  DATA 4B,54
0412:  DATA 00,00
*
0794:  MOVLB  4
0796:  MOVF   x82,W
0798:  MULWF  x84
079A:  MOVFF  FF3,01
079E:  MOVFF  FF4,00
07A2:  MULWF  x85
07A4:  MOVF   FF3,W
07A6:  ADDWF  00,F
07A8:  MOVF   x83,W
07AA:  MULWF  x84
07AC:  MOVF   FF3,W
07AE:  ADDWFC 00,W
07B0:  MOVWF  02
07B2:  MOVLB  0
07B4:  RETURN 0
*
11B6:  CLRF   00
11B8:  CLRF   01
11BA:  MOVLB  4
11BC:  MOVF   x3D,W
11BE:  BCF    FD8.0
11C0:  BTFSC  x3E.0
11C2:  ADDWF  00,F
11C4:  RRCF   00,F
11C6:  RRCF   01,F
11C8:  BTFSC  x3E.1
11CA:  ADDWF  00,F
11CC:  RRCF   00,F
11CE:  RRCF   01,F
11D0:  BTFSC  x3E.2
11D2:  ADDWF  00,F
11D4:  RRCF   00,F
11D6:  RRCF   01,F
11D8:  BTFSC  x3E.3
11DA:  ADDWF  00,F
11DC:  RRCF   00,F
11DE:  RRCF   01,F
11E0:  BTFSC  x3E.4
11E2:  ADDWF  00,F
11E4:  RRCF   00,F
11E6:  RRCF   01,F
11E8:  BTFSC  x3E.5
11EA:  ADDWF  00,F
11EC:  RRCF   00,F
11EE:  RRCF   01,F
11F0:  BTFSC  x3E.6
11F2:  ADDWF  00,F
11F4:  RRCF   00,F
11F6:  RRCF   01,F
11F8:  BTFSC  x3E.7
11FA:  ADDWF  00,F
11FC:  RRCF   00,F
11FE:  RRCF   01,F
1200:  MOVLB  0
1202:  RETURN 0
*
1544:  MOVLB  4
1546:  MOVF   x6B,W
1548:  XORWF  x6D,W
154A:  ANDLW  80
154C:  MOVWF  x6F
154E:  BTFSS  x6B.7
1550:  BRA    155C
1552:  COMF   x6A,F
1554:  COMF   x6B,F
1556:  INCF   x6A,F
1558:  BTFSC  FD8.2
155A:  INCF   x6B,F
155C:  BTFSS  x6D.7
155E:  BRA    156A
1560:  COMF   x6C,F
1562:  COMF   x6D,F
1564:  INCF   x6C,F
1566:  BTFSC  FD8.2
1568:  INCF   x6D,F
156A:  MOVF   x6A,W
156C:  MULWF  x6C
156E:  MOVFF  FF3,01
1572:  MOVFF  FF4,00
1576:  MULWF  x6D
1578:  MOVF   FF3,W
157A:  ADDWF  00,F
157C:  MOVF   x6B,W
157E:  MULWF  x6C
1580:  MOVF   FF3,W
1582:  ADDWFC 00,W
1584:  MOVWF  02
1586:  BTFSS  x6F.7
1588:  BRA    1594
158A:  COMF   01,F
158C:  COMF   02,F
158E:  INCF   01,F
1590:  BTFSC  FD8.2
1592:  INCF   02,F
1594:  MOVLB  0
1596:  RETURN 0
1598:  MOVLB  4
159A:  MOVF   x6B,W
159C:  XORWF  x6D,W
159E:  ANDLW  80
15A0:  MOVWF  x6F
15A2:  BTFSS  x6B.7
15A4:  BRA    15B0
15A6:  COMF   x6A,F
15A8:  COMF   x6B,F
15AA:  INCF   x6A,F
15AC:  BTFSC  FD8.2
15AE:  INCF   x6B,F
15B0:  BTFSS  x6D.7
15B2:  BRA    15BE
15B4:  COMF   x6C,F
15B6:  COMF   x6D,F
15B8:  INCF   x6C,F
15BA:  BTFSC  FD8.2
15BC:  INCF   x6D,F
15BE:  CLRF   01
15C0:  CLRF   02
15C2:  CLRF   00
15C4:  CLRF   03
15C6:  MOVF   x6D,W
15C8:  BNZ   15CE
15CA:  MOVF   x6C,W
15CC:  BZ    15FE
15CE:  MOVLW  10
15D0:  MOVWF  x6E
15D2:  BCF    FD8.0
15D4:  RLCF   x6A,F
15D6:  RLCF   x6B,F
15D8:  RLCF   00,F
15DA:  RLCF   03,F
15DC:  MOVF   x6D,W
15DE:  SUBWF  03,W
15E0:  BNZ   15E6
15E2:  MOVF   x6C,W
15E4:  SUBWF  00,W
15E6:  BNC   15F6
15E8:  MOVF   x6C,W
15EA:  SUBWF  00,F
15EC:  BTFSS  FD8.0
15EE:  DECF   03,F
15F0:  MOVF   x6D,W
15F2:  SUBWF  03,F
15F4:  BSF    FD8.0
15F6:  RLCF   01,F
15F8:  RLCF   02,F
15FA:  DECFSZ x6E,F
15FC:  BRA    15D2
15FE:  BTFSS  x6F.7
1600:  BRA    160C
1602:  COMF   01,F
1604:  COMF   02,F
1606:  INCF   01,F
1608:  BTFSC  FD8.2
160A:  INCF   02,F
160C:  MOVLB  0
160E:  RETURN 0
*
216E:  TBLRD*+
2170:  MOVF   FF5,F
2172:  BZ    218C
2174:  MOVFF  FF6,430
2178:  MOVFF  FF7,431
217C:  MOVFF  FF5,436
2180:  RCALL  1FBC
2182:  MOVFF  430,FF6
2186:  MOVFF  431,FF7
218A:  BRA    216E
218C:  GOTO   23F0 (RETURN)
2190:  MOVLB  4
2192:  MOVF   x37,W
2194:  CLRF   01
2196:  SUBWF  x36,W
2198:  BC    21A0
219A:  MOVFF  436,00
219E:  BRA    21B8
21A0:  CLRF   00
21A2:  MOVLW  08
21A4:  MOVWF  x38
21A6:  RLCF   x36,F
21A8:  RLCF   00,F
21AA:  MOVF   x37,W
21AC:  SUBWF  00,W
21AE:  BTFSC  FD8.0
21B0:  MOVWF  00
21B2:  RLCF   01,F
21B4:  DECFSZ x38,F
21B6:  BRA    21A6
21B8:  MOVLB  0
21BA:  RETURN 0
21BC:  MOVLW  20
21BE:  MOVLB  4
21C0:  BTFSS  x31.4
21C2:  MOVLW  30
21C4:  MOVWF  x32
21C6:  MOVFF  430,00
21CA:  BTFSS  x30.7
21CC:  BRA    21DE
21CE:  COMF   00,F
21D0:  INCF   00,F
21D2:  MOVFF  00,430
21D6:  MOVLW  2D
21D8:  MOVWF  x32
21DA:  BSF    x31.7
21DC:  BSF    x31.0
21DE:  MOVF   01,W
21E0:  MOVFF  430,436
21E4:  MOVLW  64
21E6:  MOVWF  x37
21E8:  MOVLB  0
21EA:  RCALL  2190
21EC:  MOVFF  00,430
21F0:  MOVLW  30
21F2:  ADDWF  01,W
21F4:  MOVLB  4
21F6:  MOVWF  x33
21F8:  MOVFF  430,436
21FC:  MOVLW  0A
21FE:  MOVWF  x37
2200:  MOVLB  0
2202:  RCALL  2190
2204:  MOVLW  30
2206:  ADDWF  00,W
2208:  MOVLB  4
220A:  MOVWF  x35
220C:  MOVLW  30
220E:  ADDWF  01,W
2210:  MOVWF  x34
2212:  MOVFF  432,00
2216:  MOVLW  30
2218:  SUBWF  x33,W
221A:  BZ    2224
221C:  BSF    x31.1
221E:  BTFSC  x31.7
2220:  BSF    x31.2
2222:  BRA    2248
2224:  BTFSC  x31.2
2226:  BRA    2248
2228:  MOVFF  432,433
222C:  BTFSC  x31.1
222E:  BRA    2238
2230:  MOVLW  30
2232:  SUBWF  x34,W
2234:  BZ    223E
2236:  BSF    x31.0
2238:  BTFSC  x31.7
223A:  BSF    x31.1
223C:  BRA    2248
223E:  BTFSS  FD8.2
2240:  BSF    x31.0
2242:  BTFSC  FD8.2
2244:  MOVFF  433,434
2248:  BTFSC  x31.2
224A:  BRA    2256
224C:  BTFSC  x31.1
224E:  BRA    225E
2250:  BTFSC  x31.0
2252:  BRA    2266
2254:  BRA    226E
2256:  MOVFF  432,436
225A:  MOVLB  0
225C:  RCALL  1FBC
225E:  MOVFF  433,436
2262:  MOVLB  0
2264:  RCALL  1FBC
2266:  MOVFF  434,436
226A:  MOVLB  0
226C:  RCALL  1FBC
226E:  MOVFF  435,436
2272:  MOVLB  0
2274:  RCALL  1FBC
2276:  GOTO   241E (RETURN)
....................  
.................... #list 
....................  
.................... #device      adc=10 
.................... #fuses       nowdt,put,hs,noprotect,nolvp,cpudiv1 
.................... #use         delay(clock=20000000) 
*
04F6:  MOVLW  04
04F8:  MOVWF  FEA
04FA:  MOVLW  32
04FC:  MOVWF  FE9
04FE:  MOVF   FEF,W
0500:  BZ    051C
0502:  MOVLW  06
0504:  MOVWF  01
0506:  CLRF   00
0508:  DECFSZ 00,F
050A:  BRA    0508
050C:  DECFSZ 01,F
050E:  BRA    0506
0510:  MOVLW  7B
0512:  MOVWF  00
0514:  DECFSZ 00,F
0516:  BRA    0514
0518:  DECFSZ FEF,F
051A:  BRA    0502
051C:  RETURN 0
.................... #use         rs232(baud=9600, xmit=pin_c6,rcv=pin_c7) 
.................... #include     <math.h> 
.................... //////////////////////////////////////////////////////////////////////////// 
.................... ////        (C) Copyright 1996,2011 Custom Computer Services            //// 
.................... //// This source code may only be used by licensed users of the CCS C   //// 
.................... //// compiler.  This source code may only be distributed to other       //// 
.................... //// licensed users of the CCS C compiler.  No other use, reproduction  //// 
.................... //// or distribution is permitted without written permission.           //// 
.................... //// Derivative programs created using this software in object code     //// 
.................... //// form are not restricted in any way.                                //// 
.................... //////////////////////////////////////////////////////////////////////////// 
.................... ////                                                                    //// 
.................... //// History:                                                           //// 
.................... ////  * 9/20/2001 :  Improvments are made to sin/cos code.              //// 
.................... ////                 The code now is small, much faster,                //// 
.................... ////                 and more accurate.                                 //// 
.................... ////  * 2/21/2007 :  Compiler handles & operator differently and does   //// 
.................... ////                 not return generic (int8 *) so type cast is done   //// 
.................... ////  * 6/19/2010 :  Divisions by constants converted to multiplication //// 
.................... ////                 by its inverse to improve computation speed        //// 
.................... ////  * 1/21/2011 :  Constants used for double precision math updated   //// 
.................... ////                 Updated routines include 64 bit versions of cos,   //// 
.................... ////                 asin,atan,exp,log and dependant functions          //// 
.................... ////  * 1/31/2011 :  Optimized current 32-bit float routines for cos    //// 
.................... ////                 and log function                                   //// 
.................... ////  * 6/13/2011 :  Fixed PCD overload CEIL_FLOOR functions for values //// 
.................... ////                 greater then 10000000 and less then -10000000      //// 
.................... ////                                                                    //// 
.................... //////////////////////////////////////////////////////////////////////////// 
....................  
.................... #ifndef MATH_H 
.................... #define MATH_H 
....................  
.................... #ifdef PI 
.................... #undef  PI 
.................... #endif 
.................... #define PI     3.1415926535897932 
....................  
....................  
.................... #define SQRT2  1.4142135623730950 
....................  
.................... //float const ps[4] = {5.9304945, 21.125224, 8.9403076, 0.29730279}; 
.................... //float const qs[4] = {1.0000000, 15.035723, 17.764134, 2.4934718}; 
....................  
.................... ///////////////////////////// Round Functions ////////////////////////////// 
....................  
.................... float32 CEIL_FLOOR(float32 x, unsigned int8 n) 
.................... { 
....................    float32 y, res; 
....................    unsigned int16 l; 
....................    int1 s; 
....................  
....................    s = 0; 
....................    y = x; 
....................  
....................    if (x < 0) 
....................    { 
....................       s = 1; 
....................       y = -y; 
....................    } 
....................  
....................    if (y <= 32768.0) 
....................       res = (float32)(unsigned int16)y; 
....................  
....................  else if (y < 10000000.0) 
....................    {  
....................       l = (unsigned int16)(y*0.000030517578125); 
....................       y = 32768.0*(y*0.000030517578125 - (float32)l); 
....................       res = 32768.0*(float32)l; 
....................       res += (float32)(unsigned int16)y; 
....................    } 
....................  
....................  else 
....................   res = y; 
....................  
....................  y = y - (float32)(unsigned int16)y; 
....................  
....................  if (s) 
....................   res = -res; 
....................  
....................  if (y != 0) 
....................  { 
....................   if (s == 1 && n == 0) 
....................    res -= 1.0; 
....................  
....................   if (s == 0 && n == 1) 
....................    res += 1.0; 
....................  } 
....................  if (x == 0) 
....................     res = 0; 
....................  
....................  return (res); 
.................... } 
....................  
.................... // Overloaded Functions to take care for new Data types in PCD 
.................... // Overloaded function CEIL_FLOOR() for data type - Float48 
.................... #if defined(__PCD__) 
.................... float48 CEIL_FLOOR(float48 x, unsigned int8 n) 
.................... { 
....................    float48 y, res; 
....................    unsigned int32 l; 
....................    int1 s; 
....................  
....................    s = 0; 
....................    y = x; 
....................  
....................    if (x < 0) 
....................    { 
....................       s = 1; 
....................       y = -y; 
....................    } 
....................  
....................    if (y <= 32768.0) 
....................       res = (float48)(unsigned int16)y; 
....................  
....................    else if (y < 549755813888.0) 
....................    { 
....................       l = (unsigned int32)(y*0.000030517578125); 
....................       y = 32768.0*(y*0.000030517578125 - (float48)l); 
....................       res = 32768.0*(float48)l; 
....................       res += (float48)(unsigned int16)y; 
....................    } 
....................    else 
....................    {   
....................       res = y; 
....................       y = 0.0; 
....................    } 
....................     
....................    if(y != 0) 
....................       y = y - (float48)(unsigned int16)y; 
....................  
....................    if (s) 
....................       res = -res; 
....................  
....................    if (y != 0) 
....................    { 
....................       if (s == 1 && n == 0) 
....................          res -= 1.0; 
....................  
....................       if (s == 0 && n == 1) 
....................          res += 1.0; 
....................    } 
....................    if (x == 0) 
....................       res = 0; 
....................  
....................    return (res); 
.................... } 
....................  
....................  
.................... // Overloaded function CEIL_FLOOR() for data type - Float64 
.................... float64 CEIL_FLOOR(float64 x, unsigned int8 n) 
.................... { 
....................    float64 y, res; 
....................    int64 l; 
....................    int1 s; 
....................  
....................    s = 0; 
....................    y = x; 
....................  
....................    if (x < 0) 
....................    { 
....................       s = 1; 
....................       y = -y; 
....................    } 
....................  
....................    if (y <= 32768.0) 
....................       res = (float64)(unsigned int16)y; 
....................    else if (y < 4503599627370496.0) 
....................    { 
....................       l = (int64)(y*0.000030517578125); 
....................       y = 32768.0*(y*0.000030517578125 - (float64)l); 
....................       res = 32768.0*(float64)l; 
....................       res += (float64)(unsigned int16)y; 
....................    } 
....................    else 
....................    { 
....................       res = y; 
....................       y = 0.0; 
....................    } 
....................     
....................    if(y != 0) 
....................       y = y - (float64)(unsigned int16)y; 
....................  
....................    if (s) 
....................       res = -res; 
....................  
....................    if (y != 0) 
....................    { 
....................       if (s == 1 && n == 0) 
....................          res -= 1.0; 
....................  
....................       if (s == 0 && n == 1) 
....................          res += 1.0; 
....................    } 
....................     
....................    if (x == 0) 
....................       res = 0; 
....................  
....................    return (res); 
.................... } 
.................... #endif 
....................  
.................... //////////////////////////////////////////////////////////////////////////// 
.................... //   float floor(float x) 
.................... //////////////////////////////////////////////////////////////////////////// 
.................... // Description : rounds down the number x. 
.................... // Date : N/A 
.................... // 
.................... float32 floor(float32 x) 
.................... { 
....................    return CEIL_FLOOR(x,0); 
.................... } 
.................... // Following 2 functions are overloaded functions of floor() for PCD 
.................... // Overloaded function floor() for data type - Float48 
.................... #if defined(__PCD__) 
.................... float48 floor(float48 x) 
.................... { 
....................    return CEIL_FLOOR(x, 0); 
.................... } 
....................  
.................... // Overloaded function floor() for data type - Float64 
.................... float64 floor(float64 x) 
.................... { 
....................    return CEIL_FLOOR(x, 0); 
.................... } 
.................... #endif 
....................  
....................  
.................... //////////////////////////////////////////////////////////////////////////// 
.................... //   float ceil(float x) 
.................... //////////////////////////////////////////////////////////////////////////// 
.................... // Description : rounds up the number x. 
.................... // Date : N/A 
.................... // 
.................... float32 ceil(float32 x) 
.................... { 
....................    return CEIL_FLOOR(x, 1); 
.................... } 
.................... // Following 2 functions are overloaded functions of ceil() for PCD 
.................... // Overloaded function ceil() for data type - Float48 
.................... #if defined(__PCD__) 
.................... float48 ceil(float48 x) 
.................... { 
....................    return CEIL_FLOOR(x, 1); 
.................... } 
....................  
.................... // Overloaded function ceil() for data type - Float64 
.................... float64 ceil(float64 x) 
.................... { 
....................    return CEIL_FLOOR(x, 1); 
.................... } 
.................... #endif 
....................  
....................  //////////////////////////////////////////////////////////////////////////// 
.................... //   float fabs(float x) 
.................... //////////////////////////////////////////////////////////////////////////// 
.................... // Description : Computes the absolute value of floating point number x 
.................... // Returns : returns the absolute value of x 
.................... // Date : N/A 
.................... // 
.................... #define fabs abs 
....................  
.................... //////////////////////////////////////////////////////////////////////////// 
.................... //   float fmod(float x) 
.................... //////////////////////////////////////////////////////////////////////////// 
.................... // Description : Computes the floating point remainder of x/y 
.................... // Returns : returns the value of x= i*y, for some integer i such that, if y 
.................... // is non zero, the result has the same isgn of x na dmagnitude less than the 
.................... // magnitude of y. If y is zero then a domain error occurs. 
.................... // Date : N/A 
.................... // 
....................  
.................... float fmod(float32 x,float32 y) 
.................... { 
....................    float32 i; 
....................    if (y!=0.0) 
....................    { 
....................       i=(x/y < 0.0)? ceil(x/y): floor(x/y); 
....................       return(x-(i*y)); 
....................    } 
....................    else 
....................    { 
....................    #ifdef _ERRNO 
....................    { 
....................       errno=EDOM; 
....................    } 
....................    #endif 
....................    } 
.................... } 
.................... //Overloaded function for fmod() for PCD 
.................... // Overloaded function fmod() for data type - Float48 
.................... #if defined(__PCD__) 
.................... float48 fmod(float48 x,float48 y) 
.................... { 
....................    float48 i; 
....................    if (y!=0.0) 
....................    { 
....................       i=(x/y < 0.0)? ceil(x/y): floor(x/y); 
....................       return(x-(i*y)); 
....................    } 
....................    else 
....................    { 
....................    #ifdef _ERRNO 
....................    { 
....................       errno=EDOM; 
....................    } 
....................    #endif 
....................    } 
.................... } 
.................... // Overloaded function fmod() for data type - Float64 
.................... float64 fmod(float64 x,float64 y) 
.................... { 
....................    float64 i; 
....................    if (y!=0.0) 
....................    { 
....................       i=(x/y < 0.0)? ceil(x/y): floor(x/y); 
....................       return(x-(i*y)); 
....................    } 
....................    else 
....................    { 
....................    #ifdef _ERRNO 
....................    { 
....................       errno=EDOM; 
....................    } 
....................    #endif 
....................    } 
.................... } 
.................... #endif 
.................... //////////////////// Exponential and logarithmic functions //////////////////// 
.................... //////////////////////////////////////////////////////////////////////////// 
.................... //   float exp(float x) 
.................... //////////////////////////////////////////////////////////////////////////// 
.................... // Description : returns the value (e^x) 
.................... // Date : N/A 
.................... // 
.................... #define LN2 0.6931471805599453 
.................... #define LN2_INV 1.4426950408889634073 
....................  
.................... float const pe[6] = {0.000207455774, 0.00127100575, 0.00965065093, 
....................                      0.0554965651,  0.240227138,  0.693147172}; 
....................  
....................  
.................... float32 exp(float32 x) 
.................... { 
....................    float32 y, res, r; 
....................    #if defined(__PCD__) 
....................    int8 data1; 
....................    #endif 
....................    signed int8 n; 
....................    int1 s; 
....................    #ifdef _ERRNO 
....................    if(x > 88.722838) 
....................    { 
....................       errno=ERANGE; 
....................       return(0); 
....................    } 
....................    #endif 
....................    n = (signed int16)(x*LN2_INV); 
....................    s = 0; 
....................    y = x; 
....................  
....................    if (x < 0) 
....................    { 
....................       s = 1; 
....................       n = -n; 
....................       y = -y; 
....................    } 
....................  
....................    res = 0.0; 
.................... #if !defined(__PCD__) 
....................    *((unsigned int8 *)(&res)) = n + 0x7F; 
.................... #endif 
....................  
.................... #if defined(__PCD__)  // Takes care of IEEE format for PCD 
....................    data1 = n+0x7F; 
....................    if(bit_test(data1,0)) 
....................    bit_set(*(((unsigned int8 *)(&res)+2)),7); 
....................    rotate_right(&data1,1); 
....................    bit_clear(data1,7); 
....................    *(((unsigned int8 *)(&res)+3)) = data1; 
.................... #endif 
....................  
....................    y = y*LN2_INV - (float32)n; 
....................  
....................    r = pe[0]*y + pe[1]; 
....................    r = r*y + pe[2]; 
....................    r = r*y + pe[3]; 
....................    r = r*y + pe[4]; 
....................    r = r*y + pe[5]; 
....................  
....................    res = res*(1.0 + y*r); 
....................  
....................    if (s) 
....................       res = 1.0/res; 
....................    return(res); 
.................... } 
....................  
....................  
.................... //Overloaded function for exp() for PCD 
.................... // Overloaded function exp() for data type - Float48 
.................... #if defined(__PCD__) 
.................... float48 exp(float48 x) 
.................... { 
....................    float48 y, res, r; 
....................    int8 data1; 
....................    signed int8 n; 
....................    int1 s; 
....................    #ifdef _ERRNO 
....................    if(x > 88.722838) 
....................    { 
....................       errno=ERANGE; 
....................       return(0); 
....................    } 
....................    #endif 
....................    n = (signed int16)(x*LN2_INV); 
....................    s = 0; 
....................    y = x; 
....................  
....................    if (x < 0) 
....................    { 
....................       s = 1; 
....................       n = -n; 
....................       y = -y; 
....................    } 
....................  
....................    res = 0.0; 
....................  
....................    data1 = n+0x7F; 
....................    if(bit_test(data1,0)) 
....................    bit_set(*(((unsigned int8 *)(&res)+4)),7); 
....................    rotate_right(&data1,1); 
....................    bit_clear(data1,7); 
....................    *(((unsigned int8 *)(&res)+5)) = data1; 
....................  
....................    y = y*LN2_INV - (float48)n; 
....................  
....................    r = pe[0]*y + pe[1]; 
....................    r = r*y + pe[2]; 
....................    r = r*y + pe[3]; 
....................    r = r*y + pe[4]; 
....................    r = r*y + pe[5]; 
....................  
....................    res = res*(1.0 + y*r); 
....................  
....................    if (s) 
....................       res = 1.0/res; 
....................    return(res); 
.................... } 
....................  
.................... // Overloaded function exp() for data type - Float64 
.................... float64 const pe_64[12] ={9.30741400474913e-011,-4.28655416283316e-011, 
....................                           8.71486547014137e-009,9.84458531538385e-008, 
....................                           1.32588296983536e-006,1.52489283823016e-005, 
....................                           0.000154037598423921,0.00133335487036216, 
....................                           0.00961812936407326,0.0555041086222122, 
....................                           0.240226506962827,0.693147180559823}; 
....................  
.................... float64 exp(float64 x) 
.................... { 
....................    float64 y, res, r; 
....................    unsigned int16 data1, data2; 
....................    unsigned int16 *p; 
....................    signed int16 n; 
....................    int1 s; 
....................    #ifdef _ERRNO 
....................    if(x > 709.7827128) 
....................    { 
....................       errno=ERANGE; 
....................       return(0); 
....................    } 
....................    #endif 
....................    y = x*LN2_INV; 
....................    n = (signed int16)y; 
....................    s = 0; 
....................    y = x; 
....................  
....................    if (x < 0) 
....................    { 
....................       s = 1; 
....................       n = -n; 
....................       y = -y; 
....................    } 
....................  
....................    res = 0.0; 
....................  
.................... #if !defined(__PCD__) 
....................    *((unsigned int16 *)(&res)) = n + 0x7F; 
.................... #endif 
....................    p= (((unsigned int16 *)(&res))+3); 
....................    data1 = *p; 
....................    data2 = *p;    
....................    data1 = n + 0x3FF; 
....................    data1 = data1 <<4; 
....................    if(bit_test(data2,15)) 
....................    bit_set(data1,15); 
....................    data2 = data2 & 0x000F; 
....................    data1 ^= data2; 
....................  
....................    *(((unsigned int16 *)(&res)+3)) = data1; 
....................  
....................  
....................    y = y*LN2_INV - (float64)n; 
....................  
....................    r = pe_64[0]*y + pe_64[1]; 
....................    r = r*y + pe_64[2]; 
....................    r = r*y + pe_64[3]; 
....................    r = r*y + pe_64[4]; 
....................    r = r*y + pe_64[5]; 
....................    r = r*y + pe_64[6]; 
....................    r = r*y + pe_64[7]; 
....................    r = r*y + pe_64[8]; 
....................    r = r*y + pe_64[9]; 
....................    r = r*y + pe_64[10]; 
....................    r = r*y + pe_64[11]; 
....................     
....................    res = res*(1.0 + y*r); 
....................  
....................    if (s) 
....................       res = 1.0/res; 
....................    return(res); 
.................... } 
.................... #ENDIF 
....................  
....................  
.................... /************************************************************/ 
....................  
.................... float32 const pl[4] = {-1.080310025160955, 1.999999947089217}; 
.................... float32 const ql[4] = {0.091284365719509, -0.873491916557671}; 
....................  
.................... //////////////////////////////////////////////////////////////////////////// 
.................... //   float log(float x) 
.................... //////////////////////////////////////////////////////////////////////////// 
.................... // Description : returns the the natural log of x 
.................... // Date : N/A 
.................... // 
.................... float32 log(float32 x) 
.................... { 
....................    float32 y, res, r, y2; 
....................    #if defined(__PCD__) 
....................    unsigned int8  data1,data2; 
....................    #endif 
....................    signed int8 n; 
....................    #ifdef _ERRNO 
....................    if(x <0) 
....................    { 
....................       errno=EDOM; 
....................    } 
....................    if(x ==0) 
....................    { 
....................       errno=ERANGE; 
....................       return(0); 
....................    } 
....................    #endif 
....................    y = x; 
....................  
....................    if (y != 1.0) 
....................    { 
.................... #if !defined(__PCD__) 
....................     *((unsigned int8 *)(&y)) = 0x7E;  
.................... #endif 
....................  
.................... #if defined(__PCD__) // Takes care of IEEE format 
....................    data2 = *(((unsigned int8 *)(&y))+3); 
....................    *(((unsigned int8 *)(&y))+3) = 0x3F; 
....................    data1 = *(((unsigned int8 *)(&y))+2); 
....................    bit_clear(data1,7); 
....................    *(((unsigned int8 *)(&y))+2) = data1; 
....................    if(bit_test(data2,7)) 
....................      bit_set(*(((unsigned int8 *)(&y))+3),7); 
.................... #endif 
....................  
....................       y = (y - 1.0)/(y + 1.0); 
....................  
....................       y2=y*y; 
....................  
....................       res = pl[0]*y2 + pl[1]; 
....................  
....................       r = ql[0]*y2 + ql[1]; 
....................       r = r*y2 + 1.0; 
....................  
....................       res = y*res/r; 
.................... #if !defined(__PCD__) 
....................       n = *((unsigned int8 *)(&x)) - 0x7E; 
.................... #endif 
.................... #if defined(__PCD__)  
....................     data1 = *(((unsigned int8 *)(&x)+3)); 
....................     rotate_left(&data1,1); 
....................     data2 = *(((unsigned int8 *)(&x)+2)); 
....................     if(bit_test (data2,7)) 
....................       bit_set(data1,0); 
....................     n = data1 - 0x7E; 
.................... #endif 
....................  
....................       if (n<0)  
....................          r = -(float32)-n; 
....................       else 
....................          r = (float32)n; 
....................  
....................       res += r*LN2; 
....................    } 
....................  
....................    else 
....................       res = 0.0; 
....................  
....................    return(res); 
.................... } 
....................  
.................... //Overloaded function for log() for PCD 
.................... // Overloaded function log() for data type - Float48 
.................... #if defined(__PCD__) 
.................... // Overloaded function log() for data type - float64 
.................... float64 const pl_64[4] = {-0.145694052150681, 1.365485300000370, 
....................                           -3.120535668274329, 2.000000000000000}; 
....................  
.................... float64 const ql_64[4] = {0.006047500465908, -0.208298281937234, 
....................                           1.113943039156721, -1.893601167470470}; 
....................  
.................... float48 log(float48 x) 
.................... { 
....................    float48 y, res, r, y2; 
....................    unsigned int8  data1,data2; 
....................    signed int8 n; 
.................... #ifdef _ERRNO 
....................    if(x <0) 
....................    { 
....................       errno=EDOM; 
....................    } 
....................    if(x ==0) 
....................    { 
....................       errno=ERANGE; 
....................       return(0); 
....................    } 
.................... #endif 
....................    y = x; 
....................  
....................    if (y != 1.0) 
....................    { 
....................  
.................... #if !defined(__PCD__) 
....................       *((unsigned int8 *)(&y)) = 0x7E;  
.................... #endif 
....................       data2 = *(((unsigned int8 *)(&y))+5); 
....................       *(((unsigned int8 *)(&y))+5) = 0x3F; 
....................       data1 = *(((unsigned int8 *)(&y))+4); 
....................       bit_clear(data1,7); 
....................       *(((unsigned int8 *)(&y))+4) = data1; 
....................  
....................       if(bit_test(data2,7)) 
....................       bit_set(*(((unsigned int8 *)(&y))+4),7); 
....................       y = (y - 1.0)/(y + 1.0); 
....................  
....................       y2=y*y; 
....................  
....................       res = pl_64[0]*y2 + pl_64[1]; 
....................       res = res*y2 + pl_64[2]; 
....................       res = res*y2 + pl_64[3]; 
....................  
....................       r = ql_64[0]*y2 + ql_64[1]; 
....................       r = r*y2 + ql_64[2]; 
....................       r = r*y2 + ql_64[3]; 
....................       r = r*y2 + 1.0;  
....................       res = y*res/r; 
....................  
....................       data1 = *(((unsigned int8 *)(&x)+5)); 
....................       rotate_left(&data1,1); 
....................       data2 = *(((unsigned int8 *)(&x)+4)); 
....................       if(bit_test (data2,7)) 
....................       bit_set(data1,0); 
....................        
....................       n = data1 - 0x7E; 
....................  
....................       if (n<0) 
....................       r = -(float48)-n; 
....................       else 
....................       r = (float48)n; 
....................  
....................       res += r*LN2; 
....................    } 
....................  
....................    else 
....................    res = 0.0; 
....................  
....................    return(res); 
.................... } 
....................  
.................... float64 log(float64 x) 
.................... { 
....................    float64 y, res, r, y2; 
....................    unsigned int16  data1,data2; 
....................    unsigned int16 *p; 
....................    signed int16 n; 
....................    #ifdef _ERRNO 
....................    if(x <0) 
....................    { 
....................       errno=EDOM; 
....................    } 
....................    if(x ==0) 
....................    { 
....................       errno=ERANGE; 
....................       return(0); 
....................    } 
....................    #endif 
....................    y = x; 
....................  
....................    if (y != 1.0) 
....................    { 
....................    #if !defined(__PCD__) 
....................        *((unsigned int8 *)(&y)) = 0x7E;  
....................    #endif 
....................       p= (((unsigned int16 *)(&y))+3); 
....................       data1 = *p; 
....................       data2 = *p; 
....................       data1 = 0x3FE; 
....................       data1 = data1 <<4; 
....................       if(bit_test (data2,15)) 
....................          bit_set(data1,15); 
....................       data2 = data2 & 0x000F; 
....................       data1 ^=data2; 
....................  
....................       *p = data1; 
....................  
....................       y = (y - 1.0)/(y + 1.0); 
....................  
....................       y2=y*y; 
....................  
....................       res = pl_64[0]*y2 + pl_64[1]; 
....................       res = res*y2 + pl_64[2]; 
....................       res = res*y2 + pl_64[3]; 
....................  
....................       r = ql_64[0]*y2 + ql_64[1]; 
....................       r = r*y2 + ql_64[2]; 
....................       r = r*y2 + ql_64[3]; 
....................       r = r*y2 + 1.0; 
....................  
....................       res = y*res/r; 
....................   
....................       p= (((unsigned int16 *)(&x))+3); 
....................       data1 = *p; 
....................       bit_clear(data1,15); 
....................       data1 = data1 >>4;     
....................       n = data1 - 0x3FE; 
....................  
....................  
....................       if (n<0) 
....................          r = -(float64)-n; 
....................       else 
....................          r = (float64)n; 
....................  
....................       res += r*LN2; 
....................    } 
....................  
....................    else 
....................       res = 0.0; 
....................  
....................    return(res); 
.................... } 
.................... #endif 
....................  
....................  
.................... #define LN10 2.3025850929940456 
.................... #define LN10_INV 0.4342944819032518276 
....................  
.................... //////////////////////////////////////////////////////////////////////////// 
.................... //   float log10(float x) 
.................... //////////////////////////////////////////////////////////////////////////// 
.................... // Description : returns the the log base 10 of x 
.................... // Date : N/A 
.................... // 
.................... float32 log10(float32 x) 
.................... { 
....................    float32 r; 
....................  
....................    r = log(x); 
....................    r = r*LN10_INV; 
....................    return(r); 
.................... } 
....................  
.................... //Overloaded functions for log10() for PCD 
.................... // Overloaded function log10() for data type - Float48 
.................... #if defined(__PCD__) 
.................... float48 log10(float48 x) 
.................... { 
....................    float48 r; 
....................  
....................    r = log(x); 
....................    r = r*LN10_INV; 
....................    return(r); 
.................... } 
....................  
.................... // Overloaded function log10() for data type - Float64 
.................... float64 log10(float64 x) 
.................... { 
....................    float64 r; 
....................  
....................    r = log(x); 
....................    r = r*LN10_INV; 
....................    return(r); 
.................... } 
.................... #endif 
.................... //////////////////////////////////////////////////////////////////////////// 
.................... //   float modf(float x) 
.................... //////////////////////////////////////////////////////////////////////////// 
.................... // Description :breaks the argument value int integral and fractional parts, 
.................... // ach of which have the same sign as the argument.  It stores the integral part 
.................... // as a float in the object pointed to by the iptr 
.................... // Returns : returns the signed fractional part of value. 
.................... // Date : N/A 
.................... // 
....................  
.................... float32 modf(float32 value,float32 *iptr) 
.................... { 
....................    *iptr=(value < 0.0)? ceil(value): floor(value); 
....................    return(value - *iptr); 
.................... } 
.................... //Overloaded functions for modf() for PCD 
.................... // Overloaded function modf() for data type - Float48 
.................... #if defined(__PCD__) 
.................... float48 modf(float48 value,float48 *iptr) 
.................... { 
....................    *iptr=(value < 0.0)? ceil(value): floor(value); 
....................    return(value - *iptr); 
.................... } 
.................... // Overloaded function modf() for data type - Float64 
.................... float64 modf(float64 value,float64 *iptr) 
.................... { 
....................    *iptr=(value < 0.0)? ceil(value): floor(value); 
....................    return(value - *iptr); 
.................... } 
.................... #endif 
....................  
.................... //////////////////////////////////////////////////////////////////////////// 
.................... //   float pwr(float x,float y) 
.................... //////////////////////////////////////////////////////////////////////////// 
.................... // Description : returns the value (x^y) 
.................... // Date : N/A 
.................... // Note : 0 is returned when the function will generate an imaginary number 
.................... // 
.................... float32 pwr(float32 x,float32 y) 
.................... { 
....................    if(0 > x && fmod(y, 1) == 0) { 
....................       if(fmod(y, 2) == 0) { 
....................          return (exp(log(-x) * y)); 
....................       } else { 
....................          return (-exp(log(-x) * y)); 
....................       } 
....................    } else if(0 > x && fmod(y, 1) != 0) { 
....................       return 0; 
....................    } else { 
....................       if(x != 0 || 0 >= y) { 
....................          return (exp(log(x) * y)); 
....................       } 
....................    } 
.................... } 
.................... //Overloaded functions for pwr() for PCD 
.................... // Overloaded function pwr() for data type - Float48 
.................... #if defined(__PCD__) 
.................... float48 pwr(float48 x,float48 y) 
.................... { 
....................    if(0 > x && fmod(y, 1) == 0) { 
....................       if(fmod(y, 2) == 0) { 
....................          return (exp(log(-x) * y)); 
....................       } else { 
....................          return (-exp(log(-x) * y)); 
....................       } 
....................    } else if(0 > x && fmod(y, 1) != 0) { 
....................       return 0; 
....................    } else { 
....................       if(x != 0 || 0 >= y) { 
....................          return (exp(log(x) * y)); 
....................       } 
....................    } 
.................... } 
.................... // Overloaded function pwr() for data type - Float64 
.................... float64 pwr(float64 x,float64 y) 
.................... { 
....................    if(0 > x && fmod(y, 1) == 0) { 
....................       if(fmod(y, 2) == 0) { 
....................          return (exp(log(-x) * y)); 
....................       } else { 
....................          return (-exp(log(-x) * y)); 
....................       } 
....................    } else if(0 > x && fmod(y, 1) != 0) { 
....................       return 0; 
....................    } else { 
....................       if(x != 0 || 0 >= y) { 
....................          return (exp(log(x) * y)); 
....................       } 
....................    } 
.................... } 
.................... #endif 
....................  
.................... //////////////////// Power functions //////////////////// 
....................  
.................... //////////////////////////////////////////////////////////////////////////// 
.................... //   float pow(float x,float y) 
.................... //////////////////////////////////////////////////////////////////////////// 
.................... // Description : returns the value (x^y) 
.................... // Date : N/A 
.................... // Note : 0 is returned when the function will generate an imaginary number 
.................... // 
.................... float32 pow(float32 x,float32 y) 
.................... { 
....................    if(0 > x && fmod(y, 1) == 0) { 
....................       if(fmod(y, 2) == 0) { 
....................          return (exp(log(-x) * y)); 
....................       } else { 
....................          return (-exp(log(-x) * y)); 
....................       } 
....................    } else if(0 > x && fmod(y, 1) != 0) { 
....................       return 0; 
....................    } else { 
....................       if(x != 0 || 0 >= y) { 
....................          return (exp(log(x) * y)); 
....................       } 
....................    } 
.................... } 
.................... //Overloaded functions for pow() for PCD 
.................... // Overloaded function for pow() data type - Float48 
.................... #if defined(__PCD__) 
.................... float48 pow(float48 x,float48 y) 
.................... { 
....................    if(0 > x && fmod(y, 1) == 0) { 
....................       if(fmod(y, 2) == 0) { 
....................          return (exp(log(-x) * y)); 
....................       } else { 
....................          return (-exp(log(-x) * y)); 
....................       } 
....................    } else if(0 > x && fmod(y, 1) != 0) { 
....................       return 0; 
....................    } else { 
....................       if(x != 0 || 0 >= y) { 
....................          return (exp(log(x) * y)); 
....................       } 
....................    } 
.................... } 
....................  
.................... // Overloaded function pow() for data type - Float64 
.................... float64 pow(float64 x,float64 y) 
.................... { 
....................    if(0 > x && fmod(y, 1) == 0) { 
....................       if(fmod(y, 2) == 0) { 
....................          return (exp(log(-x) * y)); 
....................       } else { 
....................          return (-exp(log(-x) * y)); 
....................       } 
....................    } else if(0 > x && fmod(y, 1) != 0) { 
....................       return 0; 
....................    } else { 
....................       if(x != 0 || 0 >= y) { 
....................          return (exp(log(x) * y)); 
....................       } 
....................    } 
.................... } 
.................... #endif 
....................  
.................... //////////////////////////////////////////////////////////////////////////// 
.................... //   float sqrt(float x) 
.................... //////////////////////////////////////////////////////////////////////////// 
.................... // Description : returns the square root of x 
.................... // Date : N/A 
.................... // 
.................... float32 sqrt(float32 x) 
.................... { 
....................    float32 y, res; 
....................    #if defined(__PCD__) 
....................    unsigned int16 data1,data2; 
....................    #endif 
....................    unsigned int8 *p; 
....................  
....................    #ifdef _ERRNO 
....................    if(x < 0) 
....................    { 
....................       errno=EDOM; 
....................    } 
....................    #endif 
....................  
....................    if( x<=0.0) 
....................       return(0.0); 
....................  
....................    y=x; 
....................     
....................    #if !defined(__PCD__) 
....................     p=&y; 
....................    (*p)=(unsigned int8)((((unsigned int16)(*p)) + 127) >> 1); 
....................    #endif 
....................     
....................    #if defined(__PCD__) 
....................     p = (((unsigned int8 *)(&y))+3); 
....................     data1 = *(((unsigned int8 *)(&y))+3); 
....................     data2 = *(((unsigned int8 *)(&y))+2); 
....................     rotate_left(&data1,1);     
....................     if(bit_test(data2,7))     
....................        bit_set(data1,0);     
....................     data1 = ((data1+127) >>1); 
....................     bit_clear(data2,7); 
....................     if(bit_test(data1,0)) 
....................        bit_set(data2,7); 
....................     data1 = data1 >>1; 
....................     *(((unsigned int8 *)(&y))+3) = data1; 
....................     *(((unsigned int8 *)(&y))+2) = data2; 
....................      
....................   #endif 
....................  
....................    do { 
....................       res=y; 
....................       y+=(x/y); 
....................  
....................       #if !defined(__PCD__) 
....................      (*p)--; 
....................    #endif 
....................     
....................    #if defined(__PCD__) 
....................     data1 = *(((unsigned int8 *)(&y))+3); 
....................     data2 = *(((unsigned int8 *)(&y))+2); 
....................     rotate_left(&data1,1); 
....................     if(bit_test(data2,7)) 
....................        bit_set(data1,0);     
....................     data1--; 
....................     bit_clear(data2,7); 
....................     if(bit_test(data1,0)) 
....................        bit_set(data2,7); 
....................     data1 = data1 >>1; 
....................     *(((unsigned int8 *)(&y))+3) = data1; 
....................     *(((unsigned int8 *)(&y))+2) = data2; 
....................      
....................   #endif 
....................    } while(res != y); 
....................  
....................    return(res); 
.................... } 
.................... //Overloaded functions for sqrt() for PCD 
.................... // Overloaded function sqrt() for data type - Float48 
.................... #if defined(__PCD__) 
.................... float48 sqrt(float48 x) 
.................... { 
....................    float48 y, res; 
....................    unsigned int16 data1,data2; 
....................    unsigned int8 *p; 
....................  
....................    #ifdef _ERRNO 
....................    if(x < 0) 
....................    { 
....................       errno=EDOM; 
....................    } 
....................    #endif 
....................  
....................    if( x<=0.0) 
....................       return(0.0); 
....................  
....................    y=x; 
....................     
....................    #if !defined(__PCD__) 
....................     p=&y; 
....................    (*p)=(unsigned int8)((((unsigned int16)(*p)) + 127) >> 1); 
....................    #endif 
....................     
....................    #if defined(__PCD__) 
....................     p = (((unsigned int8 *)(&y))+5); 
....................     data1 = *(((unsigned int8 *)(&y))+5); 
....................     data2 = *(((unsigned int8 *)(&y))+4); 
....................     rotate_left(&data1,1); 
....................     if(bit_test(data2,7)) 
....................        bit_set(data1,0);     
....................     data1 = ((data1+127) >>1); 
....................     bit_clear(data2,7); 
....................     if(bit_test(data1,0)) 
....................        bit_set(data2,7); 
....................     data1 = data1 >>1; 
....................     *(((unsigned int8 *)(&y))+5) = data1; 
....................     *(((unsigned int8 *)(&y))+4) = data2; 
....................      
....................   #endif 
....................  
....................    do { 
....................       res=y; 
....................       y+=(x/y); 
....................  
....................       #if !defined(__PCD__) 
....................      (*p)--; 
....................    #endif 
....................     
....................     data1 = *(((unsigned int8 *)(&y))+5); 
....................     data2 = *(((unsigned int8 *)(&y))+4); 
....................     rotate_left(&data1,1); 
....................     if(bit_test(data2,7)) 
....................        bit_set(data1,0);     
....................     data1--; 
....................     bit_clear(data2,7); 
....................     if(bit_test(data1,0)) 
....................        bit_set(data2,7); 
....................     data1 = data1 >>1; 
....................     *(((unsigned int8 *)(&y))+5) = data1; 
....................     *(((unsigned int8 *)(&y))+4) = data2; 
....................      
....................    } while(res != y); 
....................  
....................    return(res); 
.................... } 
....................  
.................... // Overloaded function sqrt() for data type - Float64 
.................... float64 sqrt(float64 x) 
.................... { 
....................    float64 y, res; 
....................    unsigned int16 *p; 
....................    unsigned int16 temp1,temp2; 
....................  
....................    #ifdef _ERRNO 
....................    if(x < 0) 
....................    { 
....................       errno=EDOM; 
....................    } 
....................    #endif 
....................  
....................    if( x<=0.0) 
....................       return(0.0); 
....................  
....................    y=x; 
....................    p= (((unsigned int16 *)(&y))+3); 
....................    temp1 = *p; 
....................    temp2 = *p; 
....................    bit_clear(temp1,15); 
....................    temp1 = (temp1>>4)+1023; 
....................    temp1 = temp1 >> 1; 
....................    temp1 = (temp1<<4) & 0xFFF0; 
....................    if(bit_test(temp2,15)) 
....................       bit_set(temp1,15); 
....................    temp2 = temp2 & 0x000F; 
....................    temp1 ^= temp2; 
....................     
....................    (*p) = temp1; 
....................     
....................    do { 
....................       res=y; 
....................       y+=(x/y); 
....................      temp1 = *p; 
....................      temp2 = *p; 
....................      bit_clear(temp1,15); 
....................      temp1 = (temp1>>4); 
....................      temp1--; 
....................      temp1 = (temp1<<4) & 0xFFF0; 
....................      if(bit_test(temp2,15)) 
....................         bit_set(temp1,15); 
....................      temp2 = temp2 & 0x000F; 
....................      temp1 ^= temp2; 
....................      (*p) = temp1; 
....................  
....................    } while(res != y); 
....................  
....................    return(res); 
.................... } 
.................... #endif 
....................  
.................... ////////////////////////////// Trig Functions ////////////////////////////// 
.................... #ifdef PI_DIV_BY_TWO_INV 
.................... #undef PI_DIV_BY_TWO_INV 
.................... #endif 
.................... #define PI_DIV_BY_TWO_INV 0.63661977236758134 
.................... #ifdef PI_DIV_BY_TWO 
.................... #undef PI_DIV_BY_TWO 
.................... #endif 
.................... #define PI_DIV_BY_TWO   1.5707963267948966 
.................... #ifdef TWOBYPI 
.................... #undef TWOBYPI 
.................... #endif 
.................... #define TWOBYPI          0.6366197723675813 
....................  
.................... //////////////////////////////////////////////////////////////////////////// 
.................... //   float cos(float x) 
.................... //////////////////////////////////////////////////////////////////////////// 
.................... // Description : returns the cosine value of the angle x, which is in radian 
.................... // Date : 9/20/2001 
.................... // 
.................... float32 cos(float32 x) 
.................... { 
....................    float32 y, t, t2 = 1.0; 
....................    unsigned int8 quad, i; 
....................    float32 frac; 
....................    float32 p[5] = {                    //by the series definition for cosine 
....................       -0.49999999456337096,            // sum ( ( (-1)^n * x^2n )/(2n)! ) 
....................        0.04166663896921267, 
....................       -0.00138883894522527, 
....................        0.00002476138231734, 
....................       -0.00000026070414770 
....................       //-0.00000000001147, 
....................       // 0.00000000000005 
....................    }; 
....................  
....................    if (x < 0) x = -x;                  // absolute value of input 
....................  
....................    quad = (unsigned int8)(x * PI_DIV_BY_TWO_INV);    // quadrant 
....................    frac = (x * PI_DIV_BY_TWO_INV) - quad;  // fractional part of input 
....................    quad = quad % 4;                    // quadrant (0 to 3) 
....................  
....................    if (quad == 0 || quad == 2) 
....................       t = frac * PI_DIV_BY_TWO; 
....................    else if (quad == 1) 
....................       t = (1-frac) * PI_DIV_BY_TWO; 
....................    else // should be 3 
....................       t = (frac-1) * PI_DIV_BY_TWO; 
....................  
....................    y = 1.0; 
....................    t = t * t; 
....................    for (i = 0; i <= 4; i++) 
....................    { 
....................       t2 = t2 * t; 
....................       y = y + p[i] * t2; 
....................    } 
....................  
....................    if (quad == 2 || quad == 1) 
....................       y = -y;  // correct sign 
....................  
....................    return (y); 
.................... } 
....................  
....................  
.................... //Overloaded functions for cos() for PCD 
.................... // Overloaded function cos() for data type - Float48 
.................... #if defined(__PCD__) 
.................... float48 cos(float48 x) 
.................... { 
....................    float48 y, t, t2 = 1.0; 
....................    unsigned int8 quad, i; 
....................    float48 frac; 
....................    float48 p[6] = {                    //by the series definition for cosine 
....................       -0.5,                            // sum ( ( (-1)^n * x^2n )/(2n)! ) 
....................        0.04166666666667, 
....................       -0.00138888888889, 
....................        0.00002480158730, 
....................       -0.00000027557319, 
....................        0.00000000208767, 
....................       //-0.00000000001147, 
....................       // 0.00000000000005 
....................    }; 
....................  
....................    if (x < 0) x = -x;                  // absolute value of input 
....................  
....................    quad = (unsigned int8)(x * PI_DIV_BY_TWO_INV);    // quadrant 
....................    frac = (x * PI_DIV_BY_TWO_INV) - quad;  // fractional part of input 
....................    quad = quad % 4;                    // quadrant (0 to 3) 
....................  
....................    if (quad == 0 || quad == 2) 
....................       t = frac * PI_DIV_BY_TWO; 
....................    else if (quad == 1) 
....................       t = (1-frac) * PI_DIV_BY_TWO; 
....................    else // should be 3 
....................       t = (frac-1) * PI_DIV_BY_TWO; 
....................  
....................    y = 0.999999999781; 
....................    t = t * t; 
....................    for (i = 0; i <= 5; i++) 
....................    { 
....................       t2 = t2 * t; 
....................       y = y + p[i] * t2; 
....................    } 
....................  
....................    if (quad == 2 || quad == 1) 
....................       y = -y;  // correct sign 
....................  
....................    return (y); 
.................... } 
....................  
.................... // Overloaded function cos() for data type - Float64 
.................... float64 cos(float64 x) 
.................... { 
....................    float64 y, t, t2 = 1.0; 
....................    unsigned int8 quad, i; 
....................    float64 frac; 
....................    float64 p_64[9] = {               //by the series definition for cosine 
....................      -0.49999999999998740,           // sum ( ( (-1)^n * x^2n )/(2n)! )              
....................       0.04166666666656518, 
....................      -0.00138888888851691, 
....................       0.00002480158658490, 
....................      -0.00000027557239796, 
....................       0.00000000208715031, 
....................      -0.00000000001126577, 
....................       0.00000000000000427, 
....................       0.00000000000000372}; 
....................  
....................    if (x < 0) x = -x;                  // absolute value of input 
....................  
....................    quad = (unsigned int8)(x * PI_DIV_BY_TWO_INV);    // quadrant 
....................    frac = (x * PI_DIV_BY_TWO_INV) - quad;  // fractional part of input 
....................    quad = quad % 4;                    // quadrant (0 to 3) 
....................  
....................    if (quad == 0 || quad == 2) 
....................       t = frac * PI_DIV_BY_TWO; 
....................    else if (quad == 1) 
....................       t = (1-frac) * PI_DIV_BY_TWO; 
....................    else // should be 3 
....................       t = (frac-1) * PI_DIV_BY_TWO; 
....................  
....................    y = 1.0; 
....................    t = t * t; 
....................    for (i = 0; i <= 8; i++) 
....................    { 
....................       t2 = t2 * t; 
....................       y = y + p_64[i] * t2; 
....................    } 
....................  
....................    if (quad == 2 || quad == 1) 
....................       y = -y;  // correct sign 
....................  
....................    return (y); 
.................... } 
....................  
.................... #endif 
....................  
.................... //////////////////////////////////////////////////////////////////////////// 
.................... //   float sin(float x) 
.................... //////////////////////////////////////////////////////////////////////////// 
.................... // Description : returns the sine value of the angle x, which is in radian 
.................... // Date : 9/20/2001 
.................... // 
.................... float32 sin(float32 x) 
.................... { 
....................    return cos(x - PI_DIV_BY_TWO); 
.................... } 
....................  
.................... //Overloaded functions for sin() for PCD 
.................... // Overloaded function sin() for data type - Float48 
.................... #if defined(__PCD__) 
.................... float48 sin(float48 x) 
.................... { 
....................    return cos(x - PI_DIV_BY_TWO); 
.................... } 
....................  
.................... // Overloaded function sin() for data type - Float48 
.................... float64 sin(float64 x) 
.................... { 
....................    return cos(x - PI_DIV_BY_TWO); 
.................... } 
.................... #endif 
....................  
.................... //////////////////////////////////////////////////////////////////////////// 
.................... //   float tan(float x) 
.................... //////////////////////////////////////////////////////////////////////////// 
.................... // Description : returns the tangent value of the angle x, which is in radian 
.................... // Date : 9/20/2001 
.................... // 
.................... float32 tan(float32 x) 
.................... { 
....................    float32 c, s; 
....................  
....................    c = cos(x); 
....................    if (c == 0.0) 
....................       return (1.0e+36); 
....................  
....................    s = sin(x); 
....................    return(s/c); 
.................... } 
.................... //Overloaded functions for tan() for PCD 
.................... // Overloaded function tan() for data type - Float48 
.................... #if defined(__PCD__) 
.................... float48 tan(float48 x) 
.................... { 
....................    float48 c, s; 
....................  
....................    c = cos(x); 
....................    if (c == 0.0) 
....................       return (1.0e+36); 
....................  
....................    s = sin(x); 
....................    return(s/c); 
.................... } 
....................  
.................... // Overloaded function tan() for data type - Float48 
.................... float64 tan(float64 x) 
.................... { 
....................    float64 c, s; 
....................  
....................    c = cos(x); 
....................    if (c == 0.0) 
....................       return (1.0e+36); 
....................  
....................    s = sin(x); 
....................    return(s/c); 
.................... } 
.................... #endif 
....................  
.................... float32 const pas[3] = {0.49559947, -4.6145309, 5.6036290}; 
.................... float32 const qas[3] = {1.0000000,  -5.5484666, 5.6036290}; 
....................  
.................... float32 ASIN_COS(float32 x, unsigned int8 n) 
.................... { 
....................    float32 y, res, r, y2; 
....................    int1 s; 
....................    #ifdef _ERRNO 
....................    if(x <-1 || x > 1) 
....................    { 
....................       errno=EDOM; 
....................    } 
....................    #endif 
....................    s = 0; 
....................    y = x; 
....................  
....................    if (x < 0) 
....................    { 
....................       s = 1; 
....................       y = -y; 
....................    } 
....................  
....................    if (y > 0.5) 
....................    { 
....................       y = sqrt((1.0 - y)*0.5); 
....................       n += 2; 
....................    } 
....................  
....................    y2=y*y; 
....................  
....................    res = pas[0]*y2 + pas[1]; 
....................    res = res*y2 + pas[2]; 
....................  
....................    r = qas[0]*y2 + qas[1]; 
....................    r = r*y2 + qas[2]; 
....................  
....................    res = y*res/r; 
....................  
....................    if (n & 2)     // |x| > 0.5 
....................       res = PI_DIV_BY_TWO - 2.0*res; 
....................    if (s) 
....................       res = -res; 
....................    if (n & 1)           // take arccos 
....................       res = PI_DIV_BY_TWO - res; 
....................  
....................    return(res); 
.................... } 
....................  
....................  
.................... //Overloaded functions for ASIN_COS() for PCD 
.................... // Overloaded function ASIN_COS() for data type - Float48 
.................... #if defined(__PCD__) 
.................... float48 ASIN_COS(float48 x, unsigned int8 n) 
.................... { 
....................    float48 y, res, r, y2; 
....................    int1 s; 
....................    #ifdef _ERRNO 
....................    if(x <-1 || x > 1) 
....................    { 
....................       errno=EDOM; 
....................    } 
....................    #endif 
....................    s = 0; 
....................    y = x; 
....................  
....................    if (x < 0) 
....................    { 
....................       s = 1; 
....................       y = -y; 
....................    } 
....................  
....................    if (y > 0.5) 
....................    { 
....................       y = sqrt((1.0 - y)*0.5); 
....................       n += 2; 
....................    } 
....................  
....................    y2=y*y; 
....................  
....................    res = pas[0]*y2 + pas[1]; 
....................    res = res*y2 + pas[2]; 
....................  
....................    r = qas[0]*y2 + qas[1]; 
....................    r = r*y2 + qas[2]; 
....................  
....................    res = y*res/r; 
....................  
....................    if (n & 2)     // |x| > 0.5 
....................       res = PI_DIV_BY_TWO - 2.0*res; 
....................    if (s) 
....................       res = -res; 
....................    if (n & 1)           // take arccos 
....................       res = PI_DIV_BY_TWO - res; 
....................  
....................    return(res); 
.................... } 
....................  
.................... // Overloaded function ASIN_COS() for data type - Float64 
.................... double pas_64[5]={1.000000000000000,-2.069938587724477,1.421444580548907, 
....................                  -0.360690137621842,0.024929451660228}; 
....................  
.................... double qas_64[5]={-2.236605254391134,1.719212122946451,-0.524122954476133, 
....................                    0.052808872045749,-0.000662536036570}; 
....................                     
.................... float64 ASIN_COS(float64 x, unsigned int8 n) 
.................... { 
....................    float64 y, res, r, y2; 
....................    int1 s; 
....................    #ifdef _ERRNO 
....................    if(x <-1 || x > 1) 
....................    { 
....................       errno=EDOM; 
....................    } 
....................    #endif 
....................    s = 0; 
....................    y = x; 
....................  
....................    if (x < 0) 
....................    { 
....................       s = 1; 
....................       y = -y; 
....................    } 
....................  
....................    if (y > 0.5) 
....................    { 
....................       y = sqrt((1.0 - y)*0.5); 
....................       n += 2; 
....................    } 
....................  
....................    y2=y*y; 
....................  
....................    res = pas_64[4]*y2 + pas_64[3]; 
....................    res = res*y2 + pas_64[2]; 
....................    res = res*y2 + pas_64[1]; 
....................    res = res*y2 + pas_64[0]; 
....................  
....................    r = qas_64[4]*y2 + qas_64[3]; 
....................    r = r*y2 + qas_64[2]; 
....................    r = r*y2 + qas_64[1]; 
....................    r = r*y2 + qas_64[0]; 
....................    r = r*y2 + 1.0; 
....................  
....................    res = y*res/r; 
....................  
....................    if (n & 2)     // |x| > 0.5 
....................       res = PI_DIV_BY_TWO - 2.0*res; 
....................    if (s) 
....................       res = -res; 
....................    if (n & 1)           // take arccos 
....................       res = PI_DIV_BY_TWO - res; 
....................  
....................    return(res); 
.................... } 
.................... #endif 
....................  
.................... //////////////////////////////////////////////////////////////////////////// 
.................... //   float asin(float x) 
.................... //////////////////////////////////////////////////////////////////////////// 
.................... // Description : returns the arcsine value of the value x. 
.................... // Date : N/A 
.................... // 
.................... float32 asin(float32 x) 
.................... { 
....................    float32 r; 
....................  
....................    r = ASIN_COS(x, 0); 
....................    return(r); 
.................... } 
.................... //Overloaded functions for asin() for PCD 
.................... // Overloaded function asin() for data type - Float48 
.................... #if defined(__PCD__) 
.................... float48 asin(float48 x) 
.................... { 
....................    float48 r; 
....................  
....................    r = ASIN_COS(x, 0); 
....................    return(r); 
.................... } 
....................  
.................... // Overloaded function asin() for data type - Float64 
.................... float64 asin(float64 x) 
.................... { 
....................    float64 r; 
....................  
....................    r = ASIN_COS(x, 0); 
....................    return(r); 
.................... } 
.................... #endif 
....................  
.................... //////////////////////////////////////////////////////////////////////////// 
.................... //   float acos(float x) 
.................... //////////////////////////////////////////////////////////////////////////// 
.................... // Description : returns the arccosine value of the value x. 
.................... // Date : N/A 
.................... // 
.................... float32 acos(float32 x) 
.................... { 
....................    float32 r; 
....................  
....................    r = ASIN_COS(x, 1); 
....................    return(r); 
.................... } 
.................... //Overloaded functions for acos() for PCD 
.................... // Overloaded function acos() for data type - Float48 
.................... #if defined(__PCD__) 
.................... float48 acos(float48 x) 
.................... { 
....................    float48 r; 
....................  
....................    r = ASIN_COS(x, 1); 
....................    return(r); 
.................... } 
....................  
.................... // Overloaded function acos() for data type - Float64 
.................... float64 acos(float64 x) 
.................... { 
....................    float64 r; 
....................  
....................    r = ASIN_COS(x, 1); 
....................    return(r); 
.................... } 
.................... #endif 
....................  
.................... float32 const pat[4] = {0.17630401, 5.6710795, 22.376096, 19.818457}; 
.................... float32 const qat[4] = {1.0000000,  11.368190, 28.982246, 19.818457}; 
....................  
.................... //////////////////////////////////////////////////////////////////////////// 
.................... //   float atan(float x) 
.................... //////////////////////////////////////////////////////////////////////////// 
.................... // Description : returns the arctangent value of the value x. 
.................... // Date : N/A 
.................... // 
.................... float32 atan(float32 x) 
.................... { 
....................    float32 y, res, r; 
....................    int1 s, flag; 
....................  
....................    s = 0; 
....................    flag = 0; 
....................    y = x; 
....................  
....................    if (x < 0) 
....................    { 
....................       s = 1; 
....................       y = -y; 
....................    } 
....................  
....................    if (y > 1.0) 
....................    { 
....................       y = 1.0/y; 
....................       flag = 1; 
....................    } 
....................  
....................    res = pat[0]*y*y + pat[1]; 
....................    res = res*y*y + pat[2]; 
....................    res = res*y*y + pat[3]; 
....................  
....................    r = qat[0]*y*y + qat[1]; 
....................    r = r*y*y + qat[2]; 
....................    r = r*y*y + qat[3]; 
....................  
....................    res = y*res/r; 
....................  
....................  
....................    if (flag)                              // for |x| > 1 
....................       res = PI_DIV_BY_TWO - res; 
....................    if (s) 
....................       res = -res; 
....................  
....................    return(res); 
.................... } 
.................... //Overloaded functions for atan() for PCD 
.................... // Overloaded function atan() for data type - Float48 
.................... #if defined(__PCD__) 
.................... float48 atan(float48 x) 
.................... { 
....................    float48 y, res, r; 
....................    int1 s, flag; 
....................  
....................    s = 0; 
....................    flag = 0; 
....................    y = x; 
....................  
....................    if (x < 0) 
....................    { 
....................       s = 1; 
....................       y = -y; 
....................    } 
....................  
....................    if (y > 1.0) 
....................    { 
....................       y = 1.0/y; 
....................       flag = 1; 
....................    } 
....................  
....................    res = pat[0]*y*y + pat[1]; 
....................    res = res*y*y + pat[2]; 
....................    res = res*y*y + pat[3]; 
....................  
....................    r = qat[0]*y*y + qat[1]; 
....................    r = r*y*y + qat[2]; 
....................    r = r*y*y + qat[3]; 
....................  
....................    res = y*res/r; 
....................  
....................  
....................    if (flag)                              // for |x| > 1 
....................       res = PI_DIV_BY_TWO - res; 
....................    if (s) 
....................       res = -res; 
....................  
....................    return(res); 
.................... } 
....................  
.................... float64 pat_64[6]={0.999999999999999,2.249923645595566,1.771541617806449, 
....................                    0.579678874003185,0.072162702162882,0.002281100141660}; 
....................  
.................... float64 qat_64[6]={2.583256978928510,2.432627277466967,1.016760379885393, 
....................                    0.182482977188688,0.011155377971690,0.000100013019160}; 
.................... // Overloaded function atan() for data type - Float64 
.................... float64 atan(float64 x) 
.................... { 
....................    float64 y,y2, res, r; 
....................    int1 s, flag; 
....................  
....................    s = 0; 
....................    flag = 0; 
....................    y = x; 
....................  
....................    if (x < 0) 
....................    { 
....................       s = 1; 
....................       y = -y; 
....................    } 
....................  
....................    if (y > 1.0) 
....................    { 
....................       y = 1.0/y; 
....................       flag = 1; 
....................    } 
....................    y2 = y*y; 
....................    res = pat_64[5]*y2 + pat_64[4]; 
....................    res = res*y2 + pat_64[3]; 
....................    res = res*y2 + pat_64[2]; 
....................    res = res*y2 + pat_64[1]; 
....................    res = res*y2 + pat_64[0]; 
....................  
....................    r = qat_64[5]*y2 + qat_64[4]; 
....................    r = r*y2 + qat_64[3]; 
....................    r = r*y2 + qat_64[2]; 
....................    r = r*y2 + qat_64[1]; 
....................    r = r*y2 + qat_64[0]; 
....................    r = r*y2 + 1.0; 
....................  
....................    res = y*res/r; 
....................  
....................  
....................    if (flag)                              // for |x| > 1 
....................       res = PI_DIV_BY_TWO - res; 
....................    if (s) 
....................       res = -res; 
....................  
....................    return(res); 
.................... } 
.................... #endif 
....................  
.................... ///////////////////////////////////////////////////////////////////////////// 
.................... //   float atan2(float y, float x) 
.................... ///////////////////////////////////////////////////////////////////////////// 
.................... // Description :computes the principal value of arc tangent of y/x, using the 
.................... // signs of both the arguments to determine the quadrant of the return value 
.................... // Returns : returns the arc tangent of y/x. 
.................... // Date : N/A 
.................... // 
....................  
.................... float32 atan2(float32 y,float32 x) 
.................... { 
....................    float32 z; 
....................    int1 sign; 
....................    unsigned int8 quad; 
....................    sign=0; 
....................    quad=0; //quadrant 
....................    quad=((y<=0.0)?((x<=0.0)?3:4):((x<0.0)?2:1)); 
....................    if(y<0.0) 
....................    { 
....................       sign=1; 
....................       y=-y; 
....................    } 
....................    if(x<0.0) 
....................    { 
....................       x=-x; 
....................    } 
....................    if (x==0.0) 
....................    { 
....................       if(y==0.0) 
....................       { 
....................       #ifdef _ERRNO 
....................       { 
....................          errno=EDOM; 
....................       } 
....................       #endif 
....................       } 
....................       else 
....................       { 
....................          if(sign) 
....................          { 
....................          return (-(PI_DIV_BY_TWO)); 
....................          } 
....................          else 
....................          { 
....................          return (PI_DIV_BY_TWO); 
....................          } 
....................       } 
....................    } 
....................    else 
....................    { 
....................       z=y/x; 
....................       switch(quad) 
....................       { 
....................          case 1: 
....................          { 
....................             return atan(z); 
....................             break; 
....................          } 
....................          case 2: 
....................          { 
.................... //            return (atan(z)+PI_DIV_BY_TWO);  //2L3122 
....................             return (PI-atan(z)); 
....................             break; 
....................          } 
....................          case 3: 
....................          { 
....................             return (atan(z)-PI); 
....................             break; 
....................          } 
....................          case 4: 
....................          { 
....................             return (-atan(z)); 
....................             break; 
....................          } 
....................       } 
....................    } 
.................... } 
....................  
.................... //Overloaded functions for atan2() for PCD 
.................... // Overloaded function atan2() for data type - Float48 
.................... #if defined(__PCD__) 
.................... float48 atan2(float48 y,float48 x) 
.................... { 
....................    float48 z; 
....................    int1 sign; 
....................    unsigned int8 quad; 
....................    sign=0; 
....................    quad=0; //quadrant 
....................    quad=((y<=0.0)?((x<=0.0)?3:4):((x<0.0)?2:1)); 
....................    if(y<0.0) 
....................    { 
....................       sign=1; 
....................       y=-y; 
....................    } 
....................    if(x<0.0) 
....................    { 
....................       x=-x; 
....................    } 
....................    if (x==0.0) 
....................    { 
....................       if(y==0.0) 
....................       { 
....................       #ifdef _ERRNO 
....................       { 
....................          errno=EDOM; 
....................       } 
....................       #endif 
....................       } 
....................       else 
....................       { 
....................          if(sign) 
....................          { 
....................          return (-(PI_DIV_BY_TWO)); 
....................          } 
....................          else 
....................          { 
....................          return (PI_DIV_BY_TWO); 
....................          } 
....................       } 
....................    } 
....................    else 
....................    { 
....................       z=y/x; 
....................       switch(quad) 
....................       { 
....................          case 1: 
....................          { 
....................             return atan(z); 
....................             break; 
....................          } 
....................          case 2: 
....................          { 
.................... //            return (atan(z)+PI_DIV_BY_TWO);  //2L3122 
....................             return (PI-atan(z)); 
....................             break; 
....................          } 
....................          case 3: 
....................          { 
....................             return (atan(z)-PI); 
....................             break; 
....................          } 
....................          case 4: 
....................          { 
....................             return (-atan(z)); 
....................             break; 
....................          } 
....................       } 
....................    } 
.................... } 
....................  
.................... // Overloaded function atan2() for data type - Float64 
.................... float64 atan2(float64 y,float64 x) 
.................... { 
....................    float64 z; 
....................    int1 sign; 
....................    unsigned int8 quad; 
....................    sign=0; 
....................    quad=0; //quadrant 
....................    quad=((y<=0.0)?((x<=0.0)?3:4):((x<0.0)?2:1)); 
....................    if(y<0.0) 
....................    { 
....................       sign=1; 
....................       y=-y; 
....................    } 
....................    if(x<0.0) 
....................    { 
....................       x=-x; 
....................    } 
....................    if (x==0.0) 
....................    { 
....................       if(y==0.0) 
....................       { 
....................       #ifdef _ERRNO 
....................       { 
....................          errno=EDOM; 
....................       } 
....................       #endif 
....................       } 
....................       else 
....................       { 
....................          if(sign) 
....................          { 
....................          return (-(PI_DIV_BY_TWO)); 
....................          } 
....................          else 
....................          { 
....................          return (PI_DIV_BY_TWO); 
....................          } 
....................       } 
....................    } 
....................    else 
....................    { 
....................       z=y/x; 
....................       switch(quad) 
....................       { 
....................          case 1: 
....................          { 
....................             return atan(z); 
....................             break; 
....................          } 
....................          case 2: 
....................          { 
.................... //            return (atan(z)+PI_DIV_BY_TWO);  //2L3122 
....................             return (PI-atan(z)); 
....................             break; 
....................          } 
....................          case 3: 
....................          { 
....................             return (atan(z)-PI); 
....................             break; 
....................          } 
....................          case 4: 
....................          { 
....................             return (-atan(z)); 
....................             break; 
....................          } 
....................       } 
....................    } 
.................... } 
.................... #endif 
....................  
.................... //////////////////// Hyperbolic functions //////////////////// 
....................  
.................... //////////////////////////////////////////////////////////////////////////// 
.................... //   float cosh(float x) 
.................... //////////////////////////////////////////////////////////////////////////// 
.................... // Description : Computes the hyperbolic cosine value of x 
.................... // Returns : returns the hyperbolic cosine value of x 
.................... // Date : N/A 
.................... // 
....................  
.................... float32 cosh(float32 x) 
.................... { 
....................    return ((exp(x)+exp(-x))*0.5); 
.................... } 
.................... //Overloaded functions for cosh() for PCD 
.................... // Overloaded function cosh() for data type - Float48 
.................... #if defined(__PCD__) 
.................... float48 cosh(float48 x) 
.................... { 
....................    return ((exp(x)+exp(-x))*0.5); 
.................... } 
....................  
.................... // Overloaded function cosh() for data type - Float64 
.................... float64 cosh(float64 x) 
.................... { 
....................    return ((exp(x)+exp(-x))*0.5); 
.................... } 
.................... #endif 
....................  
.................... //////////////////////////////////////////////////////////////////////////// 
.................... //   float sinh(float x) 
.................... //////////////////////////////////////////////////////////////////////////// 
.................... // Description : Computes the hyperbolic sine value of x 
.................... // Returns : returns the hyperbolic sine value of x 
.................... // Date : N/A 
.................... // 
....................  
.................... float32 sinh(float32 x) 
.................... { 
....................  
....................    return ((exp(x) - exp(-x))*0.5); 
.................... } 
.................... //Overloaded functions for sinh() for PCD 
.................... // Overloaded function sinh() for data type - Float48 
.................... #if defined(__PCD__) 
.................... float48 sinh(float48 x) 
.................... { 
....................  
....................    return ((exp(x) - exp(-x))*0.5); 
.................... } 
....................  
.................... // Overloaded function sinh() for data type - Float48 
.................... float64 sinh(float64 x) 
.................... { 
....................  
....................    return ((exp(x) - exp(-x))*0.5); 
.................... } 
.................... #endif 
....................  
.................... //////////////////////////////////////////////////////////////////////////// 
.................... //   float tanh(float x) 
.................... //////////////////////////////////////////////////////////////////////////// 
.................... // Description : Computes the hyperbolic tangent value of x 
.................... // Returns : returns the hyperbolic tangent value of x 
.................... // Date : N/A 
.................... // 
....................  
.................... float32 tanh(float32 x) 
.................... { 
....................    return(sinh(x)/cosh(x)); 
.................... } 
.................... //Overloaded functions for tanh() for PCD 
.................... // Overloaded function tanh() for data type - Float48 
.................... #if defined(__PCD__) 
.................... float48 tanh(float48 x) 
.................... { 
....................    return(sinh(x)/cosh(x)); 
.................... } 
....................  
.................... // Overloaded function tanh() for data type - Float64 
.................... float64 tanh(float64 x) 
.................... { 
....................    return(sinh(x)/cosh(x)); 
.................... } 
.................... #endif 
....................  
.................... //////////////////////////////////////////////////////////////////////////// 
.................... //   float frexp(float x, signed int *exp) 
.................... //////////////////////////////////////////////////////////////////////////// 
.................... // Description : breaks a floating point number into a normalized fraction and an integral 
.................... // power of 2. It stores the integer in the signed int object pointed to by exp. 
.................... // Returns : returns the value x, such that x is a double with magnitude in the interval 
.................... // [1/2,1) or zero, and value equals x times 2 raised to the power *exp.If value is zero, 
.................... // both parts of the result are zero. 
.................... // Date : N/A 
.................... // 
....................  
.................... #define LOG2 .30102999566398119521 
.................... #define LOG2_INV 3.32192809488736234787 
.................... float32 frexp(float32 x, signed int8 *exp) 
.................... { 
....................    float32 res; 
....................    int1 sign = 0; 
....................    if(x == 0.0) 
....................    { 
....................       *exp=0; 
....................       return (0.0); 
....................    } 
....................    if(x < 0.0) 
....................    { 
....................      x=-x; 
....................      sign=1; 
....................    } 
....................    if (x > 1.0) 
....................    { 
....................       *exp=(ceil(log10(x)*LOG2_INV)); 
....................       res=x/(pow(2, *exp)); 
....................       if (res == 1) 
....................       { 
....................          *exp=*exp+1; 
....................           res=.5; 
....................       } 
....................    } 
....................    else 
....................    { 
....................       if(x < 0.5) 
....................       { 
....................          *exp=-1; 
....................          res=x*2; 
....................       } 
....................       else 
....................       { 
....................          *exp=0; 
....................           res=x; 
....................       } 
....................    } 
....................    if(sign) 
....................    { 
....................       res=-res; 
....................    } 
....................    return res; 
.................... } 
....................  
.................... //Overloaded functions for frexp() for PCD 
.................... // Overloaded function frexp() for data type - Float48 
.................... #if defined(__PCD__) 
.................... float48 frexp(float48 x, signed int8 *exp) 
.................... { 
....................    float48 res; 
....................    int1 sign = 0; 
....................    if(x == 0.0) 
....................    { 
....................       *exp=0; 
....................       return (0.0); 
....................    } 
....................    if(x < 0.0) 
....................    { 
....................      x=-x; 
....................      sign=1; 
....................    } 
....................    if (x > 1.0) 
....................    { 
....................       *exp=(ceil(log10(x)*LOG2_INV)); 
....................       res=x/(pow(2, *exp)); 
....................       if (res == 1) 
....................       { 
....................          *exp=*exp+1; 
....................           res=.5; 
....................       } 
....................    } 
....................    else 
....................    { 
....................       if(x < 0.5) 
....................       { 
....................          *exp=-1; 
....................          res=x*2; 
....................       } 
....................       else 
....................       { 
....................          *exp=0; 
....................           res=x; 
....................       } 
....................    } 
....................    if(sign) 
....................    { 
....................       res=-res; 
....................    } 
....................    return res; 
.................... } 
....................  
.................... // Overloaded function frexp() for data type - Float64 
.................... float64 frexp(float64 x, signed int8 *exp) 
.................... { 
....................    float64 res; 
....................    int1 sign = 0; 
....................    if(x == 0.0) 
....................    { 
....................       *exp=0; 
....................       return (0.0); 
....................    } 
....................    if(x < 0.0) 
....................    { 
....................      x=-x; 
....................      sign=1; 
....................    } 
....................    if (x > 1.0) 
....................    { 
....................       *exp=(ceil(log10(x)*LOG2_INV)); 
....................       res=x/(pow(2, *exp)); 
....................       if (res == 1) 
....................       { 
....................          *exp=*exp+1; 
....................           res=.5; 
....................       } 
....................    } 
....................    else 
....................    { 
....................       if(x < 0.5) 
....................       { 
....................          *exp=-1; 
....................          res=x*2; 
....................       } 
....................       else 
....................       { 
....................          *exp=0; 
....................           res=x; 
....................       } 
....................    } 
....................    if(sign) 
....................    { 
....................       res=-res; 
....................    } 
....................    return res; 
.................... } 
.................... #endif 
....................  
.................... ////////////////////////////////////////////////////////////////////////////// 
.................... //   float ldexp(float x, signed int *exp) 
.................... ////////////////////////////////////////////////////////////////////////////// 
.................... // Description : multiplies a floating point number by an integral power of 2. 
.................... // Returns : returns the value of x times 2 raised to the power exp. 
.................... // Date : N/A 
.................... // 
....................  
.................... float32 ldexp(float32 value, signed int8 exp) 
.................... { 
....................    return (value * pow(2,exp)); 
.................... } 
.................... //Overloaded functions for ldexp() for PCD 
.................... // Overloaded function ldexp() for data type - Float48 
....................  
.................... #if defined(__PCD__) 
.................... float48 ldexp(float48 value, signed int8 exp) 
.................... { 
....................    return (value * pow(2,exp)); 
.................... } 
.................... // Overloaded function ldexp() for data type - Float64 
.................... float64 ldexp(float64 value, signed int8 exp) 
.................... { 
....................    return (value * pow(2,exp)); 
.................... } 
.................... #endif 
....................  
.................... #endif 
....................  
.................... #bit         TIM3IF                 = 0xFA1.1 
.................... #bit         SSDO                   = 0xF84.2 
.................... #bit         SSCK                   = 0xF84.0 
.................... #define      analog_pins            an0_to_an2 
.................... #define      lm35a_channel          0 
.................... #define      lm35b_channel          1 
.................... #define      gp2d12_channel         2 
.................... #define      photoresis_channel     3 
.................... #define      DCMOTOR_IN1            PIN_c1 
.................... #define      TOUCH_PIN              pin_a5 
.................... #define      DHT11_PIN              pin_d1 
.................... #define      HX711_DO               0       // khong co module nay , khai bao cho khoi bao loi 
.................... #define      HX711_CLK              0       // khong co module nay , khai bao cho khoi bao loi 
.................... #define      SRF04_TRIGER           PIN_E2 
.................... #define      soft_i2c_sda           pin_b0 
.................... #define      soft_i2c_scl           pin_b1 
.................... #define      bt0                    pin_b5 
.................... #define      bt1                    pin_b4 
.................... #define      bt2                    pin_b3 
.................... #define      bt3                    pin_b2 
.................... #define      on                     bt0       
.................... #define      off                    bt1 
.................... #define      inv                    bt2 
.................... #define      up                     bt0     
.................... #define      dw                     bt1 
.................... #define      clr                    bt2 
.................... #define      mod                    bt3 
.................... #define      stop                   bt3 
.................... #define      on1                    bt0      
.................... #define      off1                   bt1 
.................... #define      on2                    bt2        
.................... #define      off2                   bt3 
.................... #define      S7SEG_RCK              pin_d5 
.................... #define      LED32_RCK              pin_d4 
.................... #define      D7SEG_RCK              pin_d6 
.................... #define      ALLMODULE_G            pin_d0         //a - 4 byte 
.................... #define      LCD_RCK                pin_d2         //a - 2 byte dao 
.................... #define      RBDC_RCK               pin_d3         //b - 1 byte  
.................... #define      MATRIX_RCK             pin_d7         //b - 3 byte dao 
.................... typedef enum  
.................... { 
....................       OK    = 0, 
....................       ERROR = 1, 
....................       BUSY  = 2 
.................... }result; 
.................... typedef struct  
.................... { 
....................       int1      STEP_MOTOR_ENABLE; 
....................       int1      STEP_MOTOR_IN1; 
....................       int1      STEP_MOTOR_IN2; 
....................       int1      STEP_MOTOR_IN3; 
....................       int1      STEP_MOTOR_IN4; 
....................       int1      DC_MOTOR_ENABLE; 
....................       int1      PWRKEY; 
....................       int1      NC_PIN1;           
....................       int1      BUZZER; 
....................       int1      TRIAC_1; 
....................       int1      TRIAC_2; 
....................       int1      RELAY_1; 
....................       int1      RELAY_2 ; 
....................       int1      NC_PIN2 ;   
....................       int1      NC_PIN3;    
....................       int1      NC_PIN4;   
.................... }RBDC_STRUCT; 
.................... typedef union 
.................... { 
....................       RBDC_STRUCT         bit; 
....................       unsigned int8       xbyte[2]; 
.................... }RBDC_UNION; 
....................  
.................... typedef struct  
.................... { 
....................     RBDC_UNION           rbdc; 
....................     unsigned int8        lcddata;  
....................     unsigned int8        lcdcontrol; 
....................     unsigned int8        glcddata; 
....................     unsigned int8        glcdcontrol;     
.................... }SYSTEM_VAR_STRUCT; 
.................... SYSTEM_VAR_STRUCT system_var={0,0,0,0,0}; 
.................... typedef struct 
.................... { 
....................       unsigned int32 timeline; 
.................... }DELAY_STRUCT; 
.................... DELAY_STRUCT  delay=0; 
.................... //xxxxxxxxxxxxxxxxxxxxxxxxxxxxx Module 32 LED don xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx 
.................... typedef union  
.................... {  
....................   int1           ledx1[32]; 
....................   unsigned int8  ledx8[4]; 
....................   unsigned int16 ledx16[2]; 
....................   unsigned int32 ledx32;  
.................... } LED32_UNION; 
.................... LED32_UNION led32; 
.................... result led32_display(void); 
.................... //xxxxxxxxxxxxxxxxxxxxxxxxxxxxx Module 7 DOAN TT xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx 
.................... const unsigned int8 m7d[16]= {0XC0,0XF9,0xA4,0XB0,0X99,0X92,0X82,0XF8,0X80,0X90,0x88, 0x83, 0xC6, 0xA1, 0x86, 0x7f}; 
.................... typedef struct  
.................... {  
....................   unsigned int8   led[4];   
.................... } D7SEG_STRUCT;  
.................... D7SEG_STRUCT    d7seg ={0xff,0xff,0xff,0xff};  
.................... result d7seg_display(); 
.................... //xxxxxxxxxxxxxxxxxxxxxxxxxxxxx Module 7 DOAN QUET xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx 
.................... typedef struct  
.................... {  
....................   unsigned int8   led[8];   
.................... } S7SEG_STRUCT; 
.................... S7SEG_STRUCT s7seg={0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff}; 
.................... result s7seg_display(); 
.................... //xxxxxxxxxxxxxxxxxxxxxxxxxxxxx TRIAC-BUZZER xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx 
.................... result buzzer_on(); 
.................... result buzzer_off(); 
.................... result relay_1_on(); 
.................... result relay_1_off(); 
.................... result relay_2_on(); 
.................... result relay_2_off(); 
.................... result triac_1_on(); 
.................... result triac_1_off(); 
.................... result triac_2_on(); 
.................... result triac_2_off(); 
.................... result DCMOTOR_ENABLE(); 
.................... result STEPMOTOR_ENABLE(); 
.................... //xxxxxxxxxxxxxxxxxxxxxxxxxxxxx BASE FUNCTIONS xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx 
.................... result system_init(void); 
.................... void SSPI_WRITE(unsigned int8 x); 
.................... #endif 
....................  
.................... //xxxxxxxxxxxxxxxxxxxxxxxxxxxxx Module 32 LED don xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx 
.................... result led32_display() 
.................... { 
....................      SSPI_WRITE(led32.ledx8[3]);SSPI_WRITE(led32.ledx8[2]); 
*
04A6:  MOVFF  11,43B
04AA:  RCALL  0414
04AC:  MOVFF  10,43B
04B0:  RCALL  0414
....................      SSPI_WRITE(led32.ledx8[1]);SSPI_WRITE(led32.ledx8[0]); 
04B2:  MOVFF  0F,43B
04B6:  RCALL  0414
04B8:  MOVFF  0E,43B
04BC:  RCALL  0414
....................      output_high(LED32_RCK); output_low(LED32_RCK); 
04BE:  BCF    F95.4
04C0:  BSF    F8C.4
04C2:  BCF    F95.4
04C4:  BCF    F8C.4
....................      return OK;  
04C6:  MOVLW  00
04C8:  MOVWF  01
04CA:  GOTO   0670 (RETURN)
.................... } 
.................... //xxxxxxxxxxxxxxxxxxxxxxxxxxxxx Module 7 DOAN TT xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx 
.................... result d7seg_display() 
.................... { 
....................       SSPI_WRITE(d7seg.led[0]);SSPI_WRITE(d7seg.led[1]); 
04CE:  MOVFF  12,43B
04D2:  RCALL  0414
04D4:  MOVFF  13,43B
04D8:  RCALL  0414
....................       SSPI_WRITE(d7seg.led[2]);SSPI_WRITE(d7seg.led[3]); 
04DA:  MOVFF  14,43B
04DE:  RCALL  0414
04E0:  MOVFF  15,43B
04E4:  RCALL  0414
....................       output_high(D7SEG_RCK); output_low(D7SEG_RCK); 
04E6:  BCF    F95.6
04E8:  BSF    F8C.6
04EA:  BCF    F95.6
04EC:  BCF    F8C.6
....................       return OK; 
04EE:  MOVLW  00
04F0:  MOVWF  01
04F2:  GOTO   0672 (RETURN)
.................... } 
.................... //xxxxxxxxxxxxxxxxxxxxxxxxxxxxx Module 7 DOAN QUET xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx 
.................... result s7seg_display() 
.................... { 
....................       for(int8 i=0x80,n=0;n<8;n++,i>>=1) 
*
051E:  MOVLW  80
0520:  MOVLB  4
0522:  MOVWF  x30
0524:  CLRF   x31
0526:  MOVF   x31,W
0528:  SUBLW  07
052A:  BNC   057E
....................       { 
....................             SSPI_WRITE(i); 
052C:  MOVFF  430,43B
0530:  MOVLB  0
0532:  RCALL  0414
....................             SSPI_WRITE(~s7seg.led[n]);      
0534:  CLRF   03
0536:  MOVLB  4
0538:  MOVF   x31,W
053A:  ADDLW  16
053C:  MOVWF  FE9
053E:  MOVLW  00
0540:  ADDWFC 03,W
0542:  MOVWF  FEA
0544:  MOVF   FEF,W
0546:  XORLW  FF
0548:  MOVWF  x32
054A:  MOVWF  x3B
054C:  MOVLB  0
054E:  RCALL  0414
....................             output_high(S7SEG_RCK); output_low(S7SEG_RCK);  
0550:  BCF    F95.5
0552:  BSF    F8C.5
0554:  BCF    F95.5
0556:  BCF    F8C.5
....................             delay_ms(1); 
0558:  MOVLW  01
055A:  MOVLB  4
055C:  MOVWF  x32
055E:  MOVLB  0
0560:  RCALL  04F6
....................             SSPI_WRITE(~0xff); 
0562:  MOVLB  4
0564:  CLRF   x3B
0566:  MOVLB  0
0568:  RCALL  0414
....................             output_high(S7SEG_RCK); output_low(S7SEG_RCK); 
056A:  BCF    F95.5
056C:  BSF    F8C.5
056E:  BCF    F95.5
0570:  BCF    F8C.5
0572:  MOVLB  4
0574:  MOVF   x31,W
0576:  INCF   x31,F
0578:  BCF    FD8.0
057A:  RRCF   x30,F
057C:  BRA    0526
....................       } 
....................       return OK; 
057E:  MOVLW  00
0580:  MOVWF  01
0582:  MOVLB  0
0584:  GOTO   0674 (RETURN)
.................... } 
.................... //xxxxxxxxxxxxxxxxxxxxxxxxxxxxx Module KEY4x4 xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx 
.................... unsigned int8 KEYREAD() 
.................... { 
....................      unsigned int8 cot; 
....................      for(cot=0;cot<4;cot++) 
....................      { 
....................         output_bit(pin_b7,cot&0x02); 
....................         output_bit(pin_b6,cot&0x01); 
....................         IF          (!INPUT(PIN_B2))    return (3 + cot*4);              
....................         ELSE    IF  (!INPUT(PIN_B3))    return (2 + cot*4);                
....................         ELSE    IF  (!INPUT(PIN_B4))    return (1 + cot*4);             
....................         ELSE    IF  (!INPUT(PIN_B5))    return (0 + cot*4); 
....................      } 
....................      return 0xff; 
.................... } 
.................... //xxxxxxxxxxxxxxxxxxxxxxxxxxxxx LCD 20x4 xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx 
.................... result private_write_glcd_lcd() 
.................... {       
....................     SSPI_WRITE(system_var.glcdcontrol);              
0588:  MOVFF  09,43B
058C:  RCALL  0414
....................     SSPI_WRITE(system_var.glcddata); 
058E:  MOVFF  08,43B
0592:  RCALL  0414
....................     SSPI_WRITE(system_var.lcdcontrol);        
0594:  MOVFF  07,43B
0598:  RCALL  0414
....................     SSPI_WRITE(system_var.lcddata);            
059A:  MOVFF  06,43B
059E:  RCALL  0414
....................     output_high(LCD_RCK);      
05A0:  BCF    F95.2
05A2:  BSF    F8C.2
....................     output_low(LCD_RCK); 
05A4:  BCF    F95.2
05A6:  BCF    F8C.2
....................     return OK; 
05A8:  MOVLW  00
05AA:  MOVWF  01
05AC:  RETURN 0
.................... } 
.................... result write_lcd20x4(unsigned int8 lcd_signal, lcd_ins_hthi) 
.................... {      
....................     system_var.lcdcontrol = ~lcd_signal; 
05AE:  MOVLB  4
05B0:  MOVFF  430,07
05B4:  COMF   07,F
....................     system_var.lcddata    = ~lcd_ins_hthi;       
05B6:  MOVFF  431,06
05BA:  COMF   06,F
....................     private_write_glcd_lcd(); 
05BC:  MOVLB  0
05BE:  RCALL  0588
....................     return OK; 
05C0:  MOVLW  00
05C2:  MOVWF  01
05C4:  GOTO   067E (RETURN)
.................... } 
.................... //xxxxxxxxxxxxxxxxxxxxxxxxxxxxx GLCD 128x64 xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx 
.................... result write_glcd128x64(unsigned int8 glcd_signal,glcd_ins_hthi) 
.................... {      
....................     system_var.glcdcontrol = ~glcd_signal; 
05C8:  MOVLB  4
05CA:  MOVFF  439,09
05CE:  COMF   09,F
....................     system_var.glcddata    = ~glcd_ins_hthi;      
05D0:  MOVFF  43A,08
05D4:  COMF   08,F
....................     private_write_glcd_lcd(); 
05D6:  MOVLB  0
05D8:  RCALL  0588
....................     return OK; 
05DA:  MOVLW  00
05DC:  MOVWF  01
05DE:  RETURN 0
.................... } 
.................... //!//xxxxxxxxxxxxxxxxxxxxxxxxxxxxx LED Matrix xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx 
.................... result write_ledmatrix(unsigned int16 mahang,unsigned int16 macot1, 
.................... unsigned int16 macot2,unsigned int16 macot3) 
.................... {      
....................       SSPI_WRITE(macot3>>8);SSPI_WRITE(macot3); 
05E0:  MOVFF  437,438
05E4:  MOVLB  4
05E6:  CLRF   x39
05E8:  MOVFF  437,43B
05EC:  MOVLB  0
05EE:  RCALL  0414
05F0:  MOVFF  436,43B
05F4:  RCALL  0414
....................       SSPI_WRITE(macot2>>8);SSPI_WRITE(macot2); 
05F6:  MOVFF  435,438
05FA:  MOVLB  4
05FC:  CLRF   x39
05FE:  MOVFF  435,43B
0602:  MOVLB  0
0604:  RCALL  0414
0606:  MOVFF  434,43B
060A:  RCALL  0414
....................       SSPI_WRITE(macot1>>8);SSPI_WRITE(macot1); 
060C:  MOVFF  433,438
0610:  MOVLB  4
0612:  CLRF   x39
0614:  MOVFF  433,43B
0618:  MOVLB  0
061A:  RCALL  0414
061C:  MOVFF  432,43B
0620:  RCALL  0414
....................       SSPI_WRITE(mahang>>8);SSPI_WRITE(mahang); 
0622:  MOVFF  431,438
0626:  MOVLB  4
0628:  CLRF   x39
062A:  MOVFF  431,43B
062E:  MOVLB  0
0630:  RCALL  0414
0632:  MOVFF  430,43B
0636:  RCALL  0414
....................       output_high(matrix_rck); 
0638:  BCF    F95.7
063A:  BSF    F8C.7
....................       output_low(matrix_rck);  
063C:  BCF    F95.7
063E:  BCF    F8C.7
....................       return OK; 
0640:  MOVLW  00
0642:  MOVWF  01
0644:  GOTO   069E (RETURN)
.................... } 
.................... //xxxxxxxxxxxxxxxxxxxxxxxxxxxxx TRIAC-BUZZER xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx 
.................... result private_write_buzzer_relay() 
.................... {        
....................       SSPI_WRITE(system_var.rbdc.xbyte[1]);       
*
048A:  MOVFF  05,43B
048E:  RCALL  0414
....................       SSPI_WRITE(system_var.rbdc.xbyte[0]); 
0490:  MOVFF  04,43B
0494:  RCALL  0414
....................       output_high(rbdc_rck); 
0496:  BCF    F95.3
0498:  BSF    F8C.3
....................       output_low(rbdc_rck);  
049A:  BCF    F95.3
049C:  BCF    F8C.3
....................       return OK; 
049E:  MOVLW  00
04A0:  MOVWF  01
04A2:  GOTO   0666 (RETURN)
.................... } 
.................... result buzzer_on() 
.................... {     
....................       system_var.rbdc.bit.buzzer=1; 
....................       private_write_buzzer_relay(); 
....................       return OK; 
.................... } 
.................... result buzzer_off() 
.................... {      
....................       system_var.rbdc.bit.buzzer=0; 
....................       private_write_buzzer_relay();   
....................       return OK; 
.................... } 
.................... result relay_1_on() 
.................... {     
....................       system_var.rbdc.bit.relay_1=1; 
....................       private_write_buzzer_relay();  
....................       return OK; 
.................... } 
.................... result relay_1_off() 
.................... {     
....................       system_var.rbdc.bit.relay_1=0; 
....................       private_write_buzzer_relay();   
....................       return OK; 
.................... } 
.................... result relay_2_on() 
.................... {     
....................       system_var.rbdc.bit.relay_2=1; 
....................       private_write_buzzer_relay();  
....................       return OK; 
.................... } 
.................... result relay_2_off() 
.................... {     
....................       system_var.rbdc.bit.relay_2=0; 
....................       private_write_buzzer_relay();  
....................       return OK; 
.................... } 
.................... result triac_1_on() 
.................... {     
....................       system_var.rbdc.bit.triac_1=1; 
....................       private_write_buzzer_relay();  
....................       return OK; 
.................... } 
.................... result triac_1_off() 
.................... {     
....................       system_var.rbdc.bit.triac_1=0; 
....................       private_write_buzzer_relay();    
....................       return OK; 
.................... } 
.................... result triac_2_on() 
.................... {     
....................       system_var.rbdc.bit.triac_2=1; 
....................       private_write_buzzer_relay(); 
....................       return OK; 
.................... } 
.................... result triac_2_off() 
.................... {     
....................       system_var.rbdc.bit.triac_2=0; 
....................       private_write_buzzer_relay();    
....................       return OK; 
.................... } 
.................... result DCMOTOR_ENABLE() 
.................... { 
....................       system_var.rbdc.bit.DC_MOTOR_ENABLE=1; 
....................       private_write_buzzer_relay();   
....................       setup_timer_2(t2_div_by_16,249,1);  // Cau hinh xung PWM T=0.8 ms, su dung PWM1 
....................       setup_ccp1(ccp_pwm);   
....................       setup_ccp2(ccp_pwm);   
....................       return OK; 
.................... } 
.................... result DCMOTOR_LOWLEVEL_CONTROL(signed int16 duty, int1 direct) 
.................... { 
....................      if(duty) 
....................         if(direct){ set_pwm1_duty((int16)0);  set_pwm2_duty(duty);  } 
....................         else      { set_pwm2_duty((int16)0);  set_pwm1_duty(duty);  } 
....................      else         { set_pwm1_duty((int16)0);  set_pwm2_duty((int16)0);  } 
....................      return OK; 
.................... } 
....................  
.................... result STEPMOTOR_ENABLE() 
.................... { 
....................       system_var.rbdc.bit.step_motor_enable=1; 
....................       return OK; 
.................... } 
.................... result STEPMOTOR_LOWLEVEL_CONTROL(int1 mode, int8 step) 
.................... {                                                                       
....................       const unsigned int8 Step_data[2][8]={0x0e,0x0a,0x0b,0x08,0x01,0x05,0x04,0x06,0x0e,0x0b,0x0d,0x07,0x0e,0x0b,0x0d,0x07}; 
....................       system_var.rbdc.bit.step_motor_in1=bit_test(Step_data[mode][step],0); 
....................       system_var.rbdc.bit.step_motor_in2=bit_test(Step_data[mode][step],1); 
....................       system_var.rbdc.bit.step_motor_in3=bit_test(Step_data[mode][step],2); 
....................       system_var.rbdc.bit.step_motor_in4=bit_test(Step_data[mode][step],3); 
....................       private_write_buzzer_relay(); 
....................       return OK; 
.................... } 
.................... //xxxxxxxxxxxxxxxxxxxxxxxxxxxxx BOARD_INIT xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx 
.................... result system_init() 
.................... { 
....................      output_high(ALLMODULE_G);   
*
0648:  BCF    F95.0
064A:  BSF    F8C.0
....................      set_tris_a(0xff);    set_tris_b(0x3c);                                                    
064C:  MOVLW  FF
064E:  MOVWF  F92
0650:  MOVLW  3C
0652:  MOVWF  F93
....................      set_tris_c(0xf1);    set_tris_e(0x00);                                                
0654:  MOVLW  F1
0656:  MOVWF  F94
0658:  MOVLW  00
065A:  MOVWF  F96
....................      set_tris_d(0x00);    output_d(0x00);  
065C:  MOVWF  F95
065E:  CLRF   F95
0660:  CLRF   F8C
....................      port_b_pullups(0xff);  
0662:  BCF    FF1.7
....................      private_write_buzzer_relay(); 
0664:  BRA    048A
....................      led32.ledx32=0; 
0666:  CLRF   11
0668:  CLRF   10
066A:  CLRF   0F
066C:  CLRF   0E
....................      led32_display(); 
066E:  BRA    04A6
....................      d7seg_display(); 
0670:  BRA    04CE
....................      s7seg_display(); 
0672:  BRA    051E
....................      write_lcd20x4(0xff,0xff); 
0674:  MOVLB  4
0676:  SETF   x30
0678:  SETF   x31
067A:  MOVLB  0
067C:  BRA    05AE
....................      write_glcd128x64(0xff,0xff); 
067E:  MOVLB  4
0680:  SETF   x39
0682:  SETF   x3A
0684:  MOVLB  0
0686:  RCALL  05C8
....................      write_ledmatrix(0,0,0,0);  
0688:  MOVLB  4
068A:  CLRF   x31
068C:  CLRF   x30
068E:  CLRF   x33
0690:  CLRF   x32
0692:  CLRF   x35
0694:  CLRF   x34
0696:  CLRF   x37
0698:  CLRF   x36
069A:  MOVLB  0
069C:  BRA    05E0
....................      output_low(ALLMODULE_G);   
069E:  BCF    F95.0
06A0:  BCF    F8C.0
....................      setup_adc(adc_clock_div_32);         
06A2:  MOVF   FC0,W
06A4:  ANDLW  C0
06A6:  IORLW  02
06A8:  MOVWF  FC0
06AA:  BSF    FC0.7
06AC:  BSF    FC2.0
....................      setup_adc_ports(an0_to_an2|vss_vdd);    
06AE:  MOVF   FC1,W
06B0:  ANDLW  C0
06B2:  IORLW  0C
06B4:  MOVWF  FC1
....................      setup_timer_3(t3_internal|t3_div_by_8); 
06B6:  MOVLW  B5
06B8:  MOVWF  FB1
....................      return OK; 
06BA:  MOVLW  00
06BC:  MOVWF  01
06BE:  GOTO   2302 (RETURN)
.................... } 
.................... void SSPI_WRITE(unsigned int8 x) 
.................... {  
....................          if(x&0x80) ssdo=1;  
*
0414:  MOVLB  4
0416:  BTFSS  x3B.7
0418:  BRA    041E
041A:  BSF    F84.2
041C:  BRA    0420
....................          else       ssdo=0; 
041E:  BCF    F84.2
....................          ssck=0;    ssck=1;    
0420:  BCF    F84.0
0422:  BSF    F84.0
....................          if(x&0x40) ssdo=1;  
0424:  BTFSS  x3B.6
0426:  BRA    042C
0428:  BSF    F84.2
042A:  BRA    042E
....................          else       ssdo=0; 
042C:  BCF    F84.2
....................          ssck=0;    ssck=1;   
042E:  BCF    F84.0
0430:  BSF    F84.0
....................          if(x&0x20) ssdo=1;  
0432:  BTFSS  x3B.5
0434:  BRA    043A
0436:  BSF    F84.2
0438:  BRA    043C
....................          else       ssdo=0; 
043A:  BCF    F84.2
....................          ssck=0;    ssck=1;   
043C:  BCF    F84.0
043E:  BSF    F84.0
....................          if(x&0x10) ssdo=1;  
0440:  BTFSS  x3B.4
0442:  BRA    0448
0444:  BSF    F84.2
0446:  BRA    044A
....................          else       ssdo=0; 
0448:  BCF    F84.2
....................          ssck=0;    ssck=1;   
044A:  BCF    F84.0
044C:  BSF    F84.0
....................          if(x&0x08) ssdo=1;  
044E:  BTFSS  x3B.3
0450:  BRA    0456
0452:  BSF    F84.2
0454:  BRA    0458
....................          else       ssdo=0; 
0456:  BCF    F84.2
....................          ssck=0;    ssck=1;   
0458:  BCF    F84.0
045A:  BSF    F84.0
....................          if(x&0x04) ssdo=1;  
045C:  BTFSS  x3B.2
045E:  BRA    0464
0460:  BSF    F84.2
0462:  BRA    0466
....................          else       ssdo=0; 
0464:  BCF    F84.2
....................          ssck=0;    ssck=1;   
0466:  BCF    F84.0
0468:  BSF    F84.0
....................          if(x&0x02) ssdo=1;  
046A:  BTFSS  x3B.1
046C:  BRA    0472
046E:  BSF    F84.2
0470:  BRA    0474
....................          else       ssdo=0; 
0472:  BCF    F84.2
....................          ssck=0;    ssck=1;   
0474:  BCF    F84.0
0476:  BSF    F84.0
....................          if(x&0x01) ssdo=1;  
0478:  BTFSS  x3B.0
047A:  BRA    0480
047C:  BSF    F84.2
047E:  BRA    0482
....................          else       ssdo=0; 
0480:  BCF    F84.2
....................          ssck=0;    ssck=1;        
0482:  BCF    F84.0
0484:  BSF    F84.0
0486:  MOVLB  0
0488:  RETURN 0
.................... } 
.................... #endif 
....................  
....................   
.................... #elif  BOARD ==  D503 
.................... #include <TV_D501_TH.C> 
....................  
.................... #else  
.................... #include <TV_MOPHONG.C> 
.................... #warning"Day la file mo phong, SV khong duoc nap tren board that" 
.................... #endif 
.................... #if  BOARD == MOPHONG 
.................... #define   BUTTON_HOLD_TIME  40 
.................... #else  
.................... #define   BUTTON_HOLD_TIME  30 
.................... #endif 
....................  
.................... #include <TV_LOWLEVER.C> 
.................... #ifndef  __TV_LOWLEVER_C__ 
.................... #define  __TV_LOWLEVER_C__ 
.................... #include <TV_LOWLEVER.H> 
.................... #ifndef  __TV_LOWLEVER_H__ 
.................... #define  __TV_LOWLEVER_H__ 
.................... unsigned int16 delay_start(); 
.................... unsigned int16 delay_stop(unsigned int16 t); 
.................... result inputcd(int16 pin); 
.................... #endif 
....................  
.................... /*********************************** Soft I2C ************************************************************/ 
.................... #if      BOARD == MOPHONG 
.................... result soft_i2c_clk() 
.................... {    
....................       output_high(soft_i2c_scl); 
....................       DELAY_us(1);   
....................       output_low(soft_i2c_scl); 
....................       return OK; 
.................... } 
.................... result soft_i2c_start() 
.................... { 
....................       output_high(soft_i2c_sda); 
....................       output_high(soft_i2c_scl); 
....................       delay_us(1); 
....................       output_low(soft_i2c_sda); 
....................       delay_us(1); 
....................       output_low(soft_i2c_scl);    
....................       return OK; 
.................... } 
.................... result soft_i2c_stop() 
.................... { 
....................       output_low(soft_i2c_sda); 
....................       output_high(soft_i2c_scl); 
....................       delay_us(1); 
....................       output_high(soft_i2c_sda); 
....................       return OK; 
.................... } 
.................... result soft_i2c_write(unsigned int8 b) 
.................... { 
....................       unsigned int8 m; 
....................       int1 ack; 
....................       for(m=0x80;m>0;m>>=1) 
....................       { 
....................             output_bit( soft_i2c_sda,b&m); 
....................             soft_i2c_clk(); 
....................       } 
....................       output_float(soft_i2c_sda); 
....................       output_high(soft_i2c_scl);   
....................       delay_us(1); 
....................       ack = input(soft_i2c_sda); 
....................       output_low(soft_i2c_scl);   
....................       return ack; 
.................... } 
....................  
.................... unsigned int8 soft_i2c_read(int1 ack) 
.................... {  
....................       unsigned int8 n,nhan=0; 
....................       output_float(soft_i2c_sda); 
....................       for(n=0x80;n>0;n>>=1) 
....................       {       
....................             output_high(soft_i2c_scl);   
....................             delay_us(1); 
....................             if(input(soft_i2c_sda))nhan=nhan|n; 
....................             output_low(soft_i2c_scl);    
....................       } 
....................       if(ack)  output_low(soft_i2c_sda); 
....................       else     output_high(soft_i2c_sda);  
....................       soft_i2c_clk(); 
....................       output_high(soft_i2c_sda);  
....................       return nhan; 
.................... } 
.................... #else  
.................... void soft_i2c_clk() 
.................... {     
....................       output_high(soft_i2c_scl); 
....................       output_low(soft_i2c_scl); 
.................... } 
.................... void soft_i2c_start() 
.................... { 
....................       output_high(soft_i2c_sda); 
....................       output_high(soft_i2c_scl); 
....................       output_low(soft_i2c_sda); 
....................       output_low(soft_i2c_scl);       
.................... } 
.................... void soft_i2c_stop() 
.................... { 
....................       output_low(soft_i2c_scl); 
....................       output_low(soft_i2c_sda); 
....................       output_high(soft_i2c_scl); 
....................       output_high(soft_i2c_sda); 
.................... } 
.................... result soft_i2c_write(unsigned int8 b) 
.................... { 
....................       unsigned int8 m,dem=0; 
....................       for(m=0x80;m>0;m>>=1) 
....................       { 
....................             output_bit(soft_i2c_sda,b&m); 
....................             soft_i2c_clk(); 
....................       } 
....................      output_float(soft_i2c_sda); 
....................      output_high(soft_i2c_scl); 
....................      while(input(soft_i2c_sda)&(dem<5)){dem++; delay_us(1);} 
....................      output_low(soft_i2c_scl); 
....................      if(dem==5) return ERROR; 
....................      else        return OK; 
.................... } 
....................  
.................... unsigned int8 soft_i2c_read(int1 ack) 
.................... {  
....................       unsigned int8 n,nhan=0; 
....................       output_float(soft_i2c_sda); 
....................       for(n=0x80;n>0;n>>=1) 
....................       {     
....................             output_high(soft_i2c_scl);   
....................             if(input(soft_i2c_sda))nhan=nhan|n;  
....................             output_low(soft_i2c_scl);   
....................       }  
....................       output_bit(soft_i2c_sda,!ack); 
....................       soft_i2c_clk(); 
....................       return nhan; 
.................... } 
.................... #endif 
.................... /*********************************** Delay ************************************************************/ 
.................... unsigned int16 delay_start() 
.................... {     
....................       delay.timeline += get_timer3() ;set_timer3(2); 
....................       if(TIM3IF) delay.timeline +=65536;TIM3IF=0; 
....................       return delay.timeline/625; 
.................... } 
....................  
.................... unsigned int16 delay_stop(unsigned int16 t) 
.................... {     
....................       unsigned int16 tam; 
....................       delay.timeline += get_timer3() ;set_timer3(2); 
....................       if(TIM3IF) delay.timeline +=65536;TIM3IF=0; 
....................       tam = delay.timeline/625; 
....................       if(t<=tam) return tam-t; 
....................       else       return 0xffff-t + tam; 
.................... } 
.................... /*********************************** Button ************************************************************/ 
....................  
.................... result inputcd(int16 pin) 
.................... { 
....................       static unsigned int16 oldpin=0xffff; 
....................       static unsigned int16 t;  
....................       static unsigned int8 step=0; 
....................       output_float(pin); 
....................       switch (step) 
....................       { 
....................           case 0: 
....................                  if(input(pin)==0) 
....................                   { 
....................                         oldpin   = pin; 
....................                         t        = delay_start(); 
....................                         step     = 1; 
....................                   } 
....................                  break; 
....................            case 1: 
....................                  if(input(oldpin))step = 0; 
....................                  else if((pin==oldpin)&&(delay_stop(t)>=BUTTON_HOLD_TIME)) 
....................                    { 
....................                       t    = delay_start(); 
....................                       step = 2; 
....................                       return OK; 
....................                    } 
....................                  break; 
....................             case 2: 
....................                  if(input(oldpin))step = 0; 
....................                  else if((pin==oldpin)&&(delay_stop(t)>=500)) 
....................                    { 
....................                        t        = delay_start(); 
....................                        step     = 3; 
....................                    }  
....................                  break; 
....................             case 3: 
....................                    if(input(oldpin))step = 0;  
....................                    else if((pin==oldpin)&&(delay_stop(t)>=100)) 
....................                        { 
....................                           t  = delay_start(); 
....................                           return OK; 
....................                        } 
....................                  break; 
....................       }    
....................       return BUSY;  
.................... } 
.................... #endif 
....................  
.................... #ignore_warnings 202 
.................... #endif 
....................  
.................... #include<tv_glcd.c>   
.................... #ifndef  __TV_GLCD_C__ 
.................... #define  __TV_GLCD_C__ 
.................... #include<tv_glcd.h> 
.................... #ifndef __TV_GLCD_H__ 
.................... #define __TV_GLCD_H__ 
.................... #if  BOARD == MOPHONG 
....................    #define GLCD_WIDTH           192 
....................    #define GLCD_HIGH            64 
....................    typedef struct  
....................    {  
....................      int8 x; 
....................      int8 y; 
....................      int8 size; 
....................      int1 mau  ; 
....................      int1 tt_text; 
....................      int1 tt_update; 
....................      int1 overlay  ; 
....................      unsigned int8 x1; 
....................      unsigned int8 y1; 
....................      unsigned int8 x2; 
....................      unsigned int8 y2; 
....................      int8 displayData[8][192]; 
....................    } GLCD_STRUCT;     
....................    GLCD_STRUCT GLCD; 
.................... #else  
....................    #DEFINE GLCD_NGANG              16 //256 PIXEL 
....................    #DEFINE GLCD_DOC                32 //32 HANG 
....................    #DEFINE GLCD_WIDTH              128 //DANH CHO THU VIEN GRAPHIC.C 
....................    typedef union  
....................    {  
....................      unsigned int16 word;  
....................      unsigned int8 nbyte[2];  
....................    } GLCD_DOTS;  
....................     
....................    typedef struct  
....................    {  
....................      int8 x; 
....................      int8 y; 
....................      int8 size; 
....................      int1 mau  ; 
....................      int1 tt_text; 
....................      int1 tt_update; 
....................      int1 overlay; 
....................      unsigned int8 x1; 
....................      unsigned int8 y1; 
....................      unsigned int8 x2; 
....................      unsigned int8 y2; 
....................      GLCD_DOTS PIXEL[GLCD_DOC][GLCD_NGANG];  
....................    } GLCD_VAR_STRUCT;     
....................    GLCD_VAR_STRUCT GLCD; 
.................... #endif 
....................  
.................... result glcd_command(int8 data); 
.................... result glcd_data(int8 data); 
.................... result glcd_setup(void); 
.................... result glcd_clear(int1 color); 
.................... result glcd_text_setup(unsigned int16 x, unsigned int16 y,int8 size, int1 color,int1 overlay); 
.................... result glcd_text(int8 t); 
.................... result glcd_pixel(unsigned int8 x, unsigned int8 y, int1 color); 
.................... result glcd_line(unsigned int8 x1, unsigned int8 y1, unsigned int8 x2, unsigned int8 y2, int1 color); 
.................... result glcd_bar(unsigned int8 x1, unsigned int8 y1, unsigned int8 x2, unsigned int8 y2, unsigned int8 width, int1 color); 
.................... result glcd_rect(unsigned int8 x1, unsigned int8 y1, unsigned int8 x2, unsigned int8 y2, int1 fill, int1 color); 
.................... result glcd_circle(unsigned int8 x, unsigned int8 y, unsigned int8 radius, int1 fill, int1 color); 
.................... result glcd_triangle(signed int16 x1,signed int16 y1, signed int16 x2, signed int16 y2, signed int16 x3, signed int16 y3,int1 fill,int1 color); 
.................... result glcd_spkt_logo_raw(int x) ; 
.................... result glcd_update(void); 
.................... //xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx FONT xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx 
.................... const unsigned int8 GLCD_FONT[51][5] ={0x00, 0x00, 0x00, 0x00, 0x00, // SPACE 
....................                          0x00, 0x00, 0x5F, 0x00, 0x00, // ! 
....................                          0x00, 0x03, 0x00, 0x03, 0x00, // " 
....................                          0x14, 0x3E, 0x14, 0x3E, 0x14, // # 
....................                          0x24, 0x2A, 0x7F, 0x2A, 0x12, // $ 
....................                          0x43, 0x33, 0x08, 0x66, 0x61, // % 
....................                          0x36, 0x49, 0x55, 0x22, 0x50, // & 
....................                          0x00, 0x05, 0x03, 0x00, 0x00, // ' 
....................                          0x00, 0x1C, 0x22, 0x41, 0x00, // ( 
....................                          0x00, 0x41, 0x22, 0x1C, 0x00, // ) 
....................                          0x14, 0x08, 0x3E, 0x08, 0x14, // * 
....................                          0x08, 0x08, 0x3E, 0x08, 0x08, // + 
....................                          0x00, 0x50, 0x30, 0x00, 0x00, // , 
....................                          0x08, 0x08, 0x08, 0x08, 0x08, // - 
....................                          0x00, 0x60, 0x60, 0x00, 0x00, // . 
....................                          0x20, 0x10, 0x08, 0x04, 0x02, // / 
....................                          0x3E, 0x51, 0x49, 0x45, 0x3E, // 0 
....................                          0x00, 0x04, 0x02, 0x7F, 0x00, // 1 
....................                          0x42, 0x61, 0x51, 0x49, 0x46, // 2 
....................                          0x22, 0x41, 0x49, 0x49, 0x36, // 3 
....................                          0x18, 0x14, 0x12, 0x7F, 0x10, // 4 
....................                          0x27, 0x45, 0x45, 0x45, 0x39, // 5 
....................                          0x3E, 0x49, 0x49, 0x49, 0x32, // 6 
....................                          0x01, 0x01, 0x71, 0x09, 0x07, // 7 
....................                          0x36, 0x49, 0x49, 0x49, 0x36, // 8 
....................                          0x26, 0x49, 0x49, 0x49, 0x3E, // 9 
....................                          0x00, 0x36, 0x36, 0x00, 0x00, // : 
....................                          0x00, 0x56, 0x36, 0x00, 0x00, // ; 
....................                          0x08, 0x14, 0x22, 0x41, 0x00, // < 
....................                          0x14, 0x14, 0x14, 0x14, 0x14, // = 
....................                          0x00, 0x41, 0x22, 0x14, 0x08, // > 
....................                          0x02, 0x01, 0x51, 0x09, 0x06, // ? 
....................                          0x3E, 0x41, 0x59, 0x55, 0x5E, // @ 
....................                          0x7E, 0x09, 0x09, 0x09, 0x7E, // A 
....................                          0x7F, 0x49, 0x49, 0x49, 0x36, // B 
....................                          0x3E, 0x41, 0x41, 0x41, 0x22, // C 
....................                          0x7F, 0x41, 0x41, 0x41, 0x3E, // D 
....................                          0x7F, 0x49, 0x49, 0x49, 0x41, // E 
....................                          0x7F, 0x09, 0x09, 0x09, 0x01, // F 
....................                          0x3E, 0x41, 0x41, 0x49, 0x3A, // G 
....................                          0x7F, 0x08, 0x08, 0x08, 0x7F, // H 
....................                          0x00, 0x41, 0x7F, 0x41, 0x00, // I 
....................                          0x30, 0x40, 0x40, 0x40, 0x3F, // J 
....................                          0x7F, 0x08, 0x14, 0x22, 0x41, // K 
....................                          0x7F, 0x40, 0x40, 0x40, 0x40, // L 
....................                          0x7F, 0x02, 0x0C, 0x02, 0x7F, // M 
....................                          0x7F, 0x02, 0x04, 0x08, 0x7F, // N 
....................                          0x3E, 0x41, 0x41, 0x41, 0x3E, // O 
....................                          0x7F, 0x09, 0x09, 0x09, 0x06, // P 
....................                          0x1E, 0x21, 0x21, 0x21, 0x5E, // Q 
....................                          0x7F, 0x09, 0x09, 0x09, 0x76};// R 
.................... const unsigned int8 GLCD_FONT2[44][5]={0x26, 0x49, 0x49, 0x49, 0x32, // S 
....................                          0x01, 0x01, 0x7F, 0x01, 0x01, // T 
....................                          0x3F, 0x40, 0x40, 0x40, 0x3F, // U 
....................                          0x1F, 0x20, 0x40, 0x20, 0x1F, // V 
....................                          0x7F, 0x20, 0x10, 0x20, 0x7F, // W 
....................                          0x41, 0x22, 0x1C, 0x22, 0x41, // X 
....................                          0x07, 0x08, 0x70, 0x08, 0x07, // Y 
....................                          0x61, 0x51, 0x49, 0x45, 0x43, // Z 
....................                          0x00, 0x7F, 0x41, 0x00, 0x00, // [ 
....................                          0x02, 0x04, 0x08, 0x10, 0x20, // \ 
....................                          0x00, 0x00, 0x41, 0x7F, 0x00, // ] 
....................                          0x04, 0x02, 0x01, 0x02, 0x04, // ^ 
....................                          0x40, 0x40, 0x40, 0x40, 0x40, // _ 
....................                          0x00, 0x01, 0x02, 0x04, 0x00, // ` 
....................                          0x20, 0x54, 0x54, 0x54, 0x78, // a 
....................                          0x7F, 0x44, 0x44, 0x44, 0x38, // b 
....................                          0x38, 0x44, 0x44, 0x44, 0x44, // c 
....................                          0x38, 0x44, 0x44, 0x44, 0x7F, // d 
....................                          0x38, 0x54, 0x54, 0x54, 0x18, // e 
....................                          0x04, 0x04, 0x7E, 0x05, 0x05, // f 
....................                          0x08, 0x54, 0x54, 0x54, 0x3C, // g 
....................                          0x7F, 0x08, 0x04, 0x04, 0x78, // h 
....................                          0x00, 0x44, 0x7D, 0x40, 0x00, // i 
....................                          0x20, 0x40, 0x44, 0x3D, 0x00, // j 
....................                          0x7F, 0x10, 0x28, 0x44, 0x00, // k 
....................                          0x00, 0x41, 0x7F, 0x40, 0x00, // l 
....................                          0x7C, 0x04, 0x78, 0x04, 0x78, // m 
....................                          0x7C, 0x08, 0x04, 0x04, 0x78, // n 
....................                          0x38, 0x44, 0x44, 0x44, 0x38, // o 
....................                          0x7C, 0x14, 0x14, 0x14, 0x08, // p 
....................                          0x08, 0x14, 0x14, 0x14, 0x7C, // q 
....................                          0x00, 0x7C, 0x08, 0x04, 0x04, // r 
....................                          0x48, 0x54, 0x54, 0x54, 0x20, // s 
....................                          0x04, 0x04, 0x3F, 0x44, 0x44, // t 
....................                          0x3C, 0x40, 0x40, 0x20, 0x7C, // u 
....................                          0x1C, 0x20, 0x40, 0x20, 0x1C, // v 
....................                          0x3C, 0x40, 0x30, 0x40, 0x3C, // w 
....................                          0x44, 0x28, 0x10, 0x28, 0x44, // x 
....................                          0x0C, 0x50, 0x50, 0x50, 0x3C, // y 
....................                          0x44, 0x64, 0x54, 0x4C, 0x44, // z 
....................                          0x00, 0x08, 0x36, 0x41, 0x41, // { 
....................                          0x00, 0x00, 0x7F, 0x00, 0x00, // | 
....................                          0x41, 0x41, 0x36, 0x08, 0x00, // } 
....................                          0x02, 0x01, 0x02, 0x04, 0x02};// ~ 
.................... const unsigned int8 GLCD_Logo_DHSPKTTP [] = { 
....................                         0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
....................                         0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01, 0x80, 0x00, 0x00, 0x00, 
....................                         0x00, 0x00, 0x00, 0x01, 0x80, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01, 0x80, 0x00, 0x00, 0x00, 
....................                         0x00, 0x00, 0x00, 0x07, 0xE0, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x07, 0xA0, 0x00, 0x00, 0x00, 
....................                         0x00, 0x00, 0x00, 0x03, 0x20, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x03, 0x20, 0x00, 0x00, 0x00, 
....................                         0x00, 0x00, 0x00, 0x02, 0x20, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0x30, 0x00, 0x00, 0x00, 
....................                         0x00, 0x00, 0x00, 0x02, 0x30, 0x00, 0x00, 0x00, 0x00, 0x7F, 0x00, 0x00, 0x30, 0x00, 0x7E, 0x00, 
....................                         0x00, 0xFE, 0x00, 0x07, 0xE0, 0x00, 0x3F, 0x00, 0x01, 0xF8, 0x00, 0x03, 0xE0, 0x00, 0x1F, 0x80, 
....................                         0x03, 0xF0, 0x00, 0x01, 0xC0, 0x00, 0x0F, 0xC0, 0x03, 0xE0, 0x00, 0x01, 0xC0, 0x00, 0x07, 0xE0, 
....................                         0x07, 0xC0, 0x00, 0x03, 0xC0, 0x00, 0x03, 0xF0, 0x0F, 0xC0, 0x00, 0x17, 0xF4, 0x00, 0x01, 0xF0, 
....................                         0x0F, 0x80, 0x00, 0x1D, 0x98, 0x00, 0x00, 0xF8, 0x1F, 0x00, 0x00, 0x11, 0x8C, 0x00, 0x00, 0xF8, 
....................                         0x1F, 0x01, 0x00, 0x31, 0x84, 0x00, 0x80, 0x7C, 0x3E, 0x06, 0x00, 0x31, 0x86, 0x00, 0x20, 0x7C, 
....................                         0x3E, 0x18, 0x00, 0x71, 0x86, 0x00, 0x1C, 0x3E, 0x3C, 0x43, 0x00, 0x31, 0x84, 0x00, 0xC3, 0x3E, 
....................                         0x7C, 0x0C, 0x00, 0x11, 0x8C, 0x00, 0x38, 0x1E, 0x7C, 0x31, 0x00, 0x1D, 0x98, 0x00, 0x86, 0x1F, 
....................                         0x78, 0xC6, 0x00, 0x1F, 0xFC, 0x00, 0x63, 0x1F, 0x78, 0x18, 0x00, 0x03, 0xC0, 0x00, 0x0C, 0x1F, 
....................                         0xF8, 0x63, 0x80, 0x01, 0x80, 0x00, 0xC7, 0x0F, 0xF9, 0x8E, 0x00, 0x00, 0x00, 0x00, 0x38, 0x8F, 
....................                         0xF8, 0x38, 0x80, 0x00, 0x00, 0x01, 0x0C, 0x0F, 0xF8, 0xC3, 0x80, 0x00, 0x00, 0x00, 0xE3, 0x8F, 
....................                         0xF9, 0x8E, 0x00, 0x00, 0x00, 0x00, 0x30, 0xCF, 0xF8, 0x38, 0xF8, 0x00, 0x00, 0x1F, 0x9E, 0x0F, 
....................                         0xF8, 0xE3, 0xFE, 0x00, 0x00, 0x7F, 0xE3, 0x8F, 0xF9, 0x9F, 0xFF, 0xC0, 0x03, 0xFF, 0xF9, 0xCF, 
....................                         0x78, 0xFF, 0xFF, 0xE0, 0x07, 0xFF, 0xFF, 0x0F, 0x78, 0x1F, 0xFF, 0xE0, 0x07, 0xFF, 0xFC, 0x1F, 
....................                         0x7C, 0x07, 0xFF, 0xE0, 0x07, 0xFF, 0xE0, 0x1F, 0x7C, 0x00, 0xFF, 0xE0, 0x07, 0xFF, 0x80, 0x1E, 
....................                         0x7C, 0x00, 0x1F, 0xE0, 0x07, 0xFC, 0x00, 0x3E, 0x3E, 0x01, 0xCF, 0xE0, 0x07, 0xF3, 0x80, 0x3E, 
....................                         0x3E, 0x01, 0xFF, 0xE0, 0x03, 0xFF, 0x80, 0x7C, 0x1F, 0x01, 0xFF, 0xE0, 0x03, 0xFF, 0xC0, 0x7C, 
....................                         0x1F, 0x01, 0xFF, 0xC0, 0x03, 0xFF, 0xC0, 0xF8, 0x0F, 0x83, 0xFF, 0xC0, 0x01, 0xFF, 0xC0, 0xF8, 
....................                         0x0F, 0x83, 0xFF, 0xC0, 0x01, 0xFF, 0xC1, 0xF0, 0x07, 0xC3, 0xFF, 0x80, 0x01, 0xFF, 0xE3, 0xF0, 
....................                         0x03, 0xE3, 0xFF, 0x80, 0x01, 0xFF, 0xE7, 0xE0, 0x03, 0xF7, 0xFF, 0x80, 0x00, 0xFF, 0xEF, 0xC0, 
....................                         0x01, 0xFF, 0xFF, 0x80, 0x00, 0xFF, 0xFF, 0x80, 0x00, 0xFF, 0xFF, 0x00, 0x00, 0xFF, 0xFF, 0x80, 
....................                         0x00, 0x7F, 0xFF, 0x00, 0x00, 0xFF, 0xFF, 0x00, 0x00, 0x3F, 0xFF, 0x00, 0x00, 0xFF, 0xFE, 0x00, 
....................                         0x00, 0x1F, 0xFF, 0x00, 0x00, 0x7F, 0xF8, 0x00, 0x00, 0x0F, 0xFE, 0x00, 0x00, 0x7F, 0xF0, 0x00, 
....................                         0x00, 0x03, 0xFF, 0x00, 0x00, 0x7F, 0xE0, 0x00, 0x00, 0x00, 0xFF, 0xFC, 0x1F, 0xFF, 0x80, 0x00, 
....................                         0x00, 0x00, 0x7F, 0xFF, 0xFF, 0xFE, 0x00, 0x00, 0x00, 0x00, 0x0F, 0xFF, 0xFF, 0xF8, 0x00, 0x00, 
....................                         0x00, 0x00, 0x01, 0xFF, 0xFF, 0xC0, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0F, 0xF0, 0x00, 0x00, 0x00 
....................                         }; 
.................... #endif 
....................  
.................... #if  BOARD == MOPHONG 
.................... //************************************** Board Mo Phong **************************************************** 
.................... result GLCD_UPDATE_COORDINATE(unsigned int8 x1,unsigned int8 y1, unsigned int8 x2, unsigned int8 y2) 
.................... { 
....................       if(GLCD.tt_update==0) 
....................       { 
....................             GLCD.x1 = x1; 
....................             GLCD.x2 = x2; 
....................             GLCD.y1 = y1; 
....................             GLCD.y2 = y2;    
....................       } 
....................       else 
....................       {     
....................             if(x1<GLCD.x1) GLCD.x1=x1; 
....................             if(x2>GLCD.x2) GLCD.x2=x2; 
....................             if(y1<GLCD.y1) GLCD.y1=y1; 
....................             if(y2>GLCD.y2) GLCD.y2=y2;    
....................       }  
....................       GLCD.tt_update=1; 
....................       return OK; 
.................... } 
.................... result glcd_clear(int1 color) 
.................... { 
....................    unsigned int8 i, j,cl; 
....................    if(color) cl =0xff; 
....................    else      cl =0; 
....................    for(i = 0; i < 8; ++i) 
....................     for(j = 0; j < 192; ++j) 
....................      GLCD.displayData[i][j]= cl;  
....................    GLCD.x1 = 0; 
....................    GLCD.x2 = 191; 
....................    GLCD.y1 = 0; 
....................    GLCD.y2 = 63;   
....................    GLCD.tt_update=1; 
....................    return OK; 
.................... } 
.................... result glcd_pixel(unsigned int8 x, unsigned int8 y, int1 color) 
.................... { 
....................    if(color) 
....................       bit_set(GLCD.displayData[y/8][x], y%8); 
....................    else 
....................       bit_clear(GLCD.displayData[y/8][x], y%8); 
....................    GLCD_UPDATE_COORDINATE(x,y, x, y); 
....................    return OK; 
.................... } 
....................  
.................... result GLCD_PIXEL_TEMP(unsigned int8 x, unsigned int8 y, int1 color) 
.................... { 
....................    if(color) 
....................       bit_set(GLCD.displayData[y/8][x], y%8); 
....................    else 
....................       bit_clear(GLCD.displayData[y/8][x], y%8); 
....................    return OK; 
.................... } 
....................  
.................... result GLCD_VERTICAL_LINE(unsigned int8 x, unsigned int8 y1,unsigned int8 y2, int1 color) 
.................... { 
....................    unsigned int8 i,top,bot; 
....................    top=y1/8; bot = y2/8; 
....................    if (top==bot)  
....................    { 
....................           if(color)      
....................                GLCD.displayData[top][x]= GLCD.displayData[top][x] | ((0xff<<(y1%8)) & (0xff>>(7-(y2%8))));    
....................           else  
....................                GLCD.displayData[top][x]= GLCD.displayData[top][x] &(~((0xff<<(y1%8)) & (0xff>>(7-(y2%8))))); 
....................    } 
....................    else  
....................    { 
....................           if(color) 
....................           {     
....................                GLCD.displayData[top][x]= GLCD.displayData[top][x] | (0xff<<(y1%8)); 
....................                GLCD.displayData[bot][x]= GLCD.displayData[bot][x] | (0xff>>(7-(y2%8))); 
....................                for(i = top + 1; i < bot; i++) GLCD.displayData[i][x]=0xff; 
....................           } 
....................           else  
....................           {     
....................                GLCD.displayData[top][x]= GLCD.displayData[top][x] & (~(0xff<<(y1%8))); 
....................                GLCD.displayData[bot][x]= GLCD.displayData[bot][x] & (~(0xff>>(7-(y2%8)))); 
....................                for(i = top + 1; i < bot; i++)GLCD.displayData[i][x]=0; 
....................           }  
....................    } 
....................    return OK; 
.................... } 
.................... result glcd_update() 
.................... { 
....................     unsigned int8 i, j; 
....................     GLCD.y1=GLCD.y1/8; 
....................     GLCD.y2=GLCD.y2/8; 
....................     for(i = GLCD.y1; i <=GLCD.y2; i++) 
....................     {   
....................          output_high(GLCD_CSA); 
....................          output_high(GLCD_CSB); 
....................          output_high(GLCD_CSC); 
....................          if(GLCD.x1<64) 
....................           {    output_low(GLCD_CSA); 
....................                glcd_command(0x40 | GLCD.x1); 
....................           } 
....................          else if(GLCD.x1<128) 
....................           {    output_low(GLCD_CSB); 
....................                glcd_command(0x40 | (GLCD.x1-64)); 
....................           } 
....................          else  
....................           {    output_low(GLCD_CSC); 
....................                glcd_command(0x40 | (GLCD.x1-128)); 
....................           }   
....................          glcd_command(0xB8 | i); 
....................          for (j=GLCD.x1;j<= GLCD.x2;j++) 
....................          { 
....................                if(j==64)      {output_high(GLCD_CSA);output_low(GLCD_CSB);glcd_command(0x40);glcd_command(0xB8 | i); } 
....................                else if(j==128){output_high(GLCD_CSB);output_low(GLCD_CSC);glcd_command(0x40);glcd_command(0xB8 | i); } 
....................                glcd_data(GLCD.displayData[i][j]);   
....................          } 
....................     } 
....................     GLCD.tt_update=0; 
....................     return OK; 
.................... } 
.................... result glcd_text_setup(unsigned int16 x, unsigned int16 y,int8 size, int1 color,int1 overlay) 
.................... { 
....................       GLCD.mau = color; 
....................       GLCD.size = size; 
....................       GLCD.x    = x; 
....................       GLCD.y    =y; 
....................       GLCD.tt_text=0; 
....................       GLCD.overlay=overlay; 
....................       return OK; 
.................... } 
....................  
.................... result glcd_text( char t) 
.................... {       
....................       static unsigned int8 x1,x2,y1,y2; 
....................       unsigned int8 j, k, l;                       
....................       unsigned int8 pixelData[5];  
....................       if(GLCD.overlay) 
....................       { 
....................             glcd_rect(GLCD.x,GLCD.y,GLCD.x+6*GLCD.size,GLCD.y+7*GLCD.size,1,!GLCD.mau); 
....................       } 
....................       if(GLCD.tt_text==0) 
....................       { 
....................           x1=GLCD.x; 
....................           y1=GLCD.y; 
....................           GLCD.tt_text=1; 
....................       } 
....................       if(t < 'S') 
....................          memcpy(pixelData, GLCD_FONT[t - ' '], 5); 
....................       else if(t <= '~')  
....................          memcpy(pixelData, GLCD_FONT2[t - 'S'], 5); 
....................       else 
....................          memcpy(pixelData, GLCD_FONT[0], 5);    
....................       if(GLCD.x+5*GLCD.size >= GLCD_WIDTH)          
....................       { 
....................          GLCD.x = 0;                            
....................          GLCD.y += 7*GLCD.size + 1;                  
....................       } 
....................       for(j=0; j<5; ++j, GLCD.x+=GLCD.size)          
....................       { 
....................          for(k=0; k < 7; ++k)              
....................          { 
....................             if(bit_test(pixelData[j], k))  
....................             { 
....................                for(l=0; l < GLCD.size; ++l)    
....................                {    
....................                   GLCD_VERTICAL_LINE(GLCD.x+l, GLCD.y+k*GLCD.size,GLCD.y+(k+1)*GLCD.size-1, GLCD.mau); 
....................                } 
....................             } 
....................          } 
....................       } 
....................       x2 = GLCD.x; 
....................       GLCD.x+=GLCD.size; 
....................       y2= GLCD.y + 7*GLCD.size; 
....................       GLCD_UPDATE_COORDINATE(x1,y1, x2,y2); 
....................       return OK; 
....................  } 
....................   
....................  
.................... result glcd_spkt_logo_raw(int x)  
.................... {  
....................    unsigned int8 i=0, j=0, k=0,y=0;  
....................    unsigned int16 count=0;  
....................    GLCD_UPDATE_COORDINATE(x,0, x+64,63); 
....................    for(j=0;j<64;j++)  
....................       {     
....................          for(;i<64;)  
....................          {  
....................             for(k=8;k>0;k--) 
....................             { 
....................                GLCD_PIXEL_TEMP(i+x,j+y,bit_test(GLCD_Logo_DHSPKTTP[count],(k-1)));  
....................                i++;  
....................             }  
....................             count++;  
....................          }  
....................       i=0;  
....................       }  
....................      return OK; 
.................... }  
....................  
.................... result glcd_line(unsigned int8 x1, unsigned int8 y1, unsigned int8 x2, unsigned int8 y2, int1 color) 
.................... { 
....................    unsigned int16        dy, dx; 
....................    signed int8  addx=1, addy=1; 
....................    signed int16 P, diff; 
....................    unsigned int8 i=0,xt1,xt2,yt1,yt2; 
....................    dx = abs((signed int8)(x2 - x1)); 
....................    dy = abs((signed int8)(y2 - y1)); 
....................    xt1=x1; xt2=x2; 
....................    yt1=y1, yt2=y2; 
....................    if(x1 > x2) 
....................    { 
....................       addx = -1; 
....................       xt2=x1; 
....................       xt1=x2; 
....................    } 
....................    if(y1 > y2) 
....................    { 
....................       addy = -1; 
....................       yt2=y1; 
....................       yt1=y2; 
....................    } 
....................    GLCD_UPDATE_COORDINATE(xt1,yt1, xt2,yt2); 
....................    if(dx >= dy) 
....................    { 
....................       dy *= 2; 
....................       P = dy - dx; 
....................       diff = P - dx; 
....................  
....................       for(; i<=dx; ++i) 
....................       { 
....................          GLCD_PIXEL_TEMP(x1, y1, color); 
....................  
....................          if(P < 0) 
....................          { 
....................             P  += dy; 
....................             x1 += addx; 
....................          } 
....................          else 
....................          { 
....................             P  += diff; 
....................             x1 += addx; 
....................             y1 += addy; 
....................          } 
....................       } 
....................    } 
....................    else 
....................    { 
....................       dx *= 2; 
....................       P = dx - dy; 
....................       diff = P - dy; 
....................  
....................       for(; i<=dy; ++i) 
....................       { 
....................          GLCD_PIXEL_TEMP(x1, y1, color); 
....................  
....................          if(P < 0) 
....................          { 
....................             P  += dx; 
....................             y1 += addy; 
....................          } 
....................          else 
....................          { 
....................             P  += diff; 
....................             x1 += addx; 
....................             y1 += addy; 
....................          } 
....................       } 
....................    } 
....................    return OK; 
.................... } 
.................... result glcd_rect(unsigned int8 x1, unsigned int8 y1, unsigned int8 x2, unsigned int8 y2, int1 fill, int1 color) 
.................... { 
....................       unsigned int8  xmin, xmax, ymin, ymax,i; 
....................       xmin = x1; 
....................       xmax = x2; 
....................       ymin = y1; 
....................       ymax = y2; 
....................       if(x1 > x2)                             
....................       { 
....................          xmin = x2; 
....................          xmax = x1; 
....................       } 
....................       if(y1 > y2)                            
....................       { 
....................          ymin = y2; 
....................          ymax = y1; 
....................       } 
....................       if(fill) 
....................       { 
....................          for(i=xmin; i <= xmax; i++) 
....................             GLCD_VERTICAL_LINE(i, ymin,ymax,color); 
....................       } 
....................       else 
....................       { 
....................          GLCD_VERTICAL_LINE(xmin, ymin,ymax, color); 
....................          GLCD_VERTICAL_LINE(xmax, ymin,ymax, color); 
....................          glcd_line(x1, y1, x2, y1, color);      // Draw the 4 sides 
....................          glcd_line(x1, y2, x2, y2, color); 
....................       } 
....................       GLCD_UPDATE_COORDINATE(xmin,ymin, xmax,ymax); 
....................       return OK; 
.................... } 
....................  
.................... result glcd_bar(unsigned int8 x1, unsigned int8 y1, unsigned int8 x2, unsigned int8 y2, unsigned int8 width, int1 color) 
.................... { 
....................    unsigned int8         half_width; 
....................    signed int16 dy, dx; 
....................    signed int8  addx=1, addy=1, j; 
....................    signed int16 P, diff, c1, c2; 
....................    unsigned int8 i=0,xt1,yt1,xt2,yt2; 
....................    dx = abs((signed int8)(x2 - x1)); 
....................    dy = abs((signed int8)(y2 - y1)); 
....................    half_width = width/2; 
....................    c1 = -(dx*x1 + dy*y1); 
....................    c2 = -(dx*x2 + dy*y2);   
....................    xt1=x1-half_width; 
....................    xt2=x2+half_width; 
....................    yt1=y1-half_width; 
....................    yt2=y2+half_width; 
....................    if(x1 > x2) 
....................    { 
....................       signed int16 temp; 
....................       temp = c1; 
....................       c1 = c2; 
....................       c2 = temp; 
....................       addx = -1; 
....................       xt1=x2-half_width; 
....................       xt2=x1+half_width;   
....................    } 
....................    if(y1 > y2) 
....................    { 
....................       signed int16 temp; 
....................       temp = c1; 
....................       c1 = c2; 
....................       c2 = temp; 
....................       addy = -1; 
....................       yt1=y2-half_width; 
....................       yt2=y1+half_width; 
....................    } 
....................    if(xt1>191)  xt1=0; 
....................    if(yt1>191)  yt1=0; 
....................    if(xt2>191)  xt2=191; 
....................    if(yt2>63)   yt2=63; 
....................    GLCD_UPDATE_COORDINATE(xt1,yt1, xt2,yt2); 
....................    if(dx >= dy) 
....................    { 
....................       P = 2*dy - dx; 
....................       diff = P - dx; 
....................  
....................       for(i=0; i<=dx; ++i) 
....................       { 
....................          for(j=-half_width; j<half_width+width%2; ++j) 
....................          { 
....................                GLCD_PIXEL_TEMP(x1, y1+j, color); 
....................          } 
....................          if(P < 0) 
....................          { 
....................             P  += 2*dy; 
....................             x1 += addx; 
....................          } 
....................          else 
....................          { 
....................             P  += diff; 
....................             x1 += addx; 
....................             y1 += addy; 
....................          } 
....................       } 
....................    } 
....................    else 
....................    { 
....................       P = 2*dx - dy; 
....................       diff = P - dy; 
....................  
....................       for(i=0; i<=dy; ++i) 
....................       { 
....................          if(P < 0) 
....................          { 
....................             P  += 2*dx; 
....................             y1 += addy; 
....................          } 
....................          else 
....................          { 
....................             P  += diff; 
....................             x1 += addx; 
....................             y1 += addy; 
....................          } 
....................          for(j=-half_width; j<half_width+width%2; ++j) 
....................          { 
....................                GLCD_PIXEL_TEMP(x1+j, y1, color); 
....................          } 
....................       } 
....................    } 
....................    return OK; 
.................... } 
....................  
.................... result glcd_circle(unsigned int8 x, unsigned int8 y, unsigned int8 radius, int1 fill, int1 color) 
.................... { 
....................    unsigned int8 xt1,xt2, yt1, yt2; 
....................    signed int8  a, b, P; 
....................    a = 0; 
....................    b = radius; 
....................    P = 1 - radius; 
....................    do 
....................    { 
....................       if(fill) 
....................       { 
....................           GLCD_VERTICAL_LINE(x+b, y-a,y+a, color); 
....................           GLCD_VERTICAL_LINE(x-b, y-a,y+a, color); 
....................           GLCD_VERTICAL_LINE(x+a, y-b,y+b, color); 
....................           GLCD_VERTICAL_LINE(x-a, y-b,y+b, color); 
....................       } 
....................       else 
....................       { 
....................          GLCD_PIXEL_TEMP(a+x, b+y, color); 
....................          GLCD_PIXEL_TEMP(b+x, a+y, color); 
....................          GLCD_PIXEL_TEMP(x-a, b+y, color); 
....................          GLCD_PIXEL_TEMP(x-b, a+y, color); 
....................          GLCD_PIXEL_TEMP(b+x, y-a, color); 
....................          GLCD_PIXEL_TEMP(a+x, y-b, color); 
....................          GLCD_PIXEL_TEMP(x-a, y-b, color); 
....................          GLCD_PIXEL_TEMP(x-b, y-a, color); 
....................       } 
....................  
....................       if(P < 0) 
....................          P += 3 + 2 * a++; 
....................       else 
....................          P += 5 + 2 * (a++ - b--); 
....................     } while(a <= b); 
....................     xt1 = x-radius; 
....................     xt2 = x+radius; 
....................     yt1 = y-radius; 
....................     yt2 = y+radius; 
....................     if(xt1>191)   xt1=0; 
....................     if(yt1>191)   yt1=0; 
....................     if(xt2>191)   xt2=191; 
....................     if(yt2>63)    yt2=63; 
....................     GLCD_UPDATE_COORDINATE(xt1,yt1, xt2,yt2); 
....................     return OK; 
.................... } 
.................... result glcd_triangle(signed int16 x1,signed int16 y1, signed int16 x2, signed int16 y2, signed int16 x3, signed int16 y3,int1 fill,int1 color) 
.................... { 
....................     unsigned int8 xt1, xt2, yt11,yt22; 
....................     signed int16 x[3],y[3],n,yt1,yt2,yt,dx1,dx2,dx3,dy1,dy2,dy3;  
....................     signed int16 sh1,sh2,sh3; 
....................     x[0]=x1; x[1]=x2; x[2]=x3;y[0]=y1; y[1]=y2; y[2]=y3; 
....................     if(x[0]>x[1]){yt=x[0];x[0]=x[1];x[1]=yt;yt=y[0];y[0]=y[1];y[1]=yt;} 
....................     if(x[0]>x[2]){yt=x[0];x[0]=x[2];x[2]=yt;yt=y[0];y[0]=y[2];y[2]=yt;} 
....................     if(x[1]>x[2]){yt=x[1];x[1]=x[2];x[2]=yt;yt=y[1];y[1]=y[2];y[2]=yt;} 
....................     dx1= x[2]-x[0]; dx2= x[1]-x[0];dx3=x[2]-x[1]; 
....................     dy1= y[2]-y[0]; dy2= y[1]-y[0];dy3=y[2]-y[1]; 
....................     sh1=x[2]*y[0] - x[0]*y[2]; sh2=x[1]*y[0] - x[0]*y[1]; sh3=x[2]*y[1] - x[1]*y[2]; 
....................     if(fill) 
....................     { 
....................         for(n=x[0] ; n<x[1]; n++) 
....................           { 
....................               yt1= (dy1*n + sh1)/dx1; 
....................               yt2= (dy2*n + sh2)/dx2; 
....................               if(yt2<yt1){yt= yt1; yt1=yt2; yt2=yt;} 
....................               GLCD_VERTICAL_LINE(n,yt1,yt2,color); 
....................           } 
....................           for(n=x[1] ; n<x[2]; n++) 
....................           { 
....................               yt1= (dy1*n + sh1)/dx1; 
....................               yt2= (dy3*n + sh3)/dx3; 
....................               if(yt2<yt1){yt= yt1; yt1=yt2; yt2=yt;} 
....................               GLCD_VERTICAL_LINE(n,yt1,yt2,color); 
....................           }   
....................     } 
....................     else  
....................     { 
....................          glcd_line(x1,y1,x2,y2,color); 
....................          glcd_line(x1,y1,x3,y3,color); 
....................          glcd_line(x2,y2,x3,y3,color); 
....................     } 
....................     xt1 = x[0]; 
....................     xt2 = x[2]; 
....................     if(y[0]>y[1])yt22= y[0]; else yt22 = y[1]; 
....................     if(yt22<y[2]) yt22 = y[2];  
....................     if(y[0]<y[1]) yt11= y[0]; else yt11 = y[1]; 
....................     if(yt11>y[2])yt11 = y[2]; 
....................     GLCD_UPDATE_COORDINATE(xt1,yt11, xt2,yt22);  
....................     return OK; 
.................... } 
.................... result glcd_data(int8 data) 
.................... { 
....................    output_high(glcd_rs); 
....................    output_glcd(data);              
....................    output_high(glcd_e);      
....................    output_low(glcd_e);   
....................    delay_cycles(4); 
....................    return OK; 
.................... } 
.................... result glcd_command(int8 data) 
.................... { 
....................    output_low(glcd_rs); 
....................    output_glcd(data);              
....................    output_high(glcd_e);      
....................    output_low(glcd_e);   
....................    delay_us(4); 
....................    return OK; 
.................... } 
.................... result glcd_setup() 
.................... { 
....................    output_low(GLCD_CSA); 
....................    output_low(GLCD_CSB); 
....................    output_low(GLCD_CSC); 
....................    glcd_command(0x3F); 
....................    glcd_clear(0); 
....................    glcd_update(); 
....................    output_high(GLCD_CSA); 
....................    output_high(GLCD_CSB); 
....................    output_high(GLCD_CSC); 
....................    GLCD.tt_text=1; 
....................    GLCD.tt_update=0; 
....................    return OK; 
.................... } 
.................... /**********************************************Board Thuc  Hanh******************************************/ 
.................... #else 
.................... result GLCD_UPDATE_COORDINATE(unsigned int8 x1,unsigned int8 y1, unsigned int8 x2, unsigned int8 y2) 
.................... { 
....................       if(GLCD.tt_update==0) 
*
0974:  BTFSC  26.2
0976:  BRA    098A
....................       { 
....................             GLCD.x1 = x1; 
0978:  MOVFF  47C,27
....................             GLCD.x2 = x2; 
097C:  MOVFF  47E,29
....................             GLCD.y1 = y1; 
0980:  MOVFF  47D,28
....................             GLCD.y2 = y2;    
0984:  MOVFF  47F,2A
....................       } 
0988:  BRA    09B6
....................       else 
....................       {     
....................             if(x1<GLCD.x1) GLCD.x1=x1; 
098A:  MOVF   27,W
098C:  MOVLB  4
098E:  SUBWF  x7C,W
0990:  BTFSS  FD8.0
0992:  MOVFF  47C,27
....................             if(x2>GLCD.x2) GLCD.x2=x2; 
0996:  MOVF   x7E,W
0998:  SUBWF  29,W
099A:  BTFSS  FD8.0
099C:  MOVFF  47E,29
....................             if(y1<GLCD.y1) GLCD.y1=y1; 
09A0:  MOVF   28,W
09A2:  SUBWF  x7D,W
09A4:  BTFSS  FD8.0
09A6:  MOVFF  47D,28
....................             if(y2>GLCD.y2) GLCD.y2=y2;    
09AA:  MOVF   x7F,W
09AC:  SUBWF  2A,W
09AE:  BTFSS  FD8.0
09B0:  MOVFF  47F,2A
09B4:  MOVLB  0
....................       }  
....................       GLCD.tt_update=1; 
09B6:  BSF    26.2
....................       return OK; 
09B8:  MOVLW  00
09BA:  MOVWF  01
09BC:  RETURN 0
.................... } 
.................... result glcd_clear(int1 color) 
.................... {   
....................   int16 d,doc,ngang;  
....................   if(color)  d=0xffff; else d=0; 
*
06F0:  MOVLB  4
06F2:  MOVF   x30,F
06F4:  BZ    06FC
06F6:  SETF   x32
06F8:  SETF   x31
06FA:  BRA    0700
06FC:  CLRF   x32
06FE:  CLRF   x31
....................   for (DOC=0; DOC < GLCD_DOC; DOC++)  
0700:  CLRF   x34
0702:  CLRF   x33
0704:  MOVF   x34,F
0706:  BNZ   077C
0708:  MOVF   x33,W
070A:  SUBLW  1F
070C:  BNC   077C
....................   {  
....................     for (NGANG=0; NGANG < GLCD_NGANG; NGANG++)  
070E:  CLRF   x36
0710:  CLRF   x35
0712:  MOVF   x36,F
0714:  BNZ   0774
0716:  MOVF   x35,W
0718:  SUBLW  0F
071A:  BNC   0774
....................     {  
....................       GLCD.PIXEL[DOC][NGANG].word = d;  
071C:  RLCF   x33,W
071E:  MOVWF  02
0720:  RLCF   x34,W
0722:  MOVWF  03
0724:  RLCF   02,F
0726:  RLCF   03,F
0728:  RLCF   02,F
072A:  RLCF   03,F
072C:  RLCF   02,F
072E:  RLCF   03,F
0730:  RLCF   02,F
0732:  RLCF   03,F
0734:  MOVLW  E0
0736:  ANDWF  02,F
0738:  MOVF   02,W
073A:  ADDLW  08
073C:  MOVWF  x37
073E:  MOVLW  00
0740:  ADDWFC 03,W
0742:  MOVWF  x38
0744:  BCF    FD8.0
0746:  RLCF   x35,W
0748:  MOVWF  02
074A:  RLCF   x36,W
074C:  MOVWF  03
074E:  MOVF   02,W
0750:  ADDWF  x37,F
0752:  MOVF   03,W
0754:  ADDWFC x38,F
0756:  MOVLW  23
0758:  ADDWF  x37,W
075A:  MOVWF  FE9
075C:  MOVLW  00
075E:  ADDWFC x38,W
0760:  MOVWF  FEA
0762:  MOVFF  432,FEC
0766:  MOVF   FED,F
0768:  MOVFF  431,FEF
076C:  INCF   x35,F
076E:  BTFSC  FD8.2
0770:  INCF   x36,F
0772:  BRA    0712
....................     }  
0774:  INCF   x33,F
0776:  BTFSC  FD8.2
0778:  INCF   x34,F
077A:  BRA    0704
....................   }  
....................    GLCD.x1 = 0; 
077C:  CLRF   27
....................    GLCD.x2 = 127; 
077E:  MOVLW  7F
0780:  MOVWF  29
....................    GLCD.y1 = 0; 
0782:  CLRF   28
....................    GLCD.y2 = 63;   
0784:  MOVLW  3F
0786:  MOVWF  2A
....................    GLCD.tt_update=1; 
0788:  BSF    26.2
....................    return OK; 
078A:  MOVLW  00
078C:  MOVWF  01
078E:  MOVLB  0
0790:  GOTO   0966 (RETURN)
.................... }  
....................  
.................... result glcd_pixel(int8 x, int8 y, int1 color)  
.................... {  
....................   int8  b,doc,ngang;  
....................   if(y>31){x += 128; y-= 32;};  
....................   DOC = y;  
....................   NGANG = x/16;  
....................   b = 15 - (x % 16);  
....................    
....................   if (color == 1) bit_set (GLCD.PIXEL[DOC][NGANG].word, b);  
....................   else bit_clear (GLCD.PIXEL[DOC][NGANG].word, b);  
....................   GLCD_UPDATE_COORDINATE(x,y, x, y); 
....................   return OK; 
.................... }  
.................... result GLCD_PIXEL_TEMP(int8 x, int8 y, int1 color)  
.................... {  
....................   int8  b,doc,ngang;  
....................   if(y>31){x += 128; y-= 32;};  
*
09BE:  MOVLB  4
09C0:  MOVF   x7D,W
09C2:  SUBLW  1F
09C4:  BC    09CE
09C6:  MOVLW  80
09C8:  ADDWF  x7C,F
09CA:  MOVLW  20
09CC:  SUBWF  x7D,F
....................   DOC = y;  
09CE:  MOVFF  47D,480
....................   NGANG = x/16;  
09D2:  SWAPF  x7C,W
09D4:  MOVWF  x81
09D6:  MOVLW  0F
09D8:  ANDWF  x81,F
....................   b = 15 - (x % 16);  
09DA:  MOVF   x7C,W
09DC:  ANDLW  0F
09DE:  XORLW  FF
09E0:  ADDLW  10
09E2:  MOVWF  x7F
....................    
....................   if (color == 1) bit_set (GLCD.PIXEL[DOC][NGANG].word, b);  
09E4:  DECFSZ x7E,W
09E6:  BRA    0A52
09E8:  CLRF   x83
09EA:  MOVFF  480,482
09EE:  CLRF   x85
09F0:  MOVLW  20
09F2:  MOVWF  x84
09F4:  MOVLB  0
09F6:  RCALL  0794
09F8:  MOVFF  02,03
09FC:  MOVF   01,W
09FE:  ADDLW  08
0A00:  MOVLB  4
0A02:  MOVWF  x82
0A04:  MOVLW  00
0A06:  ADDWFC 02,W
0A08:  MOVWF  x83
0A0A:  CLRF   03
0A0C:  MOVFF  481,02
0A10:  BCF    FD8.0
0A12:  RLCF   02,F
0A14:  RLCF   03,F
0A16:  MOVF   02,W
0A18:  ADDWF  x82,F
0A1A:  MOVF   03,W
0A1C:  ADDWFC x83,F
0A1E:  MOVLW  23
0A20:  ADDWF  x82,W
0A22:  MOVWF  01
0A24:  MOVLW  00
0A26:  ADDWFC x83,W
0A28:  MOVWF  03
0A2A:  MOVFF  01,FE9
0A2E:  MOVWF  FEA
0A30:  CLRF   03
0A32:  MOVLW  01
0A34:  MOVWF  02
0A36:  MOVF   x7F,W
0A38:  MOVWF  00
0A3A:  BZ    0A46
0A3C:  BCF    FD8.0
0A3E:  RLCF   02,F
0A40:  RLCF   03,F
0A42:  DECFSZ 00,F
0A44:  BRA    0A3C
0A46:  MOVF   02,W
0A48:  IORWF  FEF,F
0A4A:  MOVF   03,W
0A4C:  IORWF  FEC,W
0A4E:  MOVWF  FEF
0A50:  BRA    0AC4
....................   else bit_clear (GLCD.PIXEL[DOC][NGANG].word, b);  
0A52:  CLRF   x83
0A54:  MOVFF  480,482
0A58:  CLRF   x85
0A5A:  MOVLW  20
0A5C:  MOVWF  x84
0A5E:  MOVLB  0
0A60:  RCALL  0794
0A62:  MOVFF  02,03
0A66:  MOVF   01,W
0A68:  ADDLW  08
0A6A:  MOVLB  4
0A6C:  MOVWF  x82
0A6E:  MOVLW  00
0A70:  ADDWFC 02,W
0A72:  MOVWF  x83
0A74:  CLRF   03
0A76:  MOVFF  481,02
0A7A:  BCF    FD8.0
0A7C:  RLCF   02,F
0A7E:  RLCF   03,F
0A80:  MOVF   02,W
0A82:  ADDWF  x82,F
0A84:  MOVF   03,W
0A86:  ADDWFC x83,F
0A88:  MOVLW  23
0A8A:  ADDWF  x82,W
0A8C:  MOVWF  01
0A8E:  MOVLW  00
0A90:  ADDWFC x83,W
0A92:  MOVWF  03
0A94:  MOVFF  01,FE9
0A98:  MOVWF  FEA
0A9A:  CLRF   03
0A9C:  MOVLW  01
0A9E:  MOVWF  02
0AA0:  MOVF   x7F,W
0AA2:  MOVWF  00
0AA4:  BZ    0AB0
0AA6:  BCF    FD8.0
0AA8:  RLCF   02,F
0AAA:  RLCF   03,F
0AAC:  DECFSZ 00,F
0AAE:  BRA    0AA6
0AB0:  MOVF   02,W
0AB2:  XORLW  FF
0AB4:  MOVWF  00
0AB6:  MOVLW  FF
0AB8:  XORWF  03,F
0ABA:  MOVF   00,W
0ABC:  ANDWF  FEF,F
0ABE:  MOVF   03,W
0AC0:  ANDWF  FEC,W
0AC2:  MOVWF  FEF
....................   return OK; 
0AC4:  MOVLW  00
0AC6:  MOVWF  01
0AC8:  MOVLB  0
0ACA:  RETURN 0
.................... }  
....................  
.................... result glcd_update () 
.................... { 
....................   int8 hesox,hesox2,hesoy,doc,ngang;  
....................  // glcd_rect(GLCD.x1,GLCD.y1, GLCD.x2, GLCD.y2, 0,1);   
....................   if(GLCD.x1>GLCD.x2) {hesox=GLCD.x1; GLCD.x1=GLCD.x2, GLCD.x2= hesox;} 
*
07E2:  MOVF   27,W
07E4:  SUBWF  29,W
07E6:  BC    07F4
07E8:  MOVFF  27,430
07EC:  MOVFF  29,27
07F0:  MOVFF  430,29
....................   if(GLCD.y1>GLCD.y2) {hesoy=GLCD.y1; GLCD.y1=GLCD.y2, GLCD.y2= hesoy;} 
07F4:  MOVF   28,W
07F6:  SUBWF  2A,W
07F8:  BC    0806
07FA:  MOVFF  28,432
07FE:  MOVFF  2A,28
0802:  MOVFF  432,2A
....................   if (GLCD.tt_update)  
0806:  BTFSS  26.2
0808:  BRA    0926
....................   {  
....................       GLCD.x1 = GLCD.x1/16; GLCD.x2=GLCD.x2/16; 
080A:  SWAPF  27,F
080C:  MOVLW  0F
080E:  ANDWF  27,F
0810:  SWAPF  29,F
0812:  ANDWF  29,F
....................       for (DOC = GLCD.y1; DOC<=GLCD.y2; DOC++)  
0814:  MOVFF  28,433
0818:  MOVLB  4
081A:  MOVF   x33,W
081C:  SUBWF  2A,W
081E:  BTFSS  FD8.0
0820:  BRA    0922
....................       {  
....................          if(DOC>31)   {hesox = 8+GLCD.x1;hesox2= GLCD.x2+8; hesoy = DOC-32;} 
0822:  MOVF   x33,W
0824:  SUBLW  1F
0826:  BC    083C
0828:  MOVLW  08
082A:  ADDWF  27,W
082C:  MOVWF  x30
082E:  MOVLW  08
0830:  ADDWF  29,W
0832:  MOVWF  x31
0834:  MOVLW  20
0836:  SUBWF  x33,W
0838:  MOVWF  x32
083A:  BRA    0848
....................          else         {hesox = GLCD.x1  ;hesox2 = GLCD.x2 ; hesoy = DOC;   } 
083C:  MOVFF  27,430
0840:  MOVFF  29,431
0844:  MOVFF  433,432
....................          GLCD_COMMAND( 0x80 |hesoy);    
0848:  MOVF   x32,W
084A:  IORLW  80
084C:  MOVWF  x35
084E:  MOVWF  x36
0850:  MOVLB  0
0852:  RCALL  06C2
....................          GLCD_COMMAND( 0x80 |hesox);   
0854:  MOVLB  4
0856:  MOVF   x30,W
0858:  IORLW  80
085A:  MOVWF  x35
085C:  MOVWF  x36
085E:  MOVLB  0
0860:  RCALL  06C2
....................        
....................          for (NGANG=hesox; NGANG <=hesox2; NGANG++)  
0862:  MOVFF  430,434
0866:  MOVLB  4
0868:  MOVF   x34,W
086A:  SUBWF  x31,W
086C:  BNC   091E
....................          {  
....................             GLCD_DATA( GLCD.PIXEL[hesoy][NGANG].nbyte[1]);   // Write High Byte.  
086E:  CLRF   x83
0870:  MOVFF  432,482
0874:  CLRF   x85
0876:  MOVLW  20
0878:  MOVWF  x84
087A:  MOVLB  0
087C:  RCALL  0794
087E:  MOVFF  02,03
0882:  MOVF   01,W
0884:  ADDLW  08
0886:  MOVLB  4
0888:  MOVWF  x35
088A:  MOVLW  00
088C:  ADDWFC 02,W
088E:  MOVWF  x36
0890:  CLRF   03
0892:  MOVFF  434,02
0896:  BCF    FD8.0
0898:  RLCF   02,F
089A:  RLCF   03,F
089C:  MOVF   02,W
089E:  ADDWF  x35,F
08A0:  MOVF   03,W
08A2:  ADDWFC x36,F
08A4:  MOVLW  01
08A6:  ADDWF  x35,W
08A8:  MOVWF  01
08AA:  MOVLW  00
08AC:  ADDWFC x36,W
08AE:  MOVWF  03
08B0:  MOVF   01,W
08B2:  ADDLW  23
08B4:  MOVWF  FE9
08B6:  MOVLW  00
08B8:  ADDWFC 03,W
08BA:  MOVWF  FEA
08BC:  MOVFF  FEF,435
08C0:  MOVFF  435,438
08C4:  MOVLB  0
08C6:  RCALL  07B6
....................             GLCD_DATA( GLCD.PIXEL[hesoy][NGANG].nbyte[0]);   // Write Low Byte.  
08C8:  MOVLB  4
08CA:  CLRF   x83
08CC:  MOVFF  432,482
08D0:  CLRF   x85
08D2:  MOVLW  20
08D4:  MOVWF  x84
08D6:  MOVLB  0
08D8:  RCALL  0794
08DA:  MOVFF  02,03
08DE:  MOVF   01,W
08E0:  ADDLW  08
08E2:  MOVLB  4
08E4:  MOVWF  x35
08E6:  MOVLW  00
08E8:  ADDWFC 02,W
08EA:  MOVWF  x36
08EC:  CLRF   03
08EE:  MOVFF  434,02
08F2:  BCF    FD8.0
08F4:  RLCF   02,F
08F6:  RLCF   03,F
08F8:  MOVF   02,W
08FA:  ADDWF  x35,F
08FC:  MOVF   03,W
08FE:  ADDWFC x36,F
0900:  MOVLW  23
0902:  ADDWF  x35,W
0904:  MOVWF  FE9
0906:  MOVLW  00
0908:  ADDWFC x36,W
090A:  MOVWF  FEA
090C:  MOVFF  FEF,437
0910:  MOVFF  437,438
0914:  MOVLB  0
0916:  RCALL  07B6
0918:  MOVLB  4
091A:  INCF   x34,F
091C:  BRA    0868
....................          }  
091E:  INCF   x33,F
0920:  BRA    081A
....................        }  
....................     GLCD.tt_update = FALSE;  
0922:  BCF    26.2
0924:  MOVLB  0
....................   }   
....................   return OK; 
0926:  MOVLW  00
0928:  MOVWF  01
092A:  RETURN 0
.................... } 
....................  
.................... result GLCD_VERTICAL_LINE(unsigned int8 x, unsigned int8 y1,unsigned int8 y2, int1 color) 
.................... { 
....................    unsigned int8 i; 
....................    for(i=y1;i<=y2;i++) glcd_pixel_temp(x, i, color) ; 
*
1452:  MOVFF  469,46C
1456:  MOVLB  4
1458:  MOVF   x6C,W
145A:  SUBWF  x6A,W
145C:  BNC   1476
145E:  MOVFF  468,47C
1462:  MOVFF  46C,47D
1466:  MOVFF  46B,47E
146A:  MOVLB  0
146C:  CALL   09BE
1470:  MOVLB  4
1472:  INCF   x6C,F
1474:  BRA    1458
....................    return OK; 
1476:  MOVLW  00
1478:  MOVWF  01
147A:  MOVLB  0
147C:  RETURN 0
.................... } 
....................  
.................... result GLCD_HORIZONE_LINE(unsigned int8 x1, unsigned int8 x2,unsigned int8 y, int1 color) 
.................... { 
....................   int8 doc; 
....................   unsigned int8 i,right,left; 
....................   if(y>31){x1 += 128;x2 += 128; y-= 32;};  
*
0B80:  MOVLB  4
0B82:  MOVF   x50,W
0B84:  SUBLW  1F
0B86:  BC    0B92
0B88:  MOVLW  80
0B8A:  ADDWF  x4E,F
0B8C:  ADDWF  x4F,F
0B8E:  MOVLW  20
0B90:  SUBWF  x50,F
....................   left=x1/16; right = x2/16;DOC = y;  
0B92:  SWAPF  x4E,W
0B94:  MOVWF  x55
0B96:  MOVLW  0F
0B98:  ANDWF  x55,F
0B9A:  SWAPF  x4F,W
0B9C:  MOVWF  x54
0B9E:  MOVLW  0F
0BA0:  ANDWF  x54,F
0BA2:  MOVFF  450,452
....................    if (left==right)  
0BA6:  MOVF   x54,W
0BA8:  SUBWF  x55,W
0BAA:  BTFSS  FD8.2
0BAC:  BRA    0DAC
....................    { 
....................           if(color) 
0BAE:  MOVF   x51,F
0BB0:  BTFSC  FD8.2
0BB2:  BRA    0CAE
....................                GLCD.PIXEL[DOC][left].word= GLCD.PIXEL[DOC][left].word | (0xffff<<(15-(x2%16))) & (0xffff>>(x1%16));            
0BB4:  CLRF   x83
0BB6:  MOVFF  452,482
0BBA:  CLRF   x85
0BBC:  MOVLW  20
0BBE:  MOVWF  x84
0BC0:  MOVLB  0
0BC2:  RCALL  0794
0BC4:  MOVFF  02,03
0BC8:  MOVF   01,W
0BCA:  ADDLW  08
0BCC:  MOVLB  4
0BCE:  MOVWF  x56
0BD0:  MOVLW  00
0BD2:  ADDWFC 02,W
0BD4:  MOVWF  x57
0BD6:  CLRF   03
0BD8:  MOVFF  455,02
0BDC:  BCF    FD8.0
0BDE:  RLCF   02,F
0BE0:  RLCF   03,F
0BE2:  MOVF   02,W
0BE4:  ADDWF  x56,F
0BE6:  MOVF   03,W
0BE8:  ADDWFC x57,F
0BEA:  MOVLW  23
0BEC:  ADDWF  x56,W
0BEE:  MOVWF  01
0BF0:  MOVLW  00
0BF2:  ADDWFC x57,W
0BF4:  MOVWF  03
0BF6:  MOVFF  01,458
0BFA:  MOVWF  x59
0BFC:  CLRF   x83
0BFE:  MOVFF  452,482
0C02:  CLRF   x85
0C04:  MOVLW  20
0C06:  MOVWF  x84
0C08:  MOVLB  0
0C0A:  RCALL  0794
0C0C:  MOVFF  02,03
0C10:  MOVF   01,W
0C12:  ADDLW  08
0C14:  MOVLB  4
0C16:  MOVWF  x5A
0C18:  MOVLW  00
0C1A:  ADDWFC 02,W
0C1C:  MOVWF  x5B
0C1E:  CLRF   03
0C20:  MOVFF  455,02
0C24:  BCF    FD8.0
0C26:  RLCF   02,F
0C28:  RLCF   03,F
0C2A:  MOVF   02,W
0C2C:  ADDWF  x5A,F
0C2E:  MOVF   03,W
0C30:  ADDWFC x5B,F
0C32:  MOVLW  23
0C34:  ADDWF  x5A,W
0C36:  MOVWF  FE9
0C38:  MOVLW  00
0C3A:  ADDWFC x5B,W
0C3C:  MOVWF  FEA
0C3E:  MOVFF  FEC,45D
0C42:  MOVF   FED,F
0C44:  MOVFF  FEF,45C
0C48:  MOVF   x4F,W
0C4A:  ANDLW  0F
0C4C:  XORLW  FF
0C4E:  ADDLW  10
0C50:  MOVWF  00
0C52:  SETF   x5F
0C54:  SETF   x5E
0C56:  MOVF   00,F
0C58:  BZ    0C64
0C5A:  BCF    FD8.0
0C5C:  RLCF   x5E,F
0C5E:  RLCF   x5F,F
0C60:  DECFSZ 00,F
0C62:  BRA    0C5A
0C64:  MOVF   x4E,W
0C66:  ANDLW  0F
0C68:  MOVWF  00
0C6A:  SETF   03
0C6C:  MOVLW  FF
0C6E:  MOVWF  02
0C70:  MOVF   00,F
0C72:  BZ    0C7E
0C74:  BCF    FD8.0
0C76:  RRCF   03,F
0C78:  RRCF   02,F
0C7A:  DECFSZ 00,F
0C7C:  BRA    0C74
0C7E:  MOVF   02,W
0C80:  ANDWF  x5E,W
0C82:  MOVWF  00
0C84:  MOVF   03,W
0C86:  ANDWF  x5F,W
0C88:  MOVWF  03
0C8A:  MOVF   00,W
0C8C:  IORWF  x5C,W
0C8E:  MOVWF  00
0C90:  MOVF   03,W
0C92:  IORWF  x5D,W
0C94:  MOVWF  03
0C96:  MOVFF  00,45C
0C9A:  MOVWF  x5D
0C9C:  MOVFF  459,FEA
0CA0:  MOVFF  458,FE9
0CA4:  MOVWF  FEC
0CA6:  MOVF   FED,F
0CA8:  MOVFF  00,FEF
0CAC:  BRA    0DAA
....................           else  
....................                GLCD.PIXEL[DOC][left].word= GLCD.PIXEL[DOC][left].word & (~((0xffff<<(15-(x2%16))) & (0xffff>>(x1%16))));    
0CAE:  CLRF   x83
0CB0:  MOVFF  452,482
0CB4:  CLRF   x85
0CB6:  MOVLW  20
0CB8:  MOVWF  x84
0CBA:  MOVLB  0
0CBC:  RCALL  0794
0CBE:  MOVFF  02,03
0CC2:  MOVF   01,W
0CC4:  ADDLW  08
0CC6:  MOVLB  4
0CC8:  MOVWF  x56
0CCA:  MOVLW  00
0CCC:  ADDWFC 02,W
0CCE:  MOVWF  x57
0CD0:  CLRF   03
0CD2:  MOVFF  455,02
0CD6:  BCF    FD8.0
0CD8:  RLCF   02,F
0CDA:  RLCF   03,F
0CDC:  MOVF   02,W
0CDE:  ADDWF  x56,F
0CE0:  MOVF   03,W
0CE2:  ADDWFC x57,F
0CE4:  MOVLW  23
0CE6:  ADDWF  x56,W
0CE8:  MOVWF  01
0CEA:  MOVLW  00
0CEC:  ADDWFC x57,W
0CEE:  MOVWF  03
0CF0:  MOVFF  01,458
0CF4:  MOVWF  x59
0CF6:  CLRF   x83
0CF8:  MOVFF  452,482
0CFC:  CLRF   x85
0CFE:  MOVLW  20
0D00:  MOVWF  x84
0D02:  MOVLB  0
0D04:  RCALL  0794
0D06:  MOVFF  02,03
0D0A:  MOVF   01,W
0D0C:  ADDLW  08
0D0E:  MOVLB  4
0D10:  MOVWF  x5A
0D12:  MOVLW  00
0D14:  ADDWFC 02,W
0D16:  MOVWF  x5B
0D18:  CLRF   03
0D1A:  MOVFF  455,02
0D1E:  BCF    FD8.0
0D20:  RLCF   02,F
0D22:  RLCF   03,F
0D24:  MOVF   02,W
0D26:  ADDWF  x5A,F
0D28:  MOVF   03,W
0D2A:  ADDWFC x5B,F
0D2C:  MOVLW  23
0D2E:  ADDWF  x5A,W
0D30:  MOVWF  FE9
0D32:  MOVLW  00
0D34:  ADDWFC x5B,W
0D36:  MOVWF  FEA
0D38:  MOVFF  FEC,45D
0D3C:  MOVF   FED,F
0D3E:  MOVFF  FEF,45C
0D42:  MOVF   x4F,W
0D44:  ANDLW  0F
0D46:  XORLW  FF
0D48:  ADDLW  10
0D4A:  MOVWF  00
0D4C:  SETF   x5F
0D4E:  SETF   x5E
0D50:  MOVF   00,F
0D52:  BZ    0D5E
0D54:  BCF    FD8.0
0D56:  RLCF   x5E,F
0D58:  RLCF   x5F,F
0D5A:  DECFSZ 00,F
0D5C:  BRA    0D54
0D5E:  MOVF   x4E,W
0D60:  ANDLW  0F
0D62:  MOVWF  00
0D64:  SETF   03
0D66:  MOVLW  FF
0D68:  MOVWF  02
0D6A:  MOVF   00,F
0D6C:  BZ    0D78
0D6E:  BCF    FD8.0
0D70:  RRCF   03,F
0D72:  RRCF   02,F
0D74:  DECFSZ 00,F
0D76:  BRA    0D6E
0D78:  MOVF   02,W
0D7A:  ANDWF  x5E,W
0D7C:  MOVWF  00
0D7E:  MOVF   03,W
0D80:  ANDWF  x5F,W
0D82:  MOVWF  03
0D84:  MOVF   00,W
0D86:  CLRF   00
0D88:  DECF   00,F
0D8A:  XORWF  00,F
0D8C:  MOVLW  FF
0D8E:  XORWF  03,F
0D90:  MOVF   00,W
0D92:  ANDWF  x5C,W
0D94:  MOVWF  00
0D96:  MOVF   03,W
0D98:  ANDWF  x5D,W
0D9A:  MOVFF  459,FEA
0D9E:  MOVFF  458,FE9
0DA2:  MOVWF  FEC
0DA4:  MOVF   FED,F
0DA6:  MOVFF  00,FEF
....................    } 
0DAA:  BRA    11AE
....................    else  
....................    { 
....................           if(color) 
0DAC:  MOVF   x51,F
0DAE:  BTFSC  FD8.2
0DB0:  BRA    0FA0
....................           {    GLCD.PIXEL[DOC][right].word = GLCD.PIXEL[DOC][right].word | (0xffff<<(15-(x2%16))); 
0DB2:  CLRF   x83
0DB4:  MOVFF  452,482
0DB8:  CLRF   x85
0DBA:  MOVLW  20
0DBC:  MOVWF  x84
0DBE:  MOVLB  0
0DC0:  RCALL  0794
0DC2:  MOVFF  02,03
0DC6:  MOVF   01,W
0DC8:  ADDLW  08
0DCA:  MOVLB  4
0DCC:  MOVWF  x56
0DCE:  MOVLW  00
0DD0:  ADDWFC 02,W
0DD2:  MOVWF  x57
0DD4:  CLRF   03
0DD6:  MOVFF  454,02
0DDA:  BCF    FD8.0
0DDC:  RLCF   02,F
0DDE:  RLCF   03,F
0DE0:  MOVF   02,W
0DE2:  ADDWF  x56,F
0DE4:  MOVF   03,W
0DE6:  ADDWFC x57,F
0DE8:  MOVLW  23
0DEA:  ADDWF  x56,W
0DEC:  MOVWF  01
0DEE:  MOVLW  00
0DF0:  ADDWFC x57,W
0DF2:  MOVWF  03
0DF4:  MOVFF  01,458
0DF8:  MOVWF  x59
0DFA:  CLRF   x83
0DFC:  MOVFF  452,482
0E00:  CLRF   x85
0E02:  MOVLW  20
0E04:  MOVWF  x84
0E06:  MOVLB  0
0E08:  RCALL  0794
0E0A:  MOVFF  02,03
0E0E:  MOVF   01,W
0E10:  ADDLW  08
0E12:  MOVLB  4
0E14:  MOVWF  x5A
0E16:  MOVLW  00
0E18:  ADDWFC 02,W
0E1A:  MOVWF  x5B
0E1C:  CLRF   03
0E1E:  MOVFF  454,02
0E22:  BCF    FD8.0
0E24:  RLCF   02,F
0E26:  RLCF   03,F
0E28:  MOVF   02,W
0E2A:  ADDWF  x5A,F
0E2C:  MOVF   03,W
0E2E:  ADDWFC x5B,F
0E30:  MOVLW  23
0E32:  ADDWF  x5A,W
0E34:  MOVWF  FE9
0E36:  MOVLW  00
0E38:  ADDWFC x5B,W
0E3A:  MOVWF  FEA
0E3C:  MOVFF  FEC,45D
0E40:  MOVF   FED,F
0E42:  MOVFF  FEF,45C
0E46:  MOVF   x4F,W
0E48:  ANDLW  0F
0E4A:  XORLW  FF
0E4C:  ADDLW  10
0E4E:  MOVWF  00
0E50:  SETF   03
0E52:  MOVLW  FF
0E54:  MOVWF  02
0E56:  MOVF   00,F
0E58:  BZ    0E64
0E5A:  BCF    FD8.0
0E5C:  RLCF   02,F
0E5E:  RLCF   03,F
0E60:  DECFSZ 00,F
0E62:  BRA    0E5A
0E64:  MOVF   02,W
0E66:  IORWF  x5C,W
0E68:  MOVWF  00
0E6A:  MOVF   03,W
0E6C:  IORWF  x5D,W
0E6E:  MOVFF  459,FEA
0E72:  MOVFF  458,FE9
0E76:  MOVWF  FEC
0E78:  MOVF   FED,F
0E7A:  MOVFF  00,FEF
....................                GLCD.PIXEL[DOC][left].word = GLCD.PIXEL[DOC][left].word|(0xffff>>(x1%16)); 
0E7E:  CLRF   x83
0E80:  MOVFF  452,482
0E84:  CLRF   x85
0E86:  MOVLW  20
0E88:  MOVWF  x84
0E8A:  MOVLB  0
0E8C:  RCALL  0794
0E8E:  MOVFF  02,03
0E92:  MOVF   01,W
0E94:  ADDLW  08
0E96:  MOVLB  4
0E98:  MOVWF  x56
0E9A:  MOVLW  00
0E9C:  ADDWFC 02,W
0E9E:  MOVWF  x57
0EA0:  CLRF   03
0EA2:  MOVFF  455,02
0EA6:  BCF    FD8.0
0EA8:  RLCF   02,F
0EAA:  RLCF   03,F
0EAC:  MOVF   02,W
0EAE:  ADDWF  x56,F
0EB0:  MOVF   03,W
0EB2:  ADDWFC x57,F
0EB4:  MOVLW  23
0EB6:  ADDWF  x56,W
0EB8:  MOVWF  01
0EBA:  MOVLW  00
0EBC:  ADDWFC x57,W
0EBE:  MOVWF  03
0EC0:  MOVFF  01,458
0EC4:  MOVWF  x59
0EC6:  CLRF   x83
0EC8:  MOVFF  452,482
0ECC:  CLRF   x85
0ECE:  MOVLW  20
0ED0:  MOVWF  x84
0ED2:  MOVLB  0
0ED4:  RCALL  0794
0ED6:  MOVFF  02,03
0EDA:  MOVF   01,W
0EDC:  ADDLW  08
0EDE:  MOVLB  4
0EE0:  MOVWF  x5A
0EE2:  MOVLW  00
0EE4:  ADDWFC 02,W
0EE6:  MOVWF  x5B
0EE8:  CLRF   03
0EEA:  MOVFF  455,02
0EEE:  BCF    FD8.0
0EF0:  RLCF   02,F
0EF2:  RLCF   03,F
0EF4:  MOVF   02,W
0EF6:  ADDWF  x5A,F
0EF8:  MOVF   03,W
0EFA:  ADDWFC x5B,F
0EFC:  MOVLW  23
0EFE:  ADDWF  x5A,W
0F00:  MOVWF  FE9
0F02:  MOVLW  00
0F04:  ADDWFC x5B,W
0F06:  MOVWF  FEA
0F08:  MOVFF  FEC,45D
0F0C:  MOVF   FED,F
0F0E:  MOVFF  FEF,45C
0F12:  MOVF   x4E,W
0F14:  ANDLW  0F
0F16:  MOVWF  00
0F18:  SETF   03
0F1A:  MOVLW  FF
0F1C:  MOVWF  02
0F1E:  MOVF   00,F
0F20:  BZ    0F2C
0F22:  BCF    FD8.0
0F24:  RRCF   03,F
0F26:  RRCF   02,F
0F28:  DECFSZ 00,F
0F2A:  BRA    0F22
0F2C:  MOVF   02,W
0F2E:  IORWF  x5C,W
0F30:  MOVWF  00
0F32:  MOVF   03,W
0F34:  IORWF  x5D,W
0F36:  MOVFF  459,FEA
0F3A:  MOVFF  458,FE9
0F3E:  MOVWF  FEC
0F40:  MOVF   FED,F
0F42:  MOVFF  00,FEF
....................                for(i = left + 1; i < right; i++) GLCD.PIXEL[DOC][i].word=0xffff; 
0F46:  MOVLW  01
0F48:  ADDWF  x55,W
0F4A:  MOVWF  x53
0F4C:  MOVF   x54,W
0F4E:  SUBWF  x53,W
0F50:  BC    0F9E
0F52:  CLRF   x83
0F54:  MOVFF  452,482
0F58:  CLRF   x85
0F5A:  MOVLW  20
0F5C:  MOVWF  x84
0F5E:  MOVLB  0
0F60:  RCALL  0794
0F62:  MOVFF  02,03
0F66:  MOVF   01,W
0F68:  ADDLW  08
0F6A:  MOVLB  4
0F6C:  MOVWF  x56
0F6E:  MOVLW  00
0F70:  ADDWFC 02,W
0F72:  MOVWF  x57
0F74:  CLRF   03
0F76:  MOVFF  453,02
0F7A:  BCF    FD8.0
0F7C:  RLCF   02,F
0F7E:  RLCF   03,F
0F80:  MOVF   02,W
0F82:  ADDWF  x56,F
0F84:  MOVF   03,W
0F86:  ADDWFC x57,F
0F88:  MOVLW  23
0F8A:  ADDWF  x56,W
0F8C:  MOVWF  FE9
0F8E:  MOVLW  00
0F90:  ADDWFC x57,W
0F92:  MOVWF  FEA
0F94:  SETF   FEC
0F96:  MOVF   FED,F
0F98:  SETF   FEF
0F9A:  INCF   x53,F
0F9C:  BRA    0F4C
....................           } 
0F9E:  BRA    11AE
....................           else  
....................           {     
....................                GLCD.PIXEL[DOC][right].word = GLCD.PIXEL[DOC][right].word & (~(0xffff<<(15-(x2%16)))); 
0FA0:  CLRF   x83
0FA2:  MOVFF  452,482
0FA6:  CLRF   x85
0FA8:  MOVLW  20
0FAA:  MOVWF  x84
0FAC:  MOVLB  0
0FAE:  CALL   0794
0FB2:  MOVFF  02,03
0FB6:  MOVF   01,W
0FB8:  ADDLW  08
0FBA:  MOVLB  4
0FBC:  MOVWF  x56
0FBE:  MOVLW  00
0FC0:  ADDWFC 02,W
0FC2:  MOVWF  x57
0FC4:  CLRF   03
0FC6:  MOVFF  454,02
0FCA:  BCF    FD8.0
0FCC:  RLCF   02,F
0FCE:  RLCF   03,F
0FD0:  MOVF   02,W
0FD2:  ADDWF  x56,F
0FD4:  MOVF   03,W
0FD6:  ADDWFC x57,F
0FD8:  MOVLW  23
0FDA:  ADDWF  x56,W
0FDC:  MOVWF  01
0FDE:  MOVLW  00
0FE0:  ADDWFC x57,W
0FE2:  MOVWF  03
0FE4:  MOVFF  01,458
0FE8:  MOVWF  x59
0FEA:  CLRF   x83
0FEC:  MOVFF  452,482
0FF0:  CLRF   x85
0FF2:  MOVLW  20
0FF4:  MOVWF  x84
0FF6:  MOVLB  0
0FF8:  CALL   0794
0FFC:  MOVFF  02,03
1000:  MOVF   01,W
1002:  ADDLW  08
1004:  MOVLB  4
1006:  MOVWF  x5A
1008:  MOVLW  00
100A:  ADDWFC 02,W
100C:  MOVWF  x5B
100E:  CLRF   03
1010:  MOVFF  454,02
1014:  BCF    FD8.0
1016:  RLCF   02,F
1018:  RLCF   03,F
101A:  MOVF   02,W
101C:  ADDWF  x5A,F
101E:  MOVF   03,W
1020:  ADDWFC x5B,F
1022:  MOVLW  23
1024:  ADDWF  x5A,W
1026:  MOVWF  FE9
1028:  MOVLW  00
102A:  ADDWFC x5B,W
102C:  MOVWF  FEA
102E:  MOVFF  FEC,45D
1032:  MOVF   FED,F
1034:  MOVFF  FEF,45C
1038:  MOVF   x4F,W
103A:  ANDLW  0F
103C:  XORLW  FF
103E:  ADDLW  10
1040:  MOVWF  00
1042:  SETF   03
1044:  MOVLW  FF
1046:  MOVWF  02
1048:  MOVF   00,F
104A:  BZ    1056
104C:  BCF    FD8.0
104E:  RLCF   02,F
1050:  RLCF   03,F
1052:  DECFSZ 00,F
1054:  BRA    104C
1056:  MOVF   02,W
1058:  CLRF   00
105A:  DECF   00,F
105C:  XORWF  00,F
105E:  MOVLW  FF
1060:  XORWF  03,F
1062:  MOVF   00,W
1064:  ANDWF  x5C,W
1066:  MOVWF  00
1068:  MOVF   03,W
106A:  ANDWF  x5D,W
106C:  MOVFF  459,FEA
1070:  MOVFF  458,FE9
1074:  MOVWF  FEC
1076:  MOVF   FED,F
1078:  MOVFF  00,FEF
....................                GLCD.PIXEL[DOC][left].word = GLCD.PIXEL[DOC][left].word& (~(0xffff>>(x1%16))); 
107C:  CLRF   x83
107E:  MOVFF  452,482
1082:  CLRF   x85
1084:  MOVLW  20
1086:  MOVWF  x84
1088:  MOVLB  0
108A:  CALL   0794
108E:  MOVFF  02,03
1092:  MOVF   01,W
1094:  ADDLW  08
1096:  MOVLB  4
1098:  MOVWF  x56
109A:  MOVLW  00
109C:  ADDWFC 02,W
109E:  MOVWF  x57
10A0:  CLRF   03
10A2:  MOVFF  455,02
10A6:  BCF    FD8.0
10A8:  RLCF   02,F
10AA:  RLCF   03,F
10AC:  MOVF   02,W
10AE:  ADDWF  x56,F
10B0:  MOVF   03,W
10B2:  ADDWFC x57,F
10B4:  MOVLW  23
10B6:  ADDWF  x56,W
10B8:  MOVWF  01
10BA:  MOVLW  00
10BC:  ADDWFC x57,W
10BE:  MOVWF  03
10C0:  MOVFF  01,458
10C4:  MOVWF  x59
10C6:  CLRF   x83
10C8:  MOVFF  452,482
10CC:  CLRF   x85
10CE:  MOVLW  20
10D0:  MOVWF  x84
10D2:  MOVLB  0
10D4:  CALL   0794
10D8:  MOVFF  02,03
10DC:  MOVF   01,W
10DE:  ADDLW  08
10E0:  MOVLB  4
10E2:  MOVWF  x5A
10E4:  MOVLW  00
10E6:  ADDWFC 02,W
10E8:  MOVWF  x5B
10EA:  CLRF   03
10EC:  MOVFF  455,02
10F0:  BCF    FD8.0
10F2:  RLCF   02,F
10F4:  RLCF   03,F
10F6:  MOVF   02,W
10F8:  ADDWF  x5A,F
10FA:  MOVF   03,W
10FC:  ADDWFC x5B,F
10FE:  MOVLW  23
1100:  ADDWF  x5A,W
1102:  MOVWF  FE9
1104:  MOVLW  00
1106:  ADDWFC x5B,W
1108:  MOVWF  FEA
110A:  MOVFF  FEC,45D
110E:  MOVF   FED,F
1110:  MOVFF  FEF,45C
1114:  MOVF   x4E,W
1116:  ANDLW  0F
1118:  MOVWF  00
111A:  SETF   03
111C:  MOVLW  FF
111E:  MOVWF  02
1120:  MOVF   00,F
1122:  BZ    112E
1124:  BCF    FD8.0
1126:  RRCF   03,F
1128:  RRCF   02,F
112A:  DECFSZ 00,F
112C:  BRA    1124
112E:  MOVF   02,W
1130:  CLRF   00
1132:  DECF   00,F
1134:  XORWF  00,F
1136:  MOVLW  FF
1138:  XORWF  03,F
113A:  MOVF   00,W
113C:  ANDWF  x5C,W
113E:  MOVWF  00
1140:  MOVF   03,W
1142:  ANDWF  x5D,W
1144:  MOVFF  459,FEA
1148:  MOVFF  458,FE9
114C:  MOVWF  FEC
114E:  MOVF   FED,F
1150:  MOVFF  00,FEF
....................                for(i = left + 1; i < right; i++) GLCD.PIXEL[DOC][i].word=0; 
1154:  MOVLW  01
1156:  ADDWF  x55,W
1158:  MOVWF  x53
115A:  MOVF   x54,W
115C:  SUBWF  x53,W
115E:  BC    11AE
1160:  CLRF   x83
1162:  MOVFF  452,482
1166:  CLRF   x85
1168:  MOVLW  20
116A:  MOVWF  x84
116C:  MOVLB  0
116E:  CALL   0794
1172:  MOVFF  02,03
1176:  MOVF   01,W
1178:  ADDLW  08
117A:  MOVLB  4
117C:  MOVWF  x56
117E:  MOVLW  00
1180:  ADDWFC 02,W
1182:  MOVWF  x57
1184:  CLRF   03
1186:  MOVFF  453,02
118A:  BCF    FD8.0
118C:  RLCF   02,F
118E:  RLCF   03,F
1190:  MOVF   02,W
1192:  ADDWF  x56,F
1194:  MOVF   03,W
1196:  ADDWFC x57,F
1198:  MOVLW  23
119A:  ADDWF  x56,W
119C:  MOVWF  FE9
119E:  MOVLW  00
11A0:  ADDWFC x57,W
11A2:  MOVWF  FEA
11A4:  CLRF   FEC
11A6:  MOVF   FED,F
11A8:  CLRF   FEF
11AA:  INCF   x53,F
11AC:  BRA    115A
....................           }  
....................    } 
....................    return OK; 
11AE:  MOVLW  00
11B0:  MOVWF  01
11B2:  MOVLB  0
11B4:  RETURN 0
.................... } 
....................  
.................... result glcd_text_setup(unsigned int16 x, unsigned int16 y,int8 size, int8 color,int1 overlay) 
.................... { 
....................       GLCD.mau = color; 
*
1F98:  BCF    26.0
1F9A:  MOVLB  4
1F9C:  BTFSC  x35.0
1F9E:  BSF    26.0
....................       GLCD.size = size; 
1FA0:  MOVFF  434,25
....................       GLCD.x    = x; 
1FA4:  MOVFF  430,23
....................       GLCD.y    =y; 
1FA8:  MOVFF  432,24
....................       GLCD.tt_text=0; 
1FAC:  BCF    26.1
....................       GLCD.overlay=overlay; 
1FAE:  BCF    26.3
1FB0:  BTFSC  x36.0
1FB2:  BSF    26.3
....................       return OK; 
1FB4:  MOVLW  00
1FB6:  MOVWF  01
1FB8:  MOVLB  0
1FBA:  RETURN 0
.................... } 
....................  
.................... result glcd_text( char t) 
.................... { 
....................       static unsigned int8 x1,x2,y1,y2; 
....................       unsigned int8 j, k, l, m;                       
....................       unsigned int8 pixelData[5]; 
....................       if(GLCD.overlay) 
1FBC:  BTFSS  26.3
1FBE:  BRA    1FFC
....................       { 
....................             glcd_rect(GLCD.x,GLCD.y,GLCD.x+6*GLCD.size,GLCD.y+7*GLCD.size,1,!GLCD.mau); 
1FC0:  MOVF   25,W
1FC2:  MULLW  06
1FC4:  MOVF   FF3,W
1FC6:  ADDWF  23,W
1FC8:  MOVLB  4
1FCA:  MOVWF  x40
1FCC:  MOVF   25,W
1FCE:  MULLW  07
1FD0:  MOVF   FF3,W
1FD2:  ADDWF  24,W
1FD4:  MOVWF  x41
1FD6:  MOVLW  00
1FD8:  BTFSS  26.0
1FDA:  MOVLW  01
1FDC:  MOVWF  x42
1FDE:  MOVFF  23,443
1FE2:  MOVFF  24,444
1FE6:  MOVFF  440,445
1FEA:  MOVFF  441,446
1FEE:  MOVLW  01
1FF0:  MOVWF  x47
1FF2:  MOVFF  442,448
1FF6:  MOVLB  0
1FF8:  CALL   147E
....................       } 
....................       if(GLCD.tt_text==0) 
1FFC:  BTFSC  26.1
1FFE:  BRA    200A
....................       { 
....................           x1=GLCD.x; 
2000:  MOVFF  23,42B
....................           y1=GLCD.y; 
2004:  MOVFF  24,42D
....................           GLCD.tt_text=1; 
2008:  BSF    26.1
....................       } 
....................       if(t < 'S') 
200A:  MOVLB  4
200C:  MOVF   x36,W
200E:  SUBLW  52
2010:  BNC   2054
....................          memcpy(pixelData, GLCD_FONT[t - ' '], 5); 
2012:  MOVLW  20
2014:  SUBWF  x36,W
2016:  MULLW  05
2018:  MOVF   FF3,W
201A:  CLRF   03
201C:  MOVWF  x40
201E:  MOVLW  04
2020:  MOVWF  FEA
2022:  MOVLW  3B
2024:  MOVWF  FE9
2026:  CLRF   x44
2028:  MOVFF  440,443
202C:  MOVFF  FF2,441
2030:  BCF    FF2.7
2032:  MOVLW  05
2034:  MOVWF  01
2036:  CLRF   FF7
2038:  MOVF   x40,W
203A:  MOVLB  0
203C:  CALL   0004
2040:  TBLRD*-
2042:  TBLRD*+
2044:  MOVFF  FF5,FEE
2048:  DECFSZ 01,F
204A:  BRA    2042
204C:  MOVLB  4
204E:  BTFSC  x41.7
2050:  BSF    FF2.7
2052:  BRA    20A6
....................       else if(t <= '~')  
2054:  MOVF   x36,W
2056:  SUBLW  7E
2058:  BNC   209C
....................          memcpy(pixelData, GLCD_FONT2[t - 'S'], 5); 
205A:  MOVLW  53
205C:  SUBWF  x36,W
205E:  MULLW  05
2060:  MOVF   FF3,W
2062:  CLRF   03
2064:  MOVWF  x40
2066:  MOVLW  04
2068:  MOVWF  FEA
206A:  MOVLW  3B
206C:  MOVWF  FE9
206E:  CLRF   x44
2070:  MOVFF  440,443
2074:  MOVFF  FF2,441
2078:  BCF    FF2.7
207A:  MOVLW  05
207C:  MOVWF  01
207E:  CLRF   FF7
2080:  MOVF   x40,W
2082:  MOVLB  0
2084:  CALL   0114
2088:  TBLRD*-
208A:  TBLRD*+
208C:  MOVFF  FF5,FEE
2090:  DECFSZ 01,F
2092:  BRA    208A
2094:  MOVLB  4
2096:  BTFSC  x41.7
2098:  BSF    FF2.7
209A:  BRA    20A6
....................       else 
....................          memcpy(pixelData, GLCD_FONT[0], 5);    
209C:  CLRF   x3B
209E:  CLRF   x3C
20A0:  CLRF   x3D
20A2:  CLRF   x3E
20A4:  CLRF   x3F
....................       if(GLCD.x+5*GLCD.size >= GLCD_WIDTH)          
20A6:  MOVF   25,W
20A8:  MULLW  05
20AA:  MOVF   FF3,W
20AC:  ADDWF  23,W
20AE:  SUBLW  7F
20B0:  BC    20BE
....................       { 
....................          GLCD.x = 0;                            
20B2:  CLRF   23
....................          GLCD.y += 7*GLCD.size + 1;                  
20B4:  MOVF   25,W
20B6:  MULLW  07
20B8:  MOVF   FF3,W
20BA:  ADDLW  01
20BC:  ADDWF  24,F
....................       } 
....................       for(j=0; j<5; ++j, GLCD.x+=GLCD.size)          
20BE:  CLRF   x37
20C0:  MOVF   x37,W
20C2:  SUBLW  04
20C4:  BNC   2140
....................       { 
....................          for(k=0; k < 7; ++k)              
20C6:  CLRF   x38
20C8:  MOVF   x38,W
20CA:  SUBLW  06
20CC:  BNC   2138
....................          { 
....................             if(bit_test(pixelData[j], k))  
20CE:  CLRF   03
20D0:  MOVF   x37,W
20D2:  ADDLW  3B
20D4:  MOVWF  FE9
20D6:  MOVLW  04
20D8:  ADDWFC 03,W
20DA:  MOVWF  FEA
20DC:  MOVFF  FEF,440
20E0:  MOVFF  440,00
20E4:  MOVF   x38,W
20E6:  MOVWF  01
20E8:  BZ    20F2
20EA:  BCF    FD8.0
20EC:  RRCF   00,F
20EE:  DECFSZ 01,F
20F0:  BRA    20EA
20F2:  BTFSS  00.0
20F4:  BRA    2134
....................             { 
....................                for(l=0; l < GLCD.size; ++l)        
20F6:  CLRF   x39
20F8:  MOVF   25,W
20FA:  SUBWF  x39,W
20FC:  BC    2134
....................                     GLCD_horizone_line(GLCD.x, GLCD.x+GLCD.size-1,GLCD.y+k*GLCD.size+l,GLCD.mau);    
20FE:  MOVF   25,W
2100:  ADDWF  23,W
2102:  ADDLW  FF
2104:  MOVWF  x40
2106:  MOVF   x38,W
2108:  MULWF  25
210A:  MOVF   FF3,W
210C:  ADDWF  24,W
210E:  ADDWF  x39,W
2110:  MOVWF  x41
2112:  MOVLW  00
2114:  BTFSC  26.0
2116:  MOVLW  01
2118:  MOVWF  x42
211A:  MOVFF  23,44E
211E:  MOVFF  440,44F
2122:  MOVFF  441,450
2126:  MOVWF  x51
2128:  MOVLB  0
212A:  CALL   0B80
212E:  MOVLB  4
2130:  INCF   x39,F
2132:  BRA    20F8
....................             } 
2134:  INCF   x38,F
2136:  BRA    20C8
....................          } 
2138:  INCF   x37,F
213A:  MOVF   25,W
213C:  ADDWF  23,F
213E:  BRA    20C0
....................       } 
....................       x2 = GLCD.x; 
2140:  MOVFF  23,42C
....................       GLCD.x+=GLCD.size; 
2144:  MOVF   25,W
2146:  ADDWF  23,F
....................       y2= GLCD.y + 7*GLCD.size; 
2148:  MOVF   25,W
214A:  MULLW  07
214C:  MOVF   FF3,W
214E:  ADDWF  24,W
2150:  MOVWF  x2E
....................       GLCD_UPDATE_COORDINATE(x1,y1, x2,y2); 
2152:  MOVFF  42B,47C
2156:  MOVFF  42D,47D
215A:  MOVFF  42C,47E
215E:  MOVFF  42E,47F
2162:  MOVLB  0
2164:  CALL   0974
....................       return OK; 
2168:  MOVLW  00
216A:  MOVWF  01
216C:  RETURN 0
....................  } 
....................   
.................... result glcd_spkt_logo_raw(int x)  
*
0ACC:  MOVLB  4
0ACE:  CLRF   x31
0AD0:  CLRF   x32
0AD2:  CLRF   x33
0AD4:  CLRF   x34
0AD6:  CLRF   x36
0AD8:  CLRF   x35
.................... {  
....................    unsigned int8 i=0, j=0, k=0,y=0;  
....................    unsigned int16 count=0;  
....................    GLCD_UPDATE_COORDINATE(x,0, x+64,63); 
0ADA:  MOVLW  40
0ADC:  ADDWF  x30,W
0ADE:  MOVWF  x37
0AE0:  MOVFF  430,47C
0AE4:  CLRF   x7D
0AE6:  MOVWF  x7E
0AE8:  MOVLW  3F
0AEA:  MOVWF  x7F
0AEC:  MOVLB  0
0AEE:  RCALL  0974
....................    for(j=0;j<64;j++)  
0AF0:  MOVLB  4
0AF2:  CLRF   x32
0AF4:  MOVF   x32,W
0AF6:  SUBLW  3F
0AF8:  BNC   0B76
....................       {     
....................          for(;i<64;)  
0AFA:  MOVF   x31,W
0AFC:  SUBLW  3F
0AFE:  BNC   0B70
....................          {  
....................             for(k=8;k>0;k--) 
0B00:  MOVLW  08
0B02:  MOVWF  x33
0B04:  MOVF   x33,F
0B06:  BZ    0B68
....................             { 
....................                glcd_pixel_temp(i+x,j+y,bit_test(GLCD_Logo_DHSPKTTP[count],(k-1)));  
0B08:  MOVF   x30,W
0B0A:  ADDWF  x31,W
0B0C:  MOVWF  x37
0B0E:  MOVF   x34,W
0B10:  ADDWF  x32,W
0B12:  MOVWF  x38
0B14:  MOVFF  436,03
0B18:  MOVF   x35,W
0B1A:  MOVFF  FF2,439
0B1E:  BCF    FF2.7
0B20:  MOVFF  436,FF7
0B24:  MOVLB  0
0B26:  CALL   0200
0B2A:  MOVLB  4
0B2C:  BTFSC  x39.7
0B2E:  BSF    FF2.7
0B30:  MOVWF  x39
0B32:  MOVLW  01
0B34:  SUBWF  x33,W
0B36:  MOVWF  x3A
0B38:  MOVFF  439,00
0B3C:  MOVF   x3A,W
0B3E:  MOVWF  01
0B40:  BZ    0B4A
0B42:  BCF    FD8.0
0B44:  RRCF   00,F
0B46:  DECFSZ 01,F
0B48:  BRA    0B42
0B4A:  MOVLW  00
0B4C:  BTFSC  00.0
0B4E:  MOVLW  01
0B50:  MOVWF  x39
0B52:  MOVFF  437,47C
0B56:  MOVFF  438,47D
0B5A:  MOVWF  x7E
0B5C:  MOVLB  0
0B5E:  RCALL  09BE
....................                i++;  
0B60:  MOVLB  4
0B62:  INCF   x31,F
0B64:  DECF   x33,F
0B66:  BRA    0B04
....................             }  
....................             count++;  
0B68:  INCF   x35,F
0B6A:  BTFSC  FD8.2
0B6C:  INCF   x36,F
0B6E:  BRA    0AFA
....................          }  
....................       i=0;  
0B70:  CLRF   x31
0B72:  INCF   x32,F
0B74:  BRA    0AF4
....................       }  
....................       return OK; 
0B76:  MOVLW  00
0B78:  MOVWF  01
0B7A:  MOVLB  0
0B7C:  GOTO   2310 (RETURN)
.................... }  
....................  
.................... result glcd_line(unsigned int8 x1, unsigned int8 y1, unsigned int8 x2, unsigned int8 y2, int1 color) 
*
1610:  MOVLW  01
1612:  MOVLB  4
1614:  MOVWF  x71
1616:  MOVWF  x72
1618:  CLRF   x77
.................... { 
....................    unsigned int16        dy, dx; 
....................    signed int8  addx=1, addy=1; 
....................    signed int16 P, diff; 
....................    unsigned int8 i=0,xt1,xt2,yt1,yt2; 
....................    dx = abs((signed int8)(x2 - x1)); 
161A:  MOVF   x68,W
161C:  SUBWF  x6A,W
161E:  MOVWF  x7C
1620:  MOVF   x7C,W
1622:  BTFSS  x7C.7
1624:  BRA    162C
1626:  MOVLW  00
1628:  BSF    FD8.0
162A:  SUBFWB x7C,W
162C:  CLRF   03
162E:  MOVWF  x6F
1630:  MOVFF  03,470
....................    dy = abs((signed int8)(y2 - y1)); 
1634:  MOVF   x69,W
1636:  SUBWF  x6B,W
1638:  MOVWF  x7C
163A:  MOVF   x7C,W
163C:  BTFSS  x7C.7
163E:  BRA    1646
1640:  MOVLW  00
1642:  BSF    FD8.0
1644:  SUBFWB x7C,W
1646:  CLRF   03
1648:  MOVWF  x6D
164A:  MOVFF  03,46E
....................    xt1=x1; xt2=x2; 
164E:  MOVFF  468,478
1652:  MOVFF  46A,479
....................    yt1=y1, yt2=y2; 
1656:  MOVFF  469,47A
165A:  MOVFF  46B,47B
....................    if(x1 > x2) 
165E:  MOVF   x68,W
1660:  SUBWF  x6A,W
1662:  BC    166E
....................    { 
....................       addx = -1; 
1664:  SETF   x71
....................       xt2=x1; 
1666:  MOVFF  468,479
....................       xt1=x2; 
166A:  MOVFF  46A,478
....................    } 
....................    if(y1 > y2) 
166E:  MOVF   x69,W
1670:  SUBWF  x6B,W
1672:  BC    167E
....................    { 
....................       addy = -1; 
1674:  SETF   x72
....................       yt2=y1; 
1676:  MOVFF  469,47B
....................       yt1=y2; 
167A:  MOVFF  46B,47A
....................    } 
....................    GLCD_UPDATE_COORDINATE(xt1,yt1, xt2,yt2); 
167E:  MOVFF  478,47C
1682:  MOVFF  47A,47D
1686:  MOVFF  479,47E
168A:  MOVFF  47B,47F
168E:  MOVLB  0
1690:  CALL   0974
....................    if(dx >= dy) 
1694:  MOVLB  4
1696:  MOVF   x6E,W
1698:  SUBWF  x70,W
169A:  BNC   1712
169C:  BNZ   16A4
169E:  MOVF   x6D,W
16A0:  SUBWF  x6F,W
16A2:  BNC   1712
....................    { 
....................       dy *= 2; 
16A4:  BCF    FD8.0
16A6:  RLCF   x6D,F
16A8:  RLCF   x6E,F
....................       P = dy - dx; 
16AA:  MOVF   x6F,W
16AC:  SUBWF  x6D,W
16AE:  MOVWF  00
16B0:  MOVF   x70,W
16B2:  SUBWFB x6E,W
16B4:  MOVFF  00,473
16B8:  MOVWF  x74
....................       diff = P - dx; 
16BA:  MOVF   x6F,W
16BC:  SUBWF  x73,W
16BE:  MOVWF  x75
16C0:  MOVF   x70,W
16C2:  SUBWFB x74,W
16C4:  MOVWF  x76
....................  
....................       for(; i<=dx; ++i) 
16C6:  MOVF   x70,F
16C8:  BNZ   16D0
16CA:  MOVF   x77,W
16CC:  SUBWF  x6F,W
16CE:  BNC   1710
....................       { 
....................          glcd_pixel_temp(x1, y1, color); 
16D0:  MOVFF  468,47C
16D4:  MOVFF  469,47D
16D8:  MOVFF  46C,47E
16DC:  MOVLB  0
16DE:  CALL   09BE
....................  
....................          if(P < 0) 
16E2:  MOVLB  4
16E4:  BTFSS  x74.7
16E6:  BRA    16F8
....................          { 
....................             P  += dy; 
16E8:  MOVF   x6D,W
16EA:  ADDWF  x73,F
16EC:  MOVF   x6E,W
16EE:  ADDWFC x74,F
....................             x1 += addx; 
16F0:  MOVF   x71,W
16F2:  ADDWF  x68,W
16F4:  MOVWF  x68
....................          } 
16F6:  BRA    170C
....................          else 
....................          { 
....................             P  += diff; 
16F8:  MOVF   x75,W
16FA:  ADDWF  x73,F
16FC:  MOVF   x76,W
16FE:  ADDWFC x74,F
....................             x1 += addx; 
1700:  MOVF   x71,W
1702:  ADDWF  x68,W
1704:  MOVWF  x68
....................             y1 += addy; 
1706:  MOVF   x72,W
1708:  ADDWF  x69,W
170A:  MOVWF  x69
....................          } 
170C:  INCF   x77,F
170E:  BRA    16C6
....................       } 
....................    } 
1710:  BRA    177E
....................    else 
....................    { 
....................       dx *= 2; 
1712:  BCF    FD8.0
1714:  RLCF   x6F,F
1716:  RLCF   x70,F
....................       P = dx - dy; 
1718:  MOVF   x6D,W
171A:  SUBWF  x6F,W
171C:  MOVWF  00
171E:  MOVF   x6E,W
1720:  SUBWFB x70,W
1722:  MOVFF  00,473
1726:  MOVWF  x74
....................       diff = P - dy; 
1728:  MOVF   x6D,W
172A:  SUBWF  x73,W
172C:  MOVWF  x75
172E:  MOVF   x6E,W
1730:  SUBWFB x74,W
1732:  MOVWF  x76
....................  
....................       for(; i<=dy; ++i) 
1734:  MOVF   x6E,F
1736:  BNZ   173E
1738:  MOVF   x77,W
173A:  SUBWF  x6D,W
173C:  BNC   177E
....................       { 
....................          glcd_pixel_temp(x1, y1, color); 
173E:  MOVFF  468,47C
1742:  MOVFF  469,47D
1746:  MOVFF  46C,47E
174A:  MOVLB  0
174C:  CALL   09BE
....................  
....................          if(P < 0) 
1750:  MOVLB  4
1752:  BTFSS  x74.7
1754:  BRA    1766
....................          { 
....................             P  += dx; 
1756:  MOVF   x6F,W
1758:  ADDWF  x73,F
175A:  MOVF   x70,W
175C:  ADDWFC x74,F
....................             y1 += addy; 
175E:  MOVF   x72,W
1760:  ADDWF  x69,W
1762:  MOVWF  x69
....................          } 
1764:  BRA    177A
....................          else 
....................          { 
....................             P  += diff; 
1766:  MOVF   x75,W
1768:  ADDWF  x73,F
176A:  MOVF   x76,W
176C:  ADDWFC x74,F
....................             x1 += addx; 
176E:  MOVF   x71,W
1770:  ADDWF  x68,W
1772:  MOVWF  x68
....................             y1 += addy; 
1774:  MOVF   x72,W
1776:  ADDWF  x69,W
1778:  MOVWF  x69
....................          } 
177A:  INCF   x77,F
177C:  BRA    1734
....................       } 
....................    } 
....................    return OK; 
177E:  MOVLW  00
1780:  MOVWF  01
1782:  MOVLB  0
1784:  RETURN 0
.................... } 
....................  
.................... result glcd_rect(unsigned int8 x1, unsigned int8 y1, unsigned int8 x2, unsigned int8 y2, int1 fill, int1 color) 
.................... { 
....................       unsigned int8  xmin, xmax, ymin, ymax,i; 
....................       xmin = x1; 
*
147E:  MOVFF  443,449
....................       xmax = x2; 
1482:  MOVFF  445,44A
....................       ymin = y1; 
1486:  MOVFF  444,44B
....................       ymax = y2; 
148A:  MOVFF  446,44C
....................       if(x1 > x2)                             
148E:  MOVLB  4
1490:  MOVF   x43,W
1492:  SUBWF  x45,W
1494:  BC    149E
....................       { 
....................          xmin = x2; 
1496:  MOVFF  445,449
....................          xmax = x1; 
149A:  MOVFF  443,44A
....................       } 
....................       if(y1 > y2)                            
149E:  MOVF   x44,W
14A0:  SUBWF  x46,W
14A2:  BC    14AC
....................       { 
....................          ymin = y2; 
14A4:  MOVFF  446,44B
....................          ymax = y1; 
14A8:  MOVFF  444,44C
....................       } 
....................       if(fill) 
14AC:  MOVF   x47,F
14AE:  BZ    14D8
....................       { 
....................          for(i=ymin; i <= ymax; i++) 
14B0:  MOVFF  44B,44D
14B4:  MOVF   x4D,W
14B6:  SUBWF  x4C,W
14B8:  BNC   14D6
....................             glcd_horizone_line(xmin, xmax,i, color); 
14BA:  MOVFF  449,44E
14BE:  MOVFF  44A,44F
14C2:  MOVFF  44D,450
14C6:  MOVFF  448,451
14CA:  MOVLB  0
14CC:  CALL   0B80
14D0:  MOVLB  4
14D2:  INCF   x4D,F
14D4:  BRA    14B4
....................       } 
14D6:  BRA    1528
....................       else 
....................       { 
....................          glcd_vertical_line(xmin, ymin,ymax, color); 
14D8:  MOVFF  449,468
14DC:  MOVFF  44B,469
14E0:  MOVFF  44C,46A
14E4:  MOVFF  448,46B
14E8:  MOVLB  0
14EA:  RCALL  1452
....................          glcd_vertical_line(xmax, ymin,ymax, color); 
14EC:  MOVFF  44A,468
14F0:  MOVFF  44B,469
14F4:  MOVFF  44C,46A
14F8:  MOVFF  448,46B
14FC:  RCALL  1452
....................          glcd_horizone_line(x1, x2, y1, color);      // Draw the 4 sides 
14FE:  MOVFF  443,44E
1502:  MOVFF  445,44F
1506:  MOVFF  444,450
150A:  MOVFF  448,451
150E:  CALL   0B80
....................          glcd_horizone_line(x1, x2, y2, color); 
1512:  MOVFF  443,44E
1516:  MOVFF  445,44F
151A:  MOVFF  446,450
151E:  MOVFF  448,451
1522:  CALL   0B80
1526:  MOVLB  4
....................       } 
....................       GLCD_UPDATE_COORDINATE(xmin,ymin, xmax,ymax); 
1528:  MOVFF  449,47C
152C:  MOVFF  44B,47D
1530:  MOVFF  44A,47E
1534:  MOVFF  44C,47F
1538:  MOVLB  0
153A:  CALL   0974
....................       return OK; 
153E:  MOVLW  00
1540:  MOVWF  01
1542:  RETURN 0
.................... } 
....................  
.................... result glcd_bar(unsigned int8 x1, unsigned int8 y1, unsigned int8 x2, unsigned int8 y2, unsigned int8 width, int1 color) 
*
1C7C:  MOVLW  01
1C7E:  MOVLB  4
1C80:  MOVWF  x3B
1C82:  MOVWF  x3C
1C84:  CLRF   x46
.................... { 
....................    unsigned int8         half_width; 
....................    signed int16 dy, dx; 
....................    signed int8  addx=1, addy=1, j; 
....................    signed int16 P, diff, c1, c2; 
....................    unsigned int8 i=0,xt1,yt1,xt2,yt2; 
....................    dx = abs((signed int8)(x2 - x1)); 
1C86:  MOVF   x30,W
1C88:  SUBWF  x32,W
1C8A:  MOVWF  x4F
1C8C:  MOVF   x4F,W
1C8E:  BTFSS  x4F.7
1C90:  BRA    1C98
1C92:  MOVLW  00
1C94:  BSF    FD8.0
1C96:  SUBFWB x4F,W
1C98:  CLRF   03
1C9A:  BTFSC  FE8.7
1C9C:  DECF   03,F
1C9E:  MOVWF  x39
1CA0:  MOVFF  03,43A
....................    dy = abs((signed int8)(y2 - y1)); 
1CA4:  MOVF   x31,W
1CA6:  SUBWF  x33,W
1CA8:  MOVWF  x4F
1CAA:  MOVF   x4F,W
1CAC:  BTFSS  x4F.7
1CAE:  BRA    1CB6
1CB0:  MOVLW  00
1CB2:  BSF    FD8.0
1CB4:  SUBFWB x4F,W
1CB6:  CLRF   03
1CB8:  BTFSC  FE8.7
1CBA:  DECF   03,F
1CBC:  MOVWF  x37
1CBE:  MOVFF  03,438
....................    half_width = width/2; 
1CC2:  BCF    FD8.0
1CC4:  RRCF   x34,W
1CC6:  MOVWF  x36
....................    c1 = -(dx*x1 + dy*y1); 
1CC8:  MOVFF  43A,46B
1CCC:  MOVFF  439,46A
1CD0:  CLRF   x6D
1CD2:  MOVFF  430,46C
1CD6:  MOVLB  0
1CD8:  RCALL  1544
1CDA:  MOVFF  02,450
1CDE:  MOVFF  01,44F
1CE2:  MOVFF  438,46B
1CE6:  MOVFF  437,46A
1CEA:  MOVLB  4
1CEC:  CLRF   x6D
1CEE:  MOVFF  431,46C
1CF2:  MOVLB  0
1CF4:  RCALL  1544
1CF6:  MOVFF  02,03
1CFA:  MOVF   01,W
1CFC:  MOVLB  4
1CFE:  ADDWF  x4F,W
1D00:  MOVWF  01
1D02:  MOVF   x50,W
1D04:  ADDWFC 03,F
1D06:  MOVF   01,W
1D08:  XORLW  FF
1D0A:  ADDLW  01
1D0C:  MOVWF  x42
1D0E:  MOVLW  00
1D10:  SUBFWB 03,W
1D12:  MOVWF  x43
....................    c2 = -(dx*x2 + dy*y2);   
1D14:  MOVFF  43A,46B
1D18:  MOVFF  439,46A
1D1C:  CLRF   x6D
1D1E:  MOVFF  432,46C
1D22:  MOVLB  0
1D24:  RCALL  1544
1D26:  MOVFF  02,450
1D2A:  MOVFF  01,44F
1D2E:  MOVFF  438,46B
1D32:  MOVFF  437,46A
1D36:  MOVLB  4
1D38:  CLRF   x6D
1D3A:  MOVFF  433,46C
1D3E:  MOVLB  0
1D40:  RCALL  1544
1D42:  MOVFF  02,03
1D46:  MOVF   01,W
1D48:  MOVLB  4
1D4A:  ADDWF  x4F,W
1D4C:  MOVWF  01
1D4E:  MOVF   x50,W
1D50:  ADDWFC 03,F
1D52:  MOVF   01,W
1D54:  XORLW  FF
1D56:  ADDLW  01
1D58:  MOVWF  x44
1D5A:  MOVLW  00
1D5C:  SUBFWB 03,W
1D5E:  MOVWF  x45
....................    xt1=x1-half_width; 
1D60:  MOVF   x36,W
1D62:  SUBWF  x30,W
1D64:  MOVWF  x47
....................    xt2=x2+half_width; 
1D66:  MOVF   x36,W
1D68:  ADDWF  x32,W
1D6A:  MOVWF  x49
....................    yt1=y1-half_width; 
1D6C:  MOVF   x36,W
1D6E:  SUBWF  x31,W
1D70:  MOVWF  x48
....................    yt2=y2+half_width; 
1D72:  MOVF   x36,W
1D74:  ADDWF  x33,W
1D76:  MOVWF  x4A
....................    if(x1 > x2) 
1D78:  MOVF   x30,W
1D7A:  SUBWF  x32,W
1D7C:  BC    1DA4
....................    { 
....................       signed int16 temp; 
....................       temp = c1; 
1D7E:  MOVFF  443,44C
1D82:  MOVFF  442,44B
....................       c1 = c2; 
1D86:  MOVFF  445,443
1D8A:  MOVFF  444,442
....................       c2 = temp; 
1D8E:  MOVFF  44C,445
1D92:  MOVFF  44B,444
....................       addx = -1; 
1D96:  SETF   x3B
....................       xt1=x2-half_width; 
1D98:  MOVF   x36,W
1D9A:  SUBWF  x32,W
1D9C:  MOVWF  x47
....................       xt2=x1+half_width;   
1D9E:  MOVF   x36,W
1DA0:  ADDWF  x30,W
1DA2:  MOVWF  x49
....................    } 
....................    if(y1 > y2) 
1DA4:  MOVF   x31,W
1DA6:  SUBWF  x33,W
1DA8:  BC    1DD0
....................    { 
....................       signed int16 temp; 
....................       temp = c1; 
1DAA:  MOVFF  443,44E
1DAE:  MOVFF  442,44D
....................       c1 = c2; 
1DB2:  MOVFF  445,443
1DB6:  MOVFF  444,442
....................       c2 = temp; 
1DBA:  MOVFF  44E,445
1DBE:  MOVFF  44D,444
....................       addy = -1; 
1DC2:  SETF   x3C
....................       yt1=y2-half_width; 
1DC4:  MOVF   x36,W
1DC6:  SUBWF  x33,W
1DC8:  MOVWF  x48
....................       yt2=y1+half_width; 
1DCA:  MOVF   x36,W
1DCC:  ADDWF  x31,W
1DCE:  MOVWF  x4A
....................    } 
....................    if(xt1>127)   xt1=0; 
1DD0:  MOVF   x47,W
1DD2:  SUBLW  7F
1DD4:  BC    1DD8
1DD6:  CLRF   x47
....................    if(yt1>127)   yt1=0; 
1DD8:  MOVF   x48,W
1DDA:  SUBLW  7F
1DDC:  BC    1DE0
1DDE:  CLRF   x48
....................    if(xt2>127)   xt2=127; 
1DE0:  MOVF   x49,W
1DE2:  SUBLW  7F
1DE4:  BC    1DEA
1DE6:  MOVLW  7F
1DE8:  MOVWF  x49
....................    if(yt2>63)    yt2=63; 
1DEA:  MOVF   x4A,W
1DEC:  SUBLW  3F
1DEE:  BC    1DF4
1DF0:  MOVLW  3F
1DF2:  MOVWF  x4A
....................    GLCD_UPDATE_COORDINATE(xt1,yt1, xt2,yt2); 
1DF4:  MOVFF  447,47C
1DF8:  MOVFF  448,47D
1DFC:  MOVFF  449,47E
1E00:  MOVFF  44A,47F
1E04:  MOVLB  0
1E06:  CALL   0974
....................    if(dx >= dy) 
1E0A:  MOVLB  4
1E0C:  BTFSS  x38.7
1E0E:  BRA    1E16
1E10:  BTFSS  x3A.7
1E12:  BRA    1E28
1E14:  BRA    1E1A
1E16:  BTFSC  x3A.7
1E18:  BRA    1EDC
1E1A:  MOVF   x38,W
1E1C:  SUBWF  x3A,W
1E1E:  BNC   1EDC
1E20:  BNZ   1E28
1E22:  MOVF   x37,W
1E24:  SUBWF  x39,W
1E26:  BNC   1EDC
....................    { 
....................       P = 2*dy - dx; 
1E28:  CLRF   x6B
1E2A:  MOVLW  02
1E2C:  MOVWF  x6A
1E2E:  MOVFF  438,46D
1E32:  MOVFF  437,46C
1E36:  MOVLB  0
1E38:  CALL   1544
1E3C:  MOVLB  4
1E3E:  MOVF   x39,W
1E40:  SUBWF  01,W
1E42:  MOVWF  x3E
1E44:  MOVF   x3A,W
1E46:  SUBWFB 02,W
1E48:  MOVWF  x3F
....................       diff = P - dx; 
1E4A:  MOVF   x39,W
1E4C:  SUBWF  x3E,W
1E4E:  MOVWF  x40
1E50:  MOVF   x3A,W
1E52:  SUBWFB x3F,W
1E54:  MOVWF  x41
....................  
....................       for(i=0; i<=dx; ++i) 
1E56:  CLRF   x46
1E58:  BTFSC  x3A.7
1E5A:  BRA    1EDA
1E5C:  MOVF   x3A,F
1E5E:  BNZ   1E66
1E60:  MOVF   x46,W
1E62:  SUBWF  x39,W
1E64:  BNC   1EDA
....................       { 
....................          for(j=-half_width; j<half_width+width%2; ++j) 
1E66:  MOVLW  00
1E68:  BSF    FD8.0
1E6A:  SUBFWB x36,W
1E6C:  MOVWF  x3D
1E6E:  MOVF   x34,W
1E70:  ANDLW  01
1E72:  ADDWF  x36,W
1E74:  BTFSC  x3D.7
1E76:  BRA    1E7C
1E78:  SUBWF  x3D,W
1E7A:  BC    1E98
....................          { 
....................                glcd_pixel_temp(x1, y1+j, color); 
1E7C:  MOVF   x3D,W
1E7E:  ADDWF  x31,W
1E80:  MOVWF  x4F
1E82:  MOVFF  430,47C
1E86:  MOVWF  x7D
1E88:  MOVFF  435,47E
1E8C:  MOVLB  0
1E8E:  CALL   09BE
1E92:  MOVLB  4
1E94:  INCF   x3D,F
1E96:  BRA    1E6E
....................          } 
....................          if(P < 0) 
1E98:  BTFSS  x3F.7
1E9A:  BRA    1EC2
....................          { 
....................             P  += 2*dy; 
1E9C:  CLRF   x6B
1E9E:  MOVLW  02
1EA0:  MOVWF  x6A
1EA2:  MOVFF  438,46D
1EA6:  MOVFF  437,46C
1EAA:  MOVLB  0
1EAC:  CALL   1544
1EB0:  MOVF   01,W
1EB2:  MOVLB  4
1EB4:  ADDWF  x3E,F
1EB6:  MOVF   02,W
1EB8:  ADDWFC x3F,F
....................             x1 += addx; 
1EBA:  MOVF   x3B,W
1EBC:  ADDWF  x30,W
1EBE:  MOVWF  x30
....................          } 
1EC0:  BRA    1ED6
....................          else 
....................          { 
....................             P  += diff; 
1EC2:  MOVF   x40,W
1EC4:  ADDWF  x3E,F
1EC6:  MOVF   x41,W
1EC8:  ADDWFC x3F,F
....................             x1 += addx; 
1ECA:  MOVF   x3B,W
1ECC:  ADDWF  x30,W
1ECE:  MOVWF  x30
....................             y1 += addy; 
1ED0:  MOVF   x3C,W
1ED2:  ADDWF  x31,W
1ED4:  MOVWF  x31
....................          } 
1ED6:  INCF   x46,F
1ED8:  BRA    1E58
....................       } 
....................    } 
1EDA:  BRA    1F8E
....................    else 
....................    { 
....................       P = 2*dx - dy; 
1EDC:  CLRF   x6B
1EDE:  MOVLW  02
1EE0:  MOVWF  x6A
1EE2:  MOVFF  43A,46D
1EE6:  MOVFF  439,46C
1EEA:  MOVLB  0
1EEC:  CALL   1544
1EF0:  MOVLB  4
1EF2:  MOVF   x37,W
1EF4:  SUBWF  01,W
1EF6:  MOVWF  x3E
1EF8:  MOVF   x38,W
1EFA:  SUBWFB 02,W
1EFC:  MOVWF  x3F
....................       diff = P - dy; 
1EFE:  MOVF   x37,W
1F00:  SUBWF  x3E,W
1F02:  MOVWF  x40
1F04:  MOVF   x38,W
1F06:  SUBWFB x3F,W
1F08:  MOVWF  x41
....................  
....................       for(i=0; i<=dy; ++i) 
1F0A:  CLRF   x46
1F0C:  BTFSC  x38.7
1F0E:  BRA    1F8E
1F10:  MOVF   x38,F
1F12:  BNZ   1F1A
1F14:  MOVF   x46,W
1F16:  SUBWF  x37,W
1F18:  BNC   1F8E
....................       { 
....................          if(P < 0) 
1F1A:  BTFSS  x3F.7
1F1C:  BRA    1F44
....................          { 
....................             P  += 2*dx; 
1F1E:  CLRF   x6B
1F20:  MOVLW  02
1F22:  MOVWF  x6A
1F24:  MOVFF  43A,46D
1F28:  MOVFF  439,46C
1F2C:  MOVLB  0
1F2E:  CALL   1544
1F32:  MOVF   01,W
1F34:  MOVLB  4
1F36:  ADDWF  x3E,F
1F38:  MOVF   02,W
1F3A:  ADDWFC x3F,F
....................             y1 += addy; 
1F3C:  MOVF   x3C,W
1F3E:  ADDWF  x31,W
1F40:  MOVWF  x31
....................          } 
1F42:  BRA    1F58
....................          else 
....................          { 
....................             P  += diff; 
1F44:  MOVF   x40,W
1F46:  ADDWF  x3E,F
1F48:  MOVF   x41,W
1F4A:  ADDWFC x3F,F
....................             x1 += addx; 
1F4C:  MOVF   x3B,W
1F4E:  ADDWF  x30,W
1F50:  MOVWF  x30
....................             y1 += addy; 
1F52:  MOVF   x3C,W
1F54:  ADDWF  x31,W
1F56:  MOVWF  x31
....................          } 
....................          for(j=-half_width; j<half_width+width%2; ++j) 
1F58:  MOVLW  00
1F5A:  BSF    FD8.0
1F5C:  SUBFWB x36,W
1F5E:  MOVWF  x3D
1F60:  MOVF   x34,W
1F62:  ANDLW  01
1F64:  ADDWF  x36,W
1F66:  BTFSC  x3D.7
1F68:  BRA    1F6E
1F6A:  SUBWF  x3D,W
1F6C:  BC    1F8A
....................          { 
....................                glcd_pixel_temp(x1+j, y1, color); 
1F6E:  MOVF   x3D,W
1F70:  ADDWF  x30,W
1F72:  MOVWF  x4F
1F74:  MOVWF  x7C
1F76:  MOVFF  431,47D
1F7A:  MOVFF  435,47E
1F7E:  MOVLB  0
1F80:  CALL   09BE
1F84:  MOVLB  4
1F86:  INCF   x3D,F
1F88:  BRA    1F60
....................          } 
1F8A:  INCF   x46,F
1F8C:  BRA    1F0C
....................       } 
....................    } 
....................    return OK; 
1F8E:  MOVLW  00
1F90:  MOVWF  01
1F92:  MOVLB  0
1F94:  GOTO   23C8 (RETURN)
.................... } 
....................  
.................... result glcd_circle(unsigned int8 x, unsigned int8 y, unsigned int8 radius, int1 fill, int1 color) 
.................... { 
....................    unsigned int8 xt1,xt2, yt1, yt2; 
....................    signed int8  a, b, P; 
....................    a = 0; 
*
1204:  MOVLB  4
1206:  CLRF   x39
....................    b = radius; 
1208:  MOVFF  432,43A
....................    P = 1 - radius; 
120C:  MOVLW  01
120E:  BSF    FD8.0
1210:  SUBFWB x32,W
1212:  MOVWF  x3B
....................    do 
....................    { 
....................       if(fill) 
1214:  MOVF   x33,F
1216:  BZ    12B2
....................       { 
....................          glcd_horizone_line(x-a, x+a, y+b, color); 
1218:  MOVF   x39,W
121A:  SUBWF  x30,W
121C:  MOVWF  x3C
121E:  MOVF   x39,W
1220:  ADDWF  x30,W
1222:  MOVWF  x3D
1224:  MOVF   x3A,W
1226:  ADDWF  x31,W
1228:  MOVWF  x3E
122A:  MOVFF  43C,44E
122E:  MOVFF  43D,44F
1232:  MOVWF  x50
1234:  MOVFF  434,451
1238:  MOVLB  0
123A:  RCALL  0B80
....................          glcd_horizone_line(x-a, x+a, y-b, color); 
123C:  MOVLB  4
123E:  MOVF   x39,W
1240:  SUBWF  x30,W
1242:  MOVWF  x3C
1244:  MOVF   x39,W
1246:  ADDWF  x30,W
1248:  MOVWF  x3D
124A:  MOVF   x3A,W
124C:  SUBWF  x31,W
124E:  MOVWF  x3E
1250:  MOVFF  43C,44E
1254:  MOVFF  43D,44F
1258:  MOVWF  x50
125A:  MOVFF  434,451
125E:  MOVLB  0
1260:  RCALL  0B80
....................          glcd_horizone_line(x-b, x+b, y+a, color); 
1262:  MOVLB  4
1264:  MOVF   x3A,W
1266:  SUBWF  x30,W
1268:  MOVWF  x3C
126A:  MOVF   x3A,W
126C:  ADDWF  x30,W
126E:  MOVWF  x3D
1270:  MOVF   x39,W
1272:  ADDWF  x31,W
1274:  MOVWF  x3E
1276:  MOVFF  43C,44E
127A:  MOVFF  43D,44F
127E:  MOVWF  x50
1280:  MOVFF  434,451
1284:  MOVLB  0
1286:  RCALL  0B80
....................          glcd_horizone_line(x-b, x+b, y-a, color);   
1288:  MOVLB  4
128A:  MOVF   x3A,W
128C:  SUBWF  x30,W
128E:  MOVWF  x3C
1290:  MOVF   x3A,W
1292:  ADDWF  x30,W
1294:  MOVWF  x3D
1296:  MOVF   x39,W
1298:  SUBWF  x31,W
129A:  MOVWF  x3E
129C:  MOVFF  43C,44E
12A0:  MOVFF  43D,44F
12A4:  MOVWF  x50
12A6:  MOVFF  434,451
12AA:  MOVLB  0
12AC:  RCALL  0B80
....................       } 
12AE:  BRA    13A0
12B0:  MOVLB  4
....................       else 
....................       { 
....................          glcd_pixel_temp(a+x, b+y, color); 
12B2:  MOVF   x30,W
12B4:  ADDWF  x39,W
12B6:  MOVWF  x3C
12B8:  MOVF   x31,W
12BA:  ADDWF  x3A,W
12BC:  MOVWF  x3D
12BE:  MOVFF  43C,47C
12C2:  MOVWF  x7D
12C4:  MOVFF  434,47E
12C8:  MOVLB  0
12CA:  CALL   09BE
....................          glcd_pixel_temp(b+x, a+y, color); 
12CE:  MOVLB  4
12D0:  MOVF   x30,W
12D2:  ADDWF  x3A,W
12D4:  MOVWF  x3C
12D6:  MOVF   x31,W
12D8:  ADDWF  x39,W
12DA:  MOVWF  x3D
12DC:  MOVFF  43C,47C
12E0:  MOVWF  x7D
12E2:  MOVFF  434,47E
12E6:  MOVLB  0
12E8:  CALL   09BE
....................          glcd_pixel_temp(x-a, b+y, color); 
12EC:  MOVLB  4
12EE:  MOVF   x39,W
12F0:  SUBWF  x30,W
12F2:  MOVWF  x3C
12F4:  MOVF   x31,W
12F6:  ADDWF  x3A,W
12F8:  MOVWF  x3D
12FA:  MOVFF  43C,47C
12FE:  MOVWF  x7D
1300:  MOVFF  434,47E
1304:  MOVLB  0
1306:  CALL   09BE
....................          glcd_pixel_temp(x-b, a+y, color); 
130A:  MOVLB  4
130C:  MOVF   x3A,W
130E:  SUBWF  x30,W
1310:  MOVWF  x3C
1312:  MOVF   x31,W
1314:  ADDWF  x39,W
1316:  MOVWF  x3D
1318:  MOVFF  43C,47C
131C:  MOVWF  x7D
131E:  MOVFF  434,47E
1322:  MOVLB  0
1324:  CALL   09BE
....................          glcd_pixel_temp(b+x, y-a, color); 
1328:  MOVLB  4
132A:  MOVF   x30,W
132C:  ADDWF  x3A,W
132E:  MOVWF  x3C
1330:  MOVF   x39,W
1332:  SUBWF  x31,W
1334:  MOVWF  x3D
1336:  MOVFF  43C,47C
133A:  MOVWF  x7D
133C:  MOVFF  434,47E
1340:  MOVLB  0
1342:  CALL   09BE
....................          glcd_pixel_temp(a+x, y-b, color); 
1346:  MOVLB  4
1348:  MOVF   x30,W
134A:  ADDWF  x39,W
134C:  MOVWF  x3C
134E:  MOVF   x3A,W
1350:  SUBWF  x31,W
1352:  MOVWF  x3D
1354:  MOVFF  43C,47C
1358:  MOVWF  x7D
135A:  MOVFF  434,47E
135E:  MOVLB  0
1360:  CALL   09BE
....................          glcd_pixel_temp(x-a, y-b, color); 
1364:  MOVLB  4
1366:  MOVF   x39,W
1368:  SUBWF  x30,W
136A:  MOVWF  x3C
136C:  MOVF   x3A,W
136E:  SUBWF  x31,W
1370:  MOVWF  x3D
1372:  MOVFF  43C,47C
1376:  MOVWF  x7D
1378:  MOVFF  434,47E
137C:  MOVLB  0
137E:  CALL   09BE
....................          glcd_pixel_temp(x-b, y-a, color); 
1382:  MOVLB  4
1384:  MOVF   x3A,W
1386:  SUBWF  x30,W
1388:  MOVWF  x3C
138A:  MOVF   x39,W
138C:  SUBWF  x31,W
138E:  MOVWF  x3D
1390:  MOVFF  43C,47C
1394:  MOVWF  x7D
1396:  MOVFF  434,47E
139A:  MOVLB  0
139C:  CALL   09BE
....................       } 
....................  
....................       if(P < 0) 
13A0:  MOVLB  4
13A2:  BTFSS  x3B.7
13A4:  BRA    13C2
....................          P += 3 + 2 * a++; 
13A6:  MOVF   x39,W
13A8:  INCF   x39,F
13AA:  MOVWF  x3C
13AC:  MOVLW  02
13AE:  MOVWF  x3D
13B0:  MOVFF  43C,43E
13B4:  MOVLB  0
13B6:  RCALL  11B6
13B8:  MOVF   01,W
13BA:  ADDLW  03
13BC:  MOVLB  4
13BE:  ADDWF  x3B,F
13C0:  BRA    13E4
....................       else 
....................          P += 5 + 2 * (a++ - b--); 
13C2:  MOVF   x39,W
13C4:  INCF   x39,F
13C6:  MOVWF  x3C
13C8:  MOVF   x3A,W
13CA:  DECF   x3A,F
13CC:  SUBWF  x3C,W
13CE:  MOVWF  x3C
13D0:  MOVLW  02
13D2:  MOVWF  x3D
13D4:  MOVFF  43C,43E
13D8:  MOVLB  0
13DA:  RCALL  11B6
13DC:  MOVF   01,W
13DE:  ADDLW  05
13E0:  MOVLB  4
13E2:  ADDWF  x3B,F
....................     } while(a <= b); 
13E4:  MOVF   x39,W
13E6:  XORLW  80
13E8:  MOVWF  00
13EA:  MOVF   x3A,W
13EC:  XORLW  80
13EE:  SUBWF  00,W
13F0:  BTFSC  FD8.2
13F2:  BRA    1214
13F4:  BTFSS  FD8.0
13F6:  BRA    1214
....................     xt1 = x-radius; 
13F8:  MOVF   x32,W
13FA:  SUBWF  x30,W
13FC:  MOVWF  x35
....................     xt2 = x+radius; 
13FE:  MOVF   x32,W
1400:  ADDWF  x30,W
1402:  MOVWF  x36
....................     yt1 = y-radius; 
1404:  MOVF   x32,W
1406:  SUBWF  x31,W
1408:  MOVWF  x37
....................     yt2 = y+radius; 
140A:  MOVF   x32,W
140C:  ADDWF  x31,W
140E:  MOVWF  x38
....................     if(xt1>127)   xt1=0; 
1410:  MOVF   x35,W
1412:  SUBLW  7F
1414:  BC    1418
1416:  CLRF   x35
....................     if(yt1>127)   yt1=0; 
1418:  MOVF   x37,W
141A:  SUBLW  7F
141C:  BC    1420
141E:  CLRF   x37
....................     if(xt2>127)   xt2=127; 
1420:  MOVF   x36,W
1422:  SUBLW  7F
1424:  BC    142A
1426:  MOVLW  7F
1428:  MOVWF  x36
....................     if(yt2>63)    yt2=63; 
142A:  MOVF   x38,W
142C:  SUBLW  3F
142E:  BC    1434
1430:  MOVLW  3F
1432:  MOVWF  x38
....................     GLCD_UPDATE_COORDINATE(xt1,yt1, xt2,yt2); 
1434:  MOVFF  435,47C
1438:  MOVFF  437,47D
143C:  MOVFF  436,47E
1440:  MOVFF  438,47F
1444:  MOVLB  0
1446:  CALL   0974
....................     return OK; 
144A:  MOVLW  00
144C:  MOVWF  01
144E:  GOTO   232E (RETURN)
.................... } 
.................... result glcd_triangle(signed int16 x1,signed int16 y1, signed int16 x2, signed int16 y2, signed int16 x3, signed int16 y3,int1 fill,int1 color) 
.................... { 
....................     unsigned int8 xt1, xt2, yt11,yt22; 
....................     signed int16 x[3],y[3],n,yt1,yt2,yt,dx1,dx2,dx3,dy1,dy2,dy3;  
....................     signed int16 sh1,sh2,sh3; 
....................     x[0]=x1; x[1]=x2; x[2]=x3;y[0]=y1; y[1]=y2; y[2]=y3; 
*
1786:  MOVFF  431,443
178A:  MOVFF  430,442
178E:  MOVFF  435,445
1792:  MOVFF  434,444
1796:  MOVFF  439,447
179A:  MOVFF  438,446
179E:  MOVFF  433,449
17A2:  MOVFF  432,448
17A6:  MOVFF  437,44B
17AA:  MOVFF  436,44A
17AE:  MOVFF  43B,44D
17B2:  MOVFF  43A,44C
....................     if(x[0]>x[1]){yt=x[0];x[0]=x[1];x[1]=yt;yt=y[0];y[0]=y[1];y[1]=yt;} 
17B6:  MOVLB  4
17B8:  BTFSS  x45.7
17BA:  BRA    17C2
17BC:  BTFSS  x43.7
17BE:  BRA    17D4
17C0:  BRA    17C6
17C2:  BTFSC  x43.7
17C4:  BRA    1804
17C6:  MOVF   x45,W
17C8:  SUBWF  x43,W
17CA:  BNC   1804
17CC:  BNZ   17D4
17CE:  MOVF   x42,W
17D0:  SUBWF  x44,W
17D2:  BC    1804
17D4:  MOVFF  443,455
17D8:  MOVFF  442,454
17DC:  MOVFF  445,443
17E0:  MOVFF  444,442
17E4:  MOVFF  455,445
17E8:  MOVFF  454,444
17EC:  MOVFF  449,455
17F0:  MOVFF  448,454
17F4:  MOVFF  44B,449
17F8:  MOVFF  44A,448
17FC:  MOVFF  455,44B
1800:  MOVFF  454,44A
....................     if(x[0]>x[2]){yt=x[0];x[0]=x[2];x[2]=yt;yt=y[0];y[0]=y[2];y[2]=yt;} 
1804:  BTFSS  x47.7
1806:  BRA    180E
1808:  BTFSS  x43.7
180A:  BRA    1820
180C:  BRA    1812
180E:  BTFSC  x43.7
1810:  BRA    1850
1812:  MOVF   x47,W
1814:  SUBWF  x43,W
1816:  BNC   1850
1818:  BNZ   1820
181A:  MOVF   x42,W
181C:  SUBWF  x46,W
181E:  BC    1850
1820:  MOVFF  443,455
1824:  MOVFF  442,454
1828:  MOVFF  447,443
182C:  MOVFF  446,442
1830:  MOVFF  455,447
1834:  MOVFF  454,446
1838:  MOVFF  449,455
183C:  MOVFF  448,454
1840:  MOVFF  44D,449
1844:  MOVFF  44C,448
1848:  MOVFF  455,44D
184C:  MOVFF  454,44C
....................     if(x[1]>x[2]){yt=x[1];x[1]=x[2];x[2]=yt;yt=y[1];y[1]=y[2];y[2]=yt;} 
1850:  BTFSS  x47.7
1852:  BRA    185A
1854:  BTFSS  x45.7
1856:  BRA    186C
1858:  BRA    185E
185A:  BTFSC  x45.7
185C:  BRA    189C
185E:  MOVF   x47,W
1860:  SUBWF  x45,W
1862:  BNC   189C
1864:  BNZ   186C
1866:  MOVF   x44,W
1868:  SUBWF  x46,W
186A:  BC    189C
186C:  MOVFF  445,455
1870:  MOVFF  444,454
1874:  MOVFF  447,445
1878:  MOVFF  446,444
187C:  MOVFF  455,447
1880:  MOVFF  454,446
1884:  MOVFF  44B,455
1888:  MOVFF  44A,454
188C:  MOVFF  44D,44B
1890:  MOVFF  44C,44A
1894:  MOVFF  455,44D
1898:  MOVFF  454,44C
....................     dx1= x[2]-x[0]; dx2= x[1]-x[0];dx3=x[2]-x[1]; 
189C:  MOVF   x42,W
189E:  SUBWF  x46,W
18A0:  MOVWF  x56
18A2:  MOVF   x43,W
18A4:  SUBWFB x47,W
18A6:  MOVWF  x57
18A8:  MOVF   x42,W
18AA:  SUBWF  x44,W
18AC:  MOVWF  x58
18AE:  MOVF   x43,W
18B0:  SUBWFB x45,W
18B2:  MOVWF  x59
18B4:  MOVF   x44,W
18B6:  SUBWF  x46,W
18B8:  MOVWF  x5A
18BA:  MOVF   x45,W
18BC:  SUBWFB x47,W
18BE:  MOVWF  x5B
....................     dy1= y[2]-y[0]; dy2= y[1]-y[0];dy3=y[2]-y[1]; 
18C0:  MOVF   x48,W
18C2:  SUBWF  x4C,W
18C4:  MOVWF  x5C
18C6:  MOVF   x49,W
18C8:  SUBWFB x4D,W
18CA:  MOVWF  x5D
18CC:  MOVF   x48,W
18CE:  SUBWF  x4A,W
18D0:  MOVWF  x5E
18D2:  MOVF   x49,W
18D4:  SUBWFB x4B,W
18D6:  MOVWF  x5F
18D8:  MOVF   x4A,W
18DA:  SUBWF  x4C,W
18DC:  MOVWF  x60
18DE:  MOVF   x4B,W
18E0:  SUBWFB x4D,W
18E2:  MOVWF  x61
....................     sh1=x[2]*y[0] - x[0]*y[2]; sh2=x[1]*y[0] - x[0]*y[1]; sh3=x[2]*y[1] - x[1]*y[2]; 
18E4:  MOVFF  447,46B
18E8:  MOVFF  446,46A
18EC:  MOVFF  449,46D
18F0:  MOVFF  448,46C
18F4:  MOVLB  0
18F6:  RCALL  1544
18F8:  MOVFF  02,469
18FC:  MOVFF  01,468
1900:  MOVFF  443,46B
1904:  MOVFF  442,46A
1908:  MOVFF  44D,46D
190C:  MOVFF  44C,46C
1910:  RCALL  1544
1912:  MOVFF  02,03
1916:  MOVF   01,W
1918:  MOVLB  4
191A:  SUBWF  x68,W
191C:  MOVWF  x62
191E:  MOVF   02,W
1920:  SUBWFB x69,W
1922:  MOVWF  x63
1924:  MOVFF  445,46B
1928:  MOVFF  444,46A
192C:  MOVFF  449,46D
1930:  MOVFF  448,46C
1934:  MOVLB  0
1936:  RCALL  1544
1938:  MOVFF  02,469
193C:  MOVFF  01,468
1940:  MOVFF  443,46B
1944:  MOVFF  442,46A
1948:  MOVFF  44B,46D
194C:  MOVFF  44A,46C
1950:  RCALL  1544
1952:  MOVFF  02,03
1956:  MOVF   01,W
1958:  MOVLB  4
195A:  SUBWF  x68,W
195C:  MOVWF  x64
195E:  MOVF   02,W
1960:  SUBWFB x69,W
1962:  MOVWF  x65
1964:  MOVFF  447,46B
1968:  MOVFF  446,46A
196C:  MOVFF  44B,46D
1970:  MOVFF  44A,46C
1974:  MOVLB  0
1976:  RCALL  1544
1978:  MOVFF  02,469
197C:  MOVFF  01,468
1980:  MOVFF  445,46B
1984:  MOVFF  444,46A
1988:  MOVFF  44D,46D
198C:  MOVFF  44C,46C
1990:  RCALL  1544
1992:  MOVF   01,W
1994:  MOVLB  4
1996:  SUBWF  x68,W
1998:  MOVWF  x66
199A:  MOVF   02,W
199C:  SUBWFB x69,W
199E:  MOVWF  x67
....................     if(fill) 
19A0:  MOVF   x3C,F
19A2:  BTFSC  FD8.2
19A4:  BRA    1BA0
....................     { 
....................         for(n=x[0] ; n<x[1]; n++) 
19A6:  MOVFF  443,44F
19AA:  MOVFF  442,44E
19AE:  BTFSS  x4F.7
19B0:  BRA    19B8
19B2:  BTFSS  x45.7
19B4:  BRA    19CC
19B6:  BRA    19BC
19B8:  BTFSC  x45.7
19BA:  BRA    1AA2
19BC:  MOVF   x4F,W
19BE:  SUBWF  x45,W
19C0:  BTFSS  FD8.0
19C2:  BRA    1AA2
19C4:  BNZ   19CC
19C6:  MOVF   x44,W
19C8:  SUBWF  x4E,W
19CA:  BC    1AA2
....................           { 
....................               yt1= (dy1*n + sh1)/dx1; 
19CC:  MOVFF  45D,46B
19D0:  MOVFF  45C,46A
19D4:  MOVFF  44F,46D
19D8:  MOVFF  44E,46C
19DC:  MOVLB  0
19DE:  RCALL  1544
19E0:  MOVFF  02,469
19E4:  MOVFF  01,468
19E8:  MOVLB  4
19EA:  MOVF   x62,W
19EC:  ADDWF  x68,F
19EE:  MOVF   x63,W
19F0:  ADDWFC x69,F
19F2:  MOVFF  469,46B
19F6:  MOVFF  468,46A
19FA:  MOVFF  457,46D
19FE:  MOVFF  456,46C
1A02:  MOVLB  0
1A04:  RCALL  1598
1A06:  MOVFF  02,451
1A0A:  MOVFF  01,450
....................               yt2= (dy2*n + sh2)/dx2; 
1A0E:  MOVFF  45F,46B
1A12:  MOVFF  45E,46A
1A16:  MOVFF  44F,46D
1A1A:  MOVFF  44E,46C
1A1E:  RCALL  1544
1A20:  MOVFF  02,469
1A24:  MOVFF  01,468
1A28:  MOVLB  4
1A2A:  MOVF   x64,W
1A2C:  ADDWF  x68,F
1A2E:  MOVF   x65,W
1A30:  ADDWFC x69,F
1A32:  MOVFF  469,46B
1A36:  MOVFF  468,46A
1A3A:  MOVFF  459,46D
1A3E:  MOVFF  458,46C
1A42:  MOVLB  0
1A44:  RCALL  1598
1A46:  MOVFF  02,453
1A4A:  MOVFF  01,452
....................               if(yt2<yt1){yt= yt1; yt1=yt2; yt2=yt;} 
1A4E:  MOVLB  4
1A50:  BTFSS  x53.7
1A52:  BRA    1A5A
1A54:  BTFSS  x51.7
1A56:  BRA    1A6C
1A58:  BRA    1A5E
1A5A:  BTFSC  x51.7
1A5C:  BRA    1A84
1A5E:  MOVF   x53,W
1A60:  SUBWF  x51,W
1A62:  BNC   1A84
1A64:  BNZ   1A6C
1A66:  MOVF   x50,W
1A68:  SUBWF  x52,W
1A6A:  BC    1A84
1A6C:  MOVFF  451,455
1A70:  MOVFF  450,454
1A74:  MOVFF  453,451
1A78:  MOVFF  452,450
1A7C:  MOVFF  455,453
1A80:  MOVFF  454,452
....................               glcd_vertical_line(n,yt1,yt2,color); 
1A84:  MOVFF  44E,468
1A88:  MOVFF  450,469
1A8C:  MOVFF  452,46A
1A90:  MOVFF  43D,46B
1A94:  MOVLB  0
1A96:  RCALL  1452
1A98:  MOVLB  4
1A9A:  INCF   x4E,F
1A9C:  BTFSC  FD8.2
1A9E:  INCF   x4F,F
1AA0:  BRA    19AE
....................           } 
....................           for(n=x[1] ; n<x[2]; n++) 
1AA2:  MOVFF  445,44F
1AA6:  MOVFF  444,44E
1AAA:  BTFSS  x4F.7
1AAC:  BRA    1AB4
1AAE:  BTFSS  x47.7
1AB0:  BRA    1AC8
1AB2:  BRA    1AB8
1AB4:  BTFSC  x47.7
1AB6:  BRA    1B9E
1AB8:  MOVF   x4F,W
1ABA:  SUBWF  x47,W
1ABC:  BTFSS  FD8.0
1ABE:  BRA    1B9E
1AC0:  BNZ   1AC8
1AC2:  MOVF   x46,W
1AC4:  SUBWF  x4E,W
1AC6:  BC    1B9E
....................           { 
....................               yt1= (dy1*n + sh1)/dx1; 
1AC8:  MOVFF  45D,46B
1ACC:  MOVFF  45C,46A
1AD0:  MOVFF  44F,46D
1AD4:  MOVFF  44E,46C
1AD8:  MOVLB  0
1ADA:  RCALL  1544
1ADC:  MOVFF  02,469
1AE0:  MOVFF  01,468
1AE4:  MOVLB  4
1AE6:  MOVF   x62,W
1AE8:  ADDWF  x68,F
1AEA:  MOVF   x63,W
1AEC:  ADDWFC x69,F
1AEE:  MOVFF  469,46B
1AF2:  MOVFF  468,46A
1AF6:  MOVFF  457,46D
1AFA:  MOVFF  456,46C
1AFE:  MOVLB  0
1B00:  RCALL  1598
1B02:  MOVFF  02,451
1B06:  MOVFF  01,450
....................               yt2= (dy3*n + sh3)/dx3; 
1B0A:  MOVFF  461,46B
1B0E:  MOVFF  460,46A
1B12:  MOVFF  44F,46D
1B16:  MOVFF  44E,46C
1B1A:  RCALL  1544
1B1C:  MOVFF  02,469
1B20:  MOVFF  01,468
1B24:  MOVLB  4
1B26:  MOVF   x66,W
1B28:  ADDWF  x68,F
1B2A:  MOVF   x67,W
1B2C:  ADDWFC x69,F
1B2E:  MOVFF  469,46B
1B32:  MOVFF  468,46A
1B36:  MOVFF  45B,46D
1B3A:  MOVFF  45A,46C
1B3E:  MOVLB  0
1B40:  RCALL  1598
1B42:  MOVFF  02,453
1B46:  MOVFF  01,452
....................               if(yt2<yt1){yt= yt1; yt1=yt2; yt2=yt;} 
1B4A:  MOVLB  4
1B4C:  BTFSS  x53.7
1B4E:  BRA    1B56
1B50:  BTFSS  x51.7
1B52:  BRA    1B68
1B54:  BRA    1B5A
1B56:  BTFSC  x51.7
1B58:  BRA    1B80
1B5A:  MOVF   x53,W
1B5C:  SUBWF  x51,W
1B5E:  BNC   1B80
1B60:  BNZ   1B68
1B62:  MOVF   x50,W
1B64:  SUBWF  x52,W
1B66:  BC    1B80
1B68:  MOVFF  451,455
1B6C:  MOVFF  450,454
1B70:  MOVFF  453,451
1B74:  MOVFF  452,450
1B78:  MOVFF  455,453
1B7C:  MOVFF  454,452
....................               glcd_vertical_line(n,yt1,yt2,color); 
1B80:  MOVFF  44E,468
1B84:  MOVFF  450,469
1B88:  MOVFF  452,46A
1B8C:  MOVFF  43D,46B
1B90:  MOVLB  0
1B92:  RCALL  1452
1B94:  MOVLB  4
1B96:  INCF   x4E,F
1B98:  BTFSC  FD8.2
1B9A:  INCF   x4F,F
1B9C:  BRA    1AAA
....................           }   
....................     } 
1B9E:  BRA    1BE6
....................     else  
....................     { 
....................          glcd_line(x1,y1,x2,y2,color); 
1BA0:  MOVFF  430,468
1BA4:  MOVFF  432,469
1BA8:  MOVFF  434,46A
1BAC:  MOVFF  436,46B
1BB0:  MOVFF  43D,46C
1BB4:  MOVLB  0
1BB6:  RCALL  1610
....................          glcd_line(x1,y1,x3,y3,color); 
1BB8:  MOVFF  430,468
1BBC:  MOVFF  432,469
1BC0:  MOVFF  438,46A
1BC4:  MOVFF  43A,46B
1BC8:  MOVFF  43D,46C
1BCC:  RCALL  1610
....................          glcd_line(x2,y2,x3,y3,color); 
1BCE:  MOVFF  434,468
1BD2:  MOVFF  436,469
1BD6:  MOVFF  438,46A
1BDA:  MOVFF  43A,46B
1BDE:  MOVFF  43D,46C
1BE2:  RCALL  1610
1BE4:  MOVLB  4
....................     } 
....................     xt1 = x[0]; 
1BE6:  MOVFF  442,43E
....................     xt2 = x[2]; 
1BEA:  MOVFF  446,43F
....................     if(y[0]>y[1])yt22= y[0]; else yt22 = y[1]; 
1BEE:  BTFSS  x4B.7
1BF0:  BRA    1BF8
1BF2:  BTFSS  x49.7
1BF4:  BRA    1C0A
1BF6:  BRA    1BFC
1BF8:  BTFSC  x49.7
1BFA:  BRA    1C10
1BFC:  MOVF   x4B,W
1BFE:  SUBWF  x49,W
1C00:  BNC   1C10
1C02:  BNZ   1C0A
1C04:  MOVF   x48,W
1C06:  SUBWF  x4A,W
1C08:  BC    1C10
1C0A:  MOVFF  448,441
1C0E:  BRA    1C14
1C10:  MOVFF  44A,441
....................     if(yt22<y[2]) yt22 = y[2];  
1C14:  BTFSC  x4D.7
1C16:  BRA    1C26
1C18:  MOVF   x4D,F
1C1A:  BNZ   1C22
1C1C:  MOVF   x4C,W
1C1E:  SUBWF  x41,W
1C20:  BTFSS  FD8.0
1C22:  MOVFF  44C,441
....................     if(y[0]<y[1]) yt11= y[0]; else yt11 = y[1]; 
1C26:  BTFSS  x49.7
1C28:  BRA    1C30
1C2A:  BTFSS  x4B.7
1C2C:  BRA    1C42
1C2E:  BRA    1C34
1C30:  BTFSC  x4B.7
1C32:  BRA    1C48
1C34:  MOVF   x49,W
1C36:  SUBWF  x4B,W
1C38:  BNC   1C48
1C3A:  BNZ   1C42
1C3C:  MOVF   x4A,W
1C3E:  SUBWF  x48,W
1C40:  BC    1C48
1C42:  MOVFF  448,440
1C46:  BRA    1C4C
1C48:  MOVFF  44A,440
....................     if(yt11>y[2])yt11 = y[2]; 
1C4C:  BTFSC  x4D.7
1C4E:  BRA    1C5A
1C50:  MOVF   x4D,F
1C52:  BNZ   1C5E
1C54:  MOVF   x40,W
1C56:  SUBWF  x4C,W
1C58:  BTFSS  FD8.0
1C5A:  MOVFF  44C,440
....................     GLCD_UPDATE_COORDINATE(xt1,yt11, xt2,yt22);    
1C5E:  MOVFF  43E,47C
1C62:  MOVFF  440,47D
1C66:  MOVFF  43F,47E
1C6A:  MOVFF  441,47F
1C6E:  MOVLB  0
1C70:  CALL   0974
....................     return OK; 
1C74:  MOVLW  00
1C76:  MOVWF  01
1C78:  GOTO   2386 (RETURN)
.................... } 
.................... result glcd_data(int8 data) 
.................... { 
....................       write_glcd128x64(0x17,data); 
*
07B6:  MOVLW  17
07B8:  MOVLB  4
07BA:  MOVWF  x39
07BC:  MOVFF  438,43A
07C0:  MOVLB  0
07C2:  RCALL  05C8
....................       write_glcd128x64(0x13,data); 
07C4:  MOVLW  13
07C6:  MOVLB  4
07C8:  MOVWF  x39
07CA:  MOVFF  438,43A
07CE:  MOVLB  0
07D0:  RCALL  05C8
....................       delay_us(9); 
07D2:  MOVLW  0E
07D4:  MOVWF  00
07D6:  DECFSZ 00,F
07D8:  BRA    07D6
07DA:  BRA    07DC
....................       return OK; 
07DC:  MOVLW  00
07DE:  MOVWF  01
07E0:  RETURN 0
.................... } 
.................... result glcd_command(int8 data) 
.................... { 
....................       write_glcd128x64(0x07,data); 
*
06C2:  MOVLW  07
06C4:  MOVLB  4
06C6:  MOVWF  x39
06C8:  MOVFF  436,43A
06CC:  MOVLB  0
06CE:  RCALL  05C8
....................       write_glcd128x64(0x03,data); 
06D0:  MOVLW  03
06D2:  MOVLB  4
06D4:  MOVWF  x39
06D6:  MOVFF  436,43A
06DA:  MOVLB  0
06DC:  RCALL  05C8
....................       delay_us(2); 
06DE:  MOVLW  02
06E0:  MOVWF  00
06E2:  DECFSZ 00,F
06E4:  BRA    06E2
06E6:  BRA    06E8
06E8:  NOP   
....................       return OK; 
06EA:  MOVLW  00
06EC:  MOVWF  01
06EE:  RETURN 0
.................... } 
.................... result glcd_setup() 
.................... { 
....................       GLCD_COMMAND(0x30);    DELAY_mS(1);    
*
092C:  MOVLW  30
092E:  MOVLB  4
0930:  MOVWF  x36
0932:  MOVLB  0
0934:  RCALL  06C2
0936:  MOVLW  01
0938:  MOVLB  4
093A:  MOVWF  x32
093C:  MOVLB  0
093E:  RCALL  04F6
....................       GLCD_COMMAND(0x01);    DELAY_MS(10); 
0940:  MOVLW  01
0942:  MOVLB  4
0944:  MOVWF  x36
0946:  MOVLB  0
0948:  RCALL  06C2
094A:  MOVLW  0A
094C:  MOVLB  4
094E:  MOVWF  x32
0950:  MOVLB  0
0952:  RCALL  04F6
....................       GLCD_COMMAND(0x36);      
0954:  MOVLW  36
0956:  MOVLB  4
0958:  MOVWF  x36
095A:  MOVLB  0
095C:  RCALL  06C2
....................       glcd_clear(0);   
095E:  MOVLB  4
0960:  CLRF   x30
0962:  MOVLB  0
0964:  BRA    06F0
....................       glcd_update(); 
0966:  RCALL  07E2
....................       GLCD.tt_update=0; 
0968:  BCF    26.2
....................       GLCD.tt_text=0; 
096A:  BCF    26.1
....................       return OK; 
096C:  MOVLW  00
096E:  MOVWF  01
0970:  GOTO   2306 (RETURN)
.................... } 
.................... #endif 
.................... #endif 
....................  
.................... unsigned int8 dem=0; 
.................... void main() 
*
227A:  CLRF   FF8
227C:  BCF    FD0.7
227E:  BSF    FB8.3
2280:  MOVLW  08
2282:  MOVWF  FAF
2284:  MOVLW  02
2286:  MOVWF  FB0
2288:  MOVLW  A6
228A:  MOVWF  FAC
228C:  MOVLW  90
228E:  MOVWF  FAB
2290:  SETF   1F
2292:  SETF   1E
2294:  CLRF   22
2296:  MOVLB  4
2298:  CLRF   x2F
229A:  MOVF   FC1,W
229C:  ANDLW  C0
229E:  IORLW  0F
22A0:  MOVWF  FC1
22A2:  MOVLW  07
22A4:  MOVWF  FB4
22A6:  BRA    22BE
22A8:  DATA 0A,40
22AA:  DATA 04,00
22AC:  DATA 0C,40
22AE:  DATA 12,FF
22B0:  DATA 02,00
22B2:  DATA 20,00
22B4:  DATA 00,04
22B6:  DATA 04,2B
22B8:  DATA 00,00
22BA:  DATA 00,00
22BC:  DATA 00,00
22BE:  MOVLW  00
22C0:  MOVWF  FF8
22C2:  MOVLW  22
22C4:  MOVWF  FF7
22C6:  MOVLW  A8
22C8:  MOVWF  FF6
22CA:  TBLRD*+
22CC:  MOVF   FF5,W
22CE:  MOVWF  00
22D0:  XORLW  00
22D2:  BZ    22FA
22D4:  TBLRD*+
22D6:  MOVF   FF5,W
22D8:  MOVWF  01
22DA:  BTFSC  FE8.7
22DC:  BRA    22E8
22DE:  ANDLW  0F
22E0:  MOVWF  FEA
22E2:  TBLRD*+
22E4:  MOVFF  FF5,FE9
22E8:  BTFSC  01.6
22EA:  TBLRD*+
22EC:  BTFSS  01.6
22EE:  TBLRD*+
22F0:  MOVFF  FF5,FEE
22F4:  DCFSNZ 00,F
22F6:  BRA    22CA
22F8:  BRA    22EC
22FA:  CLRF   FF8
.................... { 
....................       system_init();  
22FC:  MOVLB  0
22FE:  GOTO   0648
....................        
....................       glcd_setup(); // cau hinh GLCD - thieu ham nay GLCD khong chay 
2302:  GOTO   092C
....................       glcd_spkt_logo_raw(0);                  // 1. Ve logo SPKT o toa do x=0 
2306:  MOVLB  4
2308:  CLRF   x30
230A:  MOVLB  0
230C:  GOTO   0ACC
....................       glcd_update();                          // cap nhat logo SPKT hien thi ra man hinh 
2310:  CALL   07E2
....................       glcd_circle(70, 7, 6,  1, 1);           // 2. ve hinh tron co tam tai (70,7) , ban kinh 6, to kin, mau trang 
2314:  MOVLW  46
2316:  MOVLB  4
2318:  MOVWF  x30
231A:  MOVLW  07
231C:  MOVWF  x31
231E:  MOVLW  06
2320:  MOVWF  x32
2322:  MOVLW  01
2324:  MOVWF  x33
2326:  MOVWF  x34
2328:  MOVLB  0
232A:  GOTO   1204
....................       glcd_update(); 
232E:  CALL   07E2
....................       glcd_rect(85,1, 97, 13, 1,1);           // 3. ve hinh chu nhat tai (81,1), (97,13), to kin , mau trang 
2332:  MOVLW  55
2334:  MOVLB  4
2336:  MOVWF  x43
2338:  MOVLW  01
233A:  MOVWF  x44
233C:  MOVLW  61
233E:  MOVWF  x45
2340:  MOVLW  0D
2342:  MOVWF  x46
2344:  MOVLW  01
2346:  MOVWF  x47
2348:  MOVWF  x48
234A:  MOVLB  0
234C:  CALL   147E
....................       glcd_update(); 
2350:  CALL   07E2
....................       glcd_triangle(103,13,110,1,117,13,1,1); // 4. ve hinh tam giac 
2354:  MOVLB  4
2356:  CLRF   x31
2358:  MOVLW  67
235A:  MOVWF  x30
235C:  CLRF   x33
235E:  MOVLW  0D
2360:  MOVWF  x32
2362:  CLRF   x35
2364:  MOVLW  6E
2366:  MOVWF  x34
2368:  CLRF   x37
236A:  MOVLW  01
236C:  MOVWF  x36
236E:  CLRF   x39
2370:  MOVLW  75
2372:  MOVWF  x38
2374:  CLRF   x3B
2376:  MOVLW  0D
2378:  MOVWF  x3A
237A:  MOVLW  01
237C:  MOVWF  x3C
237E:  MOVWF  x3D
2380:  MOVLB  0
2382:  GOTO   1786
....................       glcd_update(); 
2386:  CALL   07E2
....................       glcd_line(64, 15, 118,  15,  1);        // 5. ve doan thang 
238A:  MOVLW  40
238C:  MOVLB  4
238E:  MOVWF  x68
2390:  MOVLW  0F
2392:  MOVWF  x69
2394:  MOVLW  76
2396:  MOVWF  x6A
2398:  MOVLW  0F
239A:  MOVWF  x6B
239C:  MOVLW  01
239E:  MOVWF  x6C
23A0:  MOVLB  0
23A2:  CALL   1610
....................       glcd_update(); 
23A6:  CALL   07E2
....................       glcd_bar(64, 53, 118, 53,3,1);          // 6. ve thanh co do day =3 
23AA:  MOVLW  40
23AC:  MOVLB  4
23AE:  MOVWF  x30
23B0:  MOVLW  35
23B2:  MOVWF  x31
23B4:  MOVLW  76
23B6:  MOVWF  x32
23B8:  MOVLW  35
23BA:  MOVWF  x33
23BC:  MOVLW  03
23BE:  MOVWF  x34
23C0:  MOVLW  01
23C2:  MOVWF  x35
23C4:  MOVLB  0
23C6:  BRA    1C7C
....................       glcd_update();                           
23C8:  CALL   07E2
....................       glcd_text_setup(80,56,1,1,0);           // 7. cau hinh hien thi chuoi ky tu tai (80,57),font1 (5x7), mau trang, khong de len cac net truoc do 
23CC:  MOVLB  4
23CE:  CLRF   x31
23D0:  MOVLW  50
23D2:  MOVWF  x30
23D4:  CLRF   x33
23D6:  MOVLW  38
23D8:  MOVWF  x32
23DA:  MOVLW  01
23DC:  MOVWF  x34
23DE:  MOVWF  x35
23E0:  CLRF   x36
23E2:  MOVLB  0
23E4:  RCALL  1F98
....................       glcd_text("SPKT");                      // 7. xuat chuoi can hien thi  
23E6:  MOVLW  0E
23E8:  MOVWF  FF6
23EA:  MOVLW  04
23EC:  MOVWF  FF7
23EE:  BRA    216E
....................       glcd_update();                          
23F0:  CALL   07E2
....................       while(true) 
....................       {     
....................             glcd_text_setup(70,20,4,1,1);    // 8. cau hinh hien thi chuoi ky tu tai (70,20),font4 4x(5x7)=20x28, mau trang, ghi de len so truoc do 
23F4:  MOVLB  4
23F6:  CLRF   x31
23F8:  MOVLW  46
23FA:  MOVWF  x30
23FC:  CLRF   x33
23FE:  MOVLW  14
2400:  MOVWF  x32
2402:  MOVLW  04
2404:  MOVWF  x34
2406:  MOVLW  01
2408:  MOVWF  x35
240A:  MOVWF  x36
240C:  MOVLB  0
240E:  RCALL  1F98
....................             printf(glcd_text,"%02d",dem);    // 8. hien thi gia tri cua bien dem 
2410:  MOVFF  42F,430
2414:  MOVLW  01
2416:  MOVLB  4
2418:  MOVWF  x31
241A:  MOVLB  0
241C:  BRA    21BC
....................             glcd_update();                   
241E:  CALL   07E2
....................             dem++; dem%=100; 
2422:  MOVLB  4
2424:  INCF   x2F,F
2426:  MOVFF  42F,436
242A:  MOVLW  64
242C:  MOVWF  x37
242E:  MOVLB  0
2430:  RCALL  2190
2432:  MOVFF  00,42F
....................             delay_ms(200); 
2436:  MOVLW  C8
2438:  MOVLB  4
243A:  MOVWF  x32
243C:  MOVLB  0
243E:  CALL   04F6
2442:  BRA    23F4
....................       } 
.................... } 
2444:  SLEEP 

Configuration Fuses:
   Word  1: CC27   PLL12 CPUDIV1 USBDIV HS FCMEN IESO
   Word  2: 1E3E   PUT BROWNOUT BORV21 VREGEN NOWDT WDT32768
   Word  3: 8700   CCP2C1 PBADEN LPT1OSC MCLR
   Word  4: 00A1   STVREN NOLVP ICSP2 NOXINST NODEBUG
   Word  5: C00F   NOPROTECT NOCPB NOCPD
   Word  6: E00F   NOWRT NOWRTC NOWRTB NOWRTD
   Word  7: 400F   NOEBTR NOEBTRB
